package wgpu;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.TypedPointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>wgpu</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("wgpu") 
@Runtime(CRuntime.class) 
public class WgpuLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUAdapterType implements IntValuedEnum<WGPUAdapterType > {
		WGPUAdapterType_DiscreteGPU(0),
		WGPUAdapterType_IntegratedGPU(1),
		WGPUAdapterType_CPU(2),
		WGPUAdapterType_Unknown(3),
		WGPUAdapterType_Force32(2147483647);
		WGPUAdapterType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUAdapterType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUAdapterType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUAddressMode implements IntValuedEnum<WGPUAddressMode > {
		WGPUAddressMode_Repeat(0),
		WGPUAddressMode_MirrorRepeat(1),
		WGPUAddressMode_ClampToEdge(2),
		WGPUAddressMode_Force32(2147483647);
		WGPUAddressMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUAddressMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUAddressMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUBackendType implements IntValuedEnum<WGPUBackendType > {
		WGPUBackendType_Undefined(0),
		WGPUBackendType_Null(1),
		WGPUBackendType_WebGPU(2),
		WGPUBackendType_D3D11(3),
		WGPUBackendType_D3D12(4),
		WGPUBackendType_Metal(5),
		WGPUBackendType_Vulkan(6),
		WGPUBackendType_OpenGL(7),
		WGPUBackendType_OpenGLES(8),
		WGPUBackendType_Force32(2147483647);
		WGPUBackendType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUBackendType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUBackendType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUBlendFactor implements IntValuedEnum<WGPUBlendFactor > {
		WGPUBlendFactor_Zero(0),
		WGPUBlendFactor_One(1),
		WGPUBlendFactor_Src(2),
		WGPUBlendFactor_OneMinusSrc(3),
		WGPUBlendFactor_SrcAlpha(4),
		WGPUBlendFactor_OneMinusSrcAlpha(5),
		WGPUBlendFactor_Dst(6),
		WGPUBlendFactor_OneMinusDst(7),
		WGPUBlendFactor_DstAlpha(8),
		WGPUBlendFactor_OneMinusDstAlpha(9),
		WGPUBlendFactor_SrcAlphaSaturated(10),
		WGPUBlendFactor_Constant(11),
		WGPUBlendFactor_OneMinusConstant(12),
		WGPUBlendFactor_Force32(2147483647);
		WGPUBlendFactor(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUBlendFactor > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUBlendFactor > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUBlendOperation implements IntValuedEnum<WGPUBlendOperation > {
		WGPUBlendOperation_Add(0),
		WGPUBlendOperation_Subtract(1),
		WGPUBlendOperation_ReverseSubtract(2),
		WGPUBlendOperation_Min(3),
		WGPUBlendOperation_Max(4),
		WGPUBlendOperation_Force32(2147483647);
		WGPUBlendOperation(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUBlendOperation > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUBlendOperation > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUBufferBindingType implements IntValuedEnum<WGPUBufferBindingType > {
		WGPUBufferBindingType_Undefined(0),
		WGPUBufferBindingType_Uniform(1),
		WGPUBufferBindingType_Storage(2),
		WGPUBufferBindingType_ReadOnlyStorage(3),
		WGPUBufferBindingType_Force32(2147483647);
		WGPUBufferBindingType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUBufferBindingType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUBufferBindingType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUBufferMapAsyncStatus implements IntValuedEnum<WGPUBufferMapAsyncStatus > {
		WGPUBufferMapAsyncStatus_Success(0),
		WGPUBufferMapAsyncStatus_ValidationError(1),
		WGPUBufferMapAsyncStatus_Unknown(2),
		WGPUBufferMapAsyncStatus_DeviceLost(3),
		WGPUBufferMapAsyncStatus_DestroyedBeforeCallback(4),
		WGPUBufferMapAsyncStatus_UnmappedBeforeCallback(5),
		WGPUBufferMapAsyncStatus_MappingAlreadyPending(6),
		WGPUBufferMapAsyncStatus_OffsetOutOfRange(7),
		WGPUBufferMapAsyncStatus_SizeOutOfRange(8),
		WGPUBufferMapAsyncStatus_Force32(2147483647);
		WGPUBufferMapAsyncStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUBufferMapAsyncStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUBufferMapAsyncStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUBufferMapState implements IntValuedEnum<WGPUBufferMapState > {
		WGPUBufferMapState_Unmapped(0),
		WGPUBufferMapState_Pending(1),
		WGPUBufferMapState_Mapped(2),
		WGPUBufferMapState_Force32(2147483647);
		WGPUBufferMapState(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUBufferMapState > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUBufferMapState > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUCompareFunction implements IntValuedEnum<WGPUCompareFunction > {
		WGPUCompareFunction_Undefined(0),
		WGPUCompareFunction_Never(1),
		WGPUCompareFunction_Less(2),
		WGPUCompareFunction_LessEqual(3),
		WGPUCompareFunction_Greater(4),
		WGPUCompareFunction_GreaterEqual(5),
		WGPUCompareFunction_Equal(6),
		WGPUCompareFunction_NotEqual(7),
		WGPUCompareFunction_Always(8),
		WGPUCompareFunction_Force32(2147483647);
		WGPUCompareFunction(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUCompareFunction > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUCompareFunction > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUCompilationInfoRequestStatus implements IntValuedEnum<WGPUCompilationInfoRequestStatus > {
		WGPUCompilationInfoRequestStatus_Success(0),
		WGPUCompilationInfoRequestStatus_Error(1),
		WGPUCompilationInfoRequestStatus_DeviceLost(2),
		WGPUCompilationInfoRequestStatus_Unknown(3),
		WGPUCompilationInfoRequestStatus_Force32(2147483647);
		WGPUCompilationInfoRequestStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUCompilationInfoRequestStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUCompilationInfoRequestStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUCompilationMessageType implements IntValuedEnum<WGPUCompilationMessageType > {
		WGPUCompilationMessageType_Error(0),
		WGPUCompilationMessageType_Warning(1),
		WGPUCompilationMessageType_Info(2),
		WGPUCompilationMessageType_Force32(2147483647);
		WGPUCompilationMessageType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUCompilationMessageType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUCompilationMessageType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUCompositeAlphaMode implements IntValuedEnum<WGPUCompositeAlphaMode > {
		WGPUCompositeAlphaMode_Auto(0),
		WGPUCompositeAlphaMode_Opaque(1),
		WGPUCompositeAlphaMode_Premultiplied(2),
		WGPUCompositeAlphaMode_Unpremultiplied(3),
		WGPUCompositeAlphaMode_Inherit(4),
		WGPUCompositeAlphaMode_Force32(2147483647);
		WGPUCompositeAlphaMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUCompositeAlphaMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUCompositeAlphaMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUCreatePipelineAsyncStatus implements IntValuedEnum<WGPUCreatePipelineAsyncStatus > {
		WGPUCreatePipelineAsyncStatus_Success(0),
		WGPUCreatePipelineAsyncStatus_ValidationError(1),
		WGPUCreatePipelineAsyncStatus_InternalError(2),
		WGPUCreatePipelineAsyncStatus_DeviceLost(3),
		WGPUCreatePipelineAsyncStatus_DeviceDestroyed(4),
		WGPUCreatePipelineAsyncStatus_Unknown(5),
		WGPUCreatePipelineAsyncStatus_Force32(2147483647);
		WGPUCreatePipelineAsyncStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUCreatePipelineAsyncStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUCreatePipelineAsyncStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUCullMode implements IntValuedEnum<WGPUCullMode > {
		WGPUCullMode_None(0),
		WGPUCullMode_Front(1),
		WGPUCullMode_Back(2),
		WGPUCullMode_Force32(2147483647);
		WGPUCullMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUCullMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUCullMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUDeviceLostReason implements IntValuedEnum<WGPUDeviceLostReason > {
		WGPUDeviceLostReason_Undefined(0),
		WGPUDeviceLostReason_Destroyed(1),
		WGPUDeviceLostReason_Force32(2147483647);
		WGPUDeviceLostReason(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUDeviceLostReason > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUDeviceLostReason > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUErrorFilter implements IntValuedEnum<WGPUErrorFilter > {
		WGPUErrorFilter_Validation(0),
		WGPUErrorFilter_OutOfMemory(1),
		WGPUErrorFilter_Internal(2),
		WGPUErrorFilter_Force32(2147483647);
		WGPUErrorFilter(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUErrorFilter > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUErrorFilter > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUErrorType implements IntValuedEnum<WGPUErrorType > {
		WGPUErrorType_NoError(0),
		WGPUErrorType_Validation(1),
		WGPUErrorType_OutOfMemory(2),
		WGPUErrorType_Internal(3),
		WGPUErrorType_Unknown(4),
		WGPUErrorType_DeviceLost(5),
		WGPUErrorType_Force32(2147483647);
		WGPUErrorType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUErrorType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUErrorType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUFeatureName implements IntValuedEnum<WGPUFeatureName > {
		WGPUFeatureName_Undefined(0),
		WGPUFeatureName_DepthClipControl(1),
		WGPUFeatureName_Depth32FloatStencil8(2),
		WGPUFeatureName_TimestampQuery(3),
		WGPUFeatureName_TextureCompressionBC(4),
		WGPUFeatureName_TextureCompressionETC2(5),
		WGPUFeatureName_TextureCompressionASTC(6),
		WGPUFeatureName_IndirectFirstInstance(7),
		WGPUFeatureName_ShaderF16(8),
		WGPUFeatureName_RG11B10UfloatRenderable(9),
		WGPUFeatureName_BGRA8UnormStorage(10),
		WGPUFeatureName_Float32Filterable(11),
		WGPUFeatureName_Force32(2147483647);
		WGPUFeatureName(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUFeatureName > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUFeatureName > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUFilterMode implements IntValuedEnum<WGPUFilterMode > {
		WGPUFilterMode_Nearest(0),
		WGPUFilterMode_Linear(1),
		WGPUFilterMode_Force32(2147483647);
		WGPUFilterMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUFilterMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUFilterMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUFrontFace implements IntValuedEnum<WGPUFrontFace > {
		WGPUFrontFace_CCW(0),
		WGPUFrontFace_CW(1),
		WGPUFrontFace_Force32(2147483647);
		WGPUFrontFace(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUFrontFace > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUFrontFace > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUIndexFormat implements IntValuedEnum<WGPUIndexFormat > {
		WGPUIndexFormat_Undefined(0),
		WGPUIndexFormat_Uint16(1),
		WGPUIndexFormat_Uint32(2),
		WGPUIndexFormat_Force32(2147483647);
		WGPUIndexFormat(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUIndexFormat > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUIndexFormat > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPULoadOp implements IntValuedEnum<WGPULoadOp > {
		WGPULoadOp_Undefined(0),
		WGPULoadOp_Clear(1),
		WGPULoadOp_Load(2),
		WGPULoadOp_Force32(2147483647);
		WGPULoadOp(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPULoadOp > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPULoadOp > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUMipmapFilterMode implements IntValuedEnum<WGPUMipmapFilterMode > {
		WGPUMipmapFilterMode_Nearest(0),
		WGPUMipmapFilterMode_Linear(1),
		WGPUMipmapFilterMode_Force32(2147483647);
		WGPUMipmapFilterMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUMipmapFilterMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUMipmapFilterMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUPowerPreference implements IntValuedEnum<WGPUPowerPreference > {
		WGPUPowerPreference_Undefined(0),
		WGPUPowerPreference_LowPower(1),
		WGPUPowerPreference_HighPerformance(2),
		WGPUPowerPreference_Force32(2147483647);
		WGPUPowerPreference(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUPowerPreference > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUPowerPreference > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUPresentMode implements IntValuedEnum<WGPUPresentMode > {
		WGPUPresentMode_Fifo(0),
		WGPUPresentMode_FifoRelaxed(1),
		WGPUPresentMode_Immediate(2),
		WGPUPresentMode_Mailbox(3),
		WGPUPresentMode_Force32(2147483647);
		WGPUPresentMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUPresentMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUPresentMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUPrimitiveTopology implements IntValuedEnum<WGPUPrimitiveTopology > {
		WGPUPrimitiveTopology_PointList(0),
		WGPUPrimitiveTopology_LineList(1),
		WGPUPrimitiveTopology_LineStrip(2),
		WGPUPrimitiveTopology_TriangleList(3),
		WGPUPrimitiveTopology_TriangleStrip(4),
		WGPUPrimitiveTopology_Force32(2147483647);
		WGPUPrimitiveTopology(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUPrimitiveTopology > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUPrimitiveTopology > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUQueryType implements IntValuedEnum<WGPUQueryType > {
		WGPUQueryType_Occlusion(0),
		WGPUQueryType_Timestamp(1),
		WGPUQueryType_Force32(2147483647);
		WGPUQueryType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUQueryType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUQueryType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUQueueWorkDoneStatus implements IntValuedEnum<WGPUQueueWorkDoneStatus > {
		WGPUQueueWorkDoneStatus_Success(0),
		WGPUQueueWorkDoneStatus_Error(1),
		WGPUQueueWorkDoneStatus_Unknown(2),
		WGPUQueueWorkDoneStatus_DeviceLost(3),
		WGPUQueueWorkDoneStatus_Force32(2147483647);
		WGPUQueueWorkDoneStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUQueueWorkDoneStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUQueueWorkDoneStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPURequestAdapterStatus implements IntValuedEnum<WGPURequestAdapterStatus > {
		WGPURequestAdapterStatus_Success(0),
		WGPURequestAdapterStatus_Unavailable(1),
		WGPURequestAdapterStatus_Error(2),
		WGPURequestAdapterStatus_Unknown(3),
		WGPURequestAdapterStatus_Force32(2147483647);
		WGPURequestAdapterStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPURequestAdapterStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPURequestAdapterStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPURequestDeviceStatus implements IntValuedEnum<WGPURequestDeviceStatus > {
		WGPURequestDeviceStatus_Success(0),
		WGPURequestDeviceStatus_Error(1),
		WGPURequestDeviceStatus_Unknown(2),
		WGPURequestDeviceStatus_Force32(2147483647);
		WGPURequestDeviceStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPURequestDeviceStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPURequestDeviceStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUSType implements IntValuedEnum<WGPUSType > {
		WGPUSType_Invalid(0),
		WGPUSType_SurfaceDescriptorFromMetalLayer(1),
		WGPUSType_SurfaceDescriptorFromWindowsHWND(2),
		WGPUSType_SurfaceDescriptorFromXlibWindow(3),
		WGPUSType_SurfaceDescriptorFromCanvasHTMLSelector(4),
		WGPUSType_ShaderModuleSPIRVDescriptor(5),
		WGPUSType_ShaderModuleWGSLDescriptor(6),
		WGPUSType_PrimitiveDepthClipControl(7),
		WGPUSType_SurfaceDescriptorFromWaylandSurface(8),
		WGPUSType_SurfaceDescriptorFromAndroidNativeWindow(9),
		WGPUSType_SurfaceDescriptorFromXcbWindow(10),
		WGPUSType_RenderPassDescriptorMaxDrawCount(15),
		WGPUSType_Force32(2147483647);
		WGPUSType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUSType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUSType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUSamplerBindingType implements IntValuedEnum<WGPUSamplerBindingType > {
		WGPUSamplerBindingType_Undefined(0),
		WGPUSamplerBindingType_Filtering(1),
		WGPUSamplerBindingType_NonFiltering(2),
		WGPUSamplerBindingType_Comparison(3),
		WGPUSamplerBindingType_Force32(2147483647);
		WGPUSamplerBindingType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUSamplerBindingType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUSamplerBindingType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUStencilOperation implements IntValuedEnum<WGPUStencilOperation > {
		WGPUStencilOperation_Keep(0),
		WGPUStencilOperation_Zero(1),
		WGPUStencilOperation_Replace(2),
		WGPUStencilOperation_Invert(3),
		WGPUStencilOperation_IncrementClamp(4),
		WGPUStencilOperation_DecrementClamp(5),
		WGPUStencilOperation_IncrementWrap(6),
		WGPUStencilOperation_DecrementWrap(7),
		WGPUStencilOperation_Force32(2147483647);
		WGPUStencilOperation(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUStencilOperation > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUStencilOperation > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUStorageTextureAccess implements IntValuedEnum<WGPUStorageTextureAccess > {
		WGPUStorageTextureAccess_Undefined(0),
		WGPUStorageTextureAccess_WriteOnly(1),
		WGPUStorageTextureAccess_ReadOnly(2),
		WGPUStorageTextureAccess_ReadWrite(3),
		WGPUStorageTextureAccess_Force32(2147483647);
		WGPUStorageTextureAccess(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUStorageTextureAccess > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUStorageTextureAccess > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUStoreOp implements IntValuedEnum<WGPUStoreOp > {
		WGPUStoreOp_Undefined(0),
		WGPUStoreOp_Store(1),
		WGPUStoreOp_Discard(2),
		WGPUStoreOp_Force32(2147483647);
		WGPUStoreOp(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUStoreOp > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUStoreOp > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUSurfaceGetCurrentTextureStatus implements IntValuedEnum<WGPUSurfaceGetCurrentTextureStatus > {
		WGPUSurfaceGetCurrentTextureStatus_Success(0),
		WGPUSurfaceGetCurrentTextureStatus_Timeout(1),
		WGPUSurfaceGetCurrentTextureStatus_Outdated(2),
		WGPUSurfaceGetCurrentTextureStatus_Lost(3),
		WGPUSurfaceGetCurrentTextureStatus_OutOfMemory(4),
		WGPUSurfaceGetCurrentTextureStatus_DeviceLost(5),
		WGPUSurfaceGetCurrentTextureStatus_Force32(2147483647);
		WGPUSurfaceGetCurrentTextureStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUSurfaceGetCurrentTextureStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUSurfaceGetCurrentTextureStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUTextureAspect implements IntValuedEnum<WGPUTextureAspect > {
		WGPUTextureAspect_All(0),
		WGPUTextureAspect_StencilOnly(1),
		WGPUTextureAspect_DepthOnly(2),
		WGPUTextureAspect_Force32(2147483647);
		WGPUTextureAspect(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUTextureAspect > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUTextureAspect > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUTextureDimension implements IntValuedEnum<WGPUTextureDimension > {
		WGPUTextureDimension_1D(0),
		WGPUTextureDimension_2D(1),
		WGPUTextureDimension_3D(2),
		WGPUTextureDimension_Force32(2147483647);
		WGPUTextureDimension(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUTextureDimension > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUTextureDimension > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUTextureFormat implements IntValuedEnum<WGPUTextureFormat > {
		WGPUTextureFormat_Undefined(0),
		WGPUTextureFormat_R8Unorm(1),
		WGPUTextureFormat_R8Snorm(2),
		WGPUTextureFormat_R8Uint(3),
		WGPUTextureFormat_R8Sint(4),
		WGPUTextureFormat_R16Uint(5),
		WGPUTextureFormat_R16Sint(6),
		WGPUTextureFormat_R16Float(7),
		WGPUTextureFormat_RG8Unorm(8),
		WGPUTextureFormat_RG8Snorm(9),
		WGPUTextureFormat_RG8Uint(10),
		WGPUTextureFormat_RG8Sint(11),
		WGPUTextureFormat_R32Float(12),
		WGPUTextureFormat_R32Uint(13),
		WGPUTextureFormat_R32Sint(14),
		WGPUTextureFormat_RG16Uint(15),
		WGPUTextureFormat_RG16Sint(16),
		WGPUTextureFormat_RG16Float(17),
		WGPUTextureFormat_RGBA8Unorm(18),
		WGPUTextureFormat_RGBA8UnormSrgb(19),
		WGPUTextureFormat_RGBA8Snorm(20),
		WGPUTextureFormat_RGBA8Uint(21),
		WGPUTextureFormat_RGBA8Sint(22),
		WGPUTextureFormat_BGRA8Unorm(23),
		WGPUTextureFormat_BGRA8UnormSrgb(24),
		WGPUTextureFormat_RGB10A2Uint(25),
		WGPUTextureFormat_RGB10A2Unorm(26),
		WGPUTextureFormat_RG11B10Ufloat(27),
		WGPUTextureFormat_RGB9E5Ufloat(28),
		WGPUTextureFormat_RG32Float(29),
		WGPUTextureFormat_RG32Uint(30),
		WGPUTextureFormat_RG32Sint(31),
		WGPUTextureFormat_RGBA16Uint(32),
		WGPUTextureFormat_RGBA16Sint(33),
		WGPUTextureFormat_RGBA16Float(34),
		WGPUTextureFormat_RGBA32Float(35),
		WGPUTextureFormat_RGBA32Uint(36),
		WGPUTextureFormat_RGBA32Sint(37),
		WGPUTextureFormat_Stencil8(38),
		WGPUTextureFormat_Depth16Unorm(39),
		WGPUTextureFormat_Depth24Plus(40),
		WGPUTextureFormat_Depth24PlusStencil8(41),
		WGPUTextureFormat_Depth32Float(42),
		WGPUTextureFormat_Depth32FloatStencil8(43),
		WGPUTextureFormat_BC1RGBAUnorm(44),
		WGPUTextureFormat_BC1RGBAUnormSrgb(45),
		WGPUTextureFormat_BC2RGBAUnorm(46),
		WGPUTextureFormat_BC2RGBAUnormSrgb(47),
		WGPUTextureFormat_BC3RGBAUnorm(48),
		WGPUTextureFormat_BC3RGBAUnormSrgb(49),
		WGPUTextureFormat_BC4RUnorm(50),
		WGPUTextureFormat_BC4RSnorm(51),
		WGPUTextureFormat_BC5RGUnorm(52),
		WGPUTextureFormat_BC5RGSnorm(53),
		WGPUTextureFormat_BC6HRGBUfloat(54),
		WGPUTextureFormat_BC6HRGBFloat(55),
		WGPUTextureFormat_BC7RGBAUnorm(56),
		WGPUTextureFormat_BC7RGBAUnormSrgb(57),
		WGPUTextureFormat_ETC2RGB8Unorm(58),
		WGPUTextureFormat_ETC2RGB8UnormSrgb(59),
		WGPUTextureFormat_ETC2RGB8A1Unorm(60),
		WGPUTextureFormat_ETC2RGB8A1UnormSrgb(61),
		WGPUTextureFormat_ETC2RGBA8Unorm(62),
		WGPUTextureFormat_ETC2RGBA8UnormSrgb(63),
		WGPUTextureFormat_EACR11Unorm(64),
		WGPUTextureFormat_EACR11Snorm(65),
		WGPUTextureFormat_EACRG11Unorm(66),
		WGPUTextureFormat_EACRG11Snorm(67),
		WGPUTextureFormat_ASTC4x4Unorm(68),
		WGPUTextureFormat_ASTC4x4UnormSrgb(69),
		WGPUTextureFormat_ASTC5x4Unorm(70),
		WGPUTextureFormat_ASTC5x4UnormSrgb(71),
		WGPUTextureFormat_ASTC5x5Unorm(72),
		WGPUTextureFormat_ASTC5x5UnormSrgb(73),
		WGPUTextureFormat_ASTC6x5Unorm(74),
		WGPUTextureFormat_ASTC6x5UnormSrgb(75),
		WGPUTextureFormat_ASTC6x6Unorm(76),
		WGPUTextureFormat_ASTC6x6UnormSrgb(77),
		WGPUTextureFormat_ASTC8x5Unorm(78),
		WGPUTextureFormat_ASTC8x5UnormSrgb(79),
		WGPUTextureFormat_ASTC8x6Unorm(80),
		WGPUTextureFormat_ASTC8x6UnormSrgb(81),
		WGPUTextureFormat_ASTC8x8Unorm(82),
		WGPUTextureFormat_ASTC8x8UnormSrgb(83),
		WGPUTextureFormat_ASTC10x5Unorm(84),
		WGPUTextureFormat_ASTC10x5UnormSrgb(85),
		WGPUTextureFormat_ASTC10x6Unorm(86),
		WGPUTextureFormat_ASTC10x6UnormSrgb(87),
		WGPUTextureFormat_ASTC10x8Unorm(88),
		WGPUTextureFormat_ASTC10x8UnormSrgb(89),
		WGPUTextureFormat_ASTC10x10Unorm(90),
		WGPUTextureFormat_ASTC10x10UnormSrgb(91),
		WGPUTextureFormat_ASTC12x10Unorm(92),
		WGPUTextureFormat_ASTC12x10UnormSrgb(93),
		WGPUTextureFormat_ASTC12x12Unorm(94),
		WGPUTextureFormat_ASTC12x12UnormSrgb(95),
		WGPUTextureFormat_Force32(2147483647);
		WGPUTextureFormat(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUTextureFormat > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUTextureFormat > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUTextureSampleType implements IntValuedEnum<WGPUTextureSampleType > {
		WGPUTextureSampleType_Undefined(0),
		WGPUTextureSampleType_Float(1),
		WGPUTextureSampleType_UnfilterableFloat(2),
		WGPUTextureSampleType_Depth(3),
		WGPUTextureSampleType_Sint(4),
		WGPUTextureSampleType_Uint(5),
		WGPUTextureSampleType_Force32(2147483647);
		WGPUTextureSampleType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUTextureSampleType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUTextureSampleType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUTextureViewDimension implements IntValuedEnum<WGPUTextureViewDimension > {
		WGPUTextureViewDimension_Undefined(0),
		WGPUTextureViewDimension_1D(1),
		WGPUTextureViewDimension_2D(2),
		WGPUTextureViewDimension_2DArray(3),
		WGPUTextureViewDimension_Cube(4),
		WGPUTextureViewDimension_CubeArray(5),
		WGPUTextureViewDimension_3D(6),
		WGPUTextureViewDimension_Force32(2147483647);
		WGPUTextureViewDimension(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUTextureViewDimension > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUTextureViewDimension > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUVertexFormat implements IntValuedEnum<WGPUVertexFormat > {
		WGPUVertexFormat_Undefined(0),
		WGPUVertexFormat_Uint8x2(1),
		WGPUVertexFormat_Uint8x4(2),
		WGPUVertexFormat_Sint8x2(3),
		WGPUVertexFormat_Sint8x4(4),
		WGPUVertexFormat_Unorm8x2(5),
		WGPUVertexFormat_Unorm8x4(6),
		WGPUVertexFormat_Snorm8x2(7),
		WGPUVertexFormat_Snorm8x4(8),
		WGPUVertexFormat_Uint16x2(9),
		WGPUVertexFormat_Uint16x4(10),
		WGPUVertexFormat_Sint16x2(11),
		WGPUVertexFormat_Sint16x4(12),
		WGPUVertexFormat_Unorm16x2(13),
		WGPUVertexFormat_Unorm16x4(14),
		WGPUVertexFormat_Snorm16x2(15),
		WGPUVertexFormat_Snorm16x4(16),
		WGPUVertexFormat_Float16x2(17),
		WGPUVertexFormat_Float16x4(18),
		WGPUVertexFormat_Float32(19),
		WGPUVertexFormat_Float32x2(20),
		WGPUVertexFormat_Float32x3(21),
		WGPUVertexFormat_Float32x4(22),
		WGPUVertexFormat_Uint32(23),
		WGPUVertexFormat_Uint32x2(24),
		WGPUVertexFormat_Uint32x3(25),
		WGPUVertexFormat_Uint32x4(26),
		WGPUVertexFormat_Sint32(27),
		WGPUVertexFormat_Sint32x2(28),
		WGPUVertexFormat_Sint32x3(29),
		WGPUVertexFormat_Sint32x4(30),
		WGPUVertexFormat_Force32(2147483647);
		WGPUVertexFormat(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUVertexFormat > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUVertexFormat > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUVertexStepMode implements IntValuedEnum<WGPUVertexStepMode > {
		WGPUVertexStepMode_Vertex(0),
		WGPUVertexStepMode_Instance(1),
		WGPUVertexStepMode_VertexBufferNotUsed(2),
		WGPUVertexStepMode_Force32(2147483647);
		WGPUVertexStepMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUVertexStepMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUVertexStepMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUBufferUsage implements IntValuedEnum<WGPUBufferUsage > {
		WGPUBufferUsage_None(0),
		WGPUBufferUsage_MapRead(1),
		WGPUBufferUsage_MapWrite(2),
		WGPUBufferUsage_CopySrc(4),
		WGPUBufferUsage_CopyDst(8),
		WGPUBufferUsage_Index(16),
		WGPUBufferUsage_Vertex(32),
		WGPUBufferUsage_Uniform(64),
		WGPUBufferUsage_Storage(128),
		WGPUBufferUsage_Indirect(256),
		WGPUBufferUsage_QueryResolve(512),
		WGPUBufferUsage_Force32(2147483647);
		WGPUBufferUsage(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUBufferUsage > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUBufferUsage > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUColorWriteMask implements IntValuedEnum<WGPUColorWriteMask > {
		WGPUColorWriteMask_None(0),
		WGPUColorWriteMask_Red(1),
		WGPUColorWriteMask_Green(2),
		WGPUColorWriteMask_Blue(4),
		WGPUColorWriteMask_Alpha(8),
		WGPUColorWriteMask_All(15),
		WGPUColorWriteMask_Force32(2147483647);
		WGPUColorWriteMask(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUColorWriteMask > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUColorWriteMask > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUMapMode implements IntValuedEnum<WGPUMapMode > {
		WGPUMapMode_None(0),
		WGPUMapMode_Read(1),
		WGPUMapMode_Write(2),
		WGPUMapMode_Force32(2147483647);
		WGPUMapMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUMapMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUMapMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUShaderStage implements IntValuedEnum<WGPUShaderStage > {
		WGPUShaderStage_None(0),
		WGPUShaderStage_Vertex(1),
		WGPUShaderStage_Fragment(2),
		WGPUShaderStage_Compute(4),
		WGPUShaderStage_Force32(2147483647);
		WGPUShaderStage(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUShaderStage > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUShaderStage > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUTextureUsage implements IntValuedEnum<WGPUTextureUsage > {
		WGPUTextureUsage_None(0),
		WGPUTextureUsage_CopySrc(1),
		WGPUTextureUsage_CopyDst(2),
		WGPUTextureUsage_TextureBinding(4),
		WGPUTextureUsage_StorageBinding(8),
		WGPUTextureUsage_RenderAttachment(16),
		WGPUTextureUsage_Force32(2147483647);
		WGPUTextureUsage(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUTextureUsage > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUTextureUsage > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : wgpu.h</i>
	 */
	public enum WGPUNativeSType implements IntValuedEnum<WGPUNativeSType > {
		/// Start at 0003 since that's allocated range for wgpu-native
		WGPUSType_DeviceExtras(196609),
		WGPUSType_RequiredLimitsExtras(196610),
		WGPUSType_PipelineLayoutExtras(196611),
		WGPUSType_ShaderModuleGLSLDescriptor(196612),
		WGPUSType_SupportedLimitsExtras(196613),
		WGPUSType_InstanceExtras(196614),
		WGPUSType_BindGroupEntryExtras(196615),
		WGPUSType_BindGroupLayoutEntryExtras(196616),
		WGPUSType_QuerySetDescriptorExtras(196617),
		WGPUSType_SurfaceConfigurationExtras(196618),
		WGPUNativeSType_Force32(2147483647);
		WGPUNativeSType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUNativeSType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUNativeSType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : wgpu.h</i>
	 */
	public enum WGPUNativeFeature implements IntValuedEnum<WGPUNativeFeature > {
		WGPUNativeFeature_PushConstants(196609),
		WGPUNativeFeature_TextureAdapterSpecificFormatFeatures(196610),
		WGPUNativeFeature_MultiDrawIndirect(196611),
		WGPUNativeFeature_MultiDrawIndirectCount(196612),
		WGPUNativeFeature_VertexWritableStorage(196613),
		WGPUNativeFeature_TextureBindingArray(196614),
		WGPUNativeFeature_SampledTextureAndStorageBufferArrayNonUniformIndexing(196615),
		WGPUNativeFeature_PipelineStatisticsQuery(196616),
		WGPUNativeFeature_StorageResourceBindingArray(196617),
		WGPUNativeFeature_PartiallyBoundBindingArray(196618),
		WGPUNativeFeature_Force32(2147483647);
		WGPUNativeFeature(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUNativeFeature > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUNativeFeature > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : wgpu.h</i>
	 */
	public enum WGPULogLevel implements IntValuedEnum<WGPULogLevel > {
		WGPULogLevel_Off(0),
		WGPULogLevel_Error(1),
		WGPULogLevel_Warn(2),
		WGPULogLevel_Info(3),
		WGPULogLevel_Debug(4),
		WGPULogLevel_Trace(5),
		WGPULogLevel_Force32(2147483647);
		WGPULogLevel(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPULogLevel > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPULogLevel > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : wgpu.h</i>
	 */
	public enum WGPUInstanceBackend implements IntValuedEnum<WGPUInstanceBackend > {
		WGPUInstanceBackend_All(0),
		WGPUInstanceBackend_Vulkan(1 << 0),
		WGPUInstanceBackend_GL(1 << 1),
		WGPUInstanceBackend_Metal(1 << 2),
		WGPUInstanceBackend_DX12(1 << 3),
		WGPUInstanceBackend_DX11(1 << 4),
		WGPUInstanceBackend_BrowserWebGPU(1 << 5),
		WGPUInstanceBackend_Primary((int)WgpuLibrary.WGPUInstanceBackend.WGPUInstanceBackend_Vulkan.value() | (int)WgpuLibrary.WGPUInstanceBackend.WGPUInstanceBackend_Metal.value() | (int)WgpuLibrary.WGPUInstanceBackend.WGPUInstanceBackend_DX12.value() | (int)WgpuLibrary.WGPUInstanceBackend.WGPUInstanceBackend_BrowserWebGPU.value()),
		WGPUInstanceBackend_Secondary((int)WgpuLibrary.WGPUInstanceBackend.WGPUInstanceBackend_GL.value() | (int)WgpuLibrary.WGPUInstanceBackend.WGPUInstanceBackend_DX11.value()),
		WGPUInstanceBackend_Force32(2147483647);
		WGPUInstanceBackend(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUInstanceBackend > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUInstanceBackend > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : wgpu.h</i>
	 */
	public enum WGPUInstanceFlag implements IntValuedEnum<WGPUInstanceFlag > {
		WGPUInstanceFlag_Default(0),
		WGPUInstanceFlag_Debug(1 << 0),
		WGPUInstanceFlag_Validation(1 << 1),
		WGPUInstanceFlag_DiscardHalLabels(1 << 2),
		WGPUInstanceFlag_Force32(2147483647);
		WGPUInstanceFlag(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUInstanceFlag > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUInstanceFlag > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : wgpu.h</i>
	 */
	public enum WGPUDx12Compiler implements IntValuedEnum<WGPUDx12Compiler > {
		WGPUDx12Compiler_Undefined(0),
		WGPUDx12Compiler_Fxc(1),
		WGPUDx12Compiler_Dxc(2),
		WGPUDx12Compiler_Force32(2147483647);
		WGPUDx12Compiler(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUDx12Compiler > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUDx12Compiler > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : wgpu.h</i>
	 */
	public enum WGPUGles3MinorVersion implements IntValuedEnum<WGPUGles3MinorVersion > {
		WGPUGles3MinorVersion_Automatic(0),
		WGPUGles3MinorVersion_Version0(1),
		WGPUGles3MinorVersion_Version1(2),
		WGPUGles3MinorVersion_Version2(3),
		WGPUGles3MinorVersion_Force32(2147483647);
		WGPUGles3MinorVersion(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUGles3MinorVersion > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUGles3MinorVersion > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : wgpu.h</i>
	 */
	public enum WGPUPipelineStatisticName implements IntValuedEnum<WGPUPipelineStatisticName > {
		WGPUPipelineStatisticName_VertexShaderInvocations(0),
		WGPUPipelineStatisticName_ClipperInvocations(1),
		WGPUPipelineStatisticName_ClipperPrimitivesOut(2),
		WGPUPipelineStatisticName_FragmentShaderInvocations(3),
		WGPUPipelineStatisticName_ComputeShaderInvocations(4),
		WGPUPipelineStatisticName_Force32(2147483647);
		WGPUPipelineStatisticName(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUPipelineStatisticName > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUPipelineStatisticName > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : wgpu.h</i>
	 */
	public enum WGPUNativeQueryType implements IntValuedEnum<WGPUNativeQueryType > {
		WGPUNativeQueryType_PipelineStatistics(196608),
		WGPUNativeQueryType_Force32(2147483647);
		WGPUNativeQueryType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUNativeQueryType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUNativeQueryType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// <i>native declaration : webgpu.h</i>
	public static final long WGPU_LIMIT_U32_UNDEFINED = (long)(4294967295L);
	/// <i>native declaration : webgpu.h</i>
	public static final int WGPU_LIMIT_U64_UNDEFINED = (int)(-1);
	/// <i>native declaration : webgpu.h</i>
	public static final int WGPU_WHOLE_SIZE = (int)(-1);
	/// <i>native declaration : webgpu.h</i>
	public static final long WGPU_COPY_STRIDE_UNDEFINED = (long)(4294967295L);
	/// <i>native declaration : webgpu.h</i>
	public static final long WGPU_QUERY_SET_INDEX_UNDEFINED = (long)(4294967295L);
	/// <i>native declaration : webgpu.h</i>
	public static final long WGPU_MIP_LEVEL_COUNT_UNDEFINED = (long)(4294967295L);
	/// <i>native declaration : webgpu.h</i>
	public static final long WGPU_ARRAY_LAYER_COUNT_UNDEFINED = (long)(4294967295L);
	/// <i>native declaration : wgpu.h</i>
	/// <i>native declaration : wgpu.h</i>
	public static abstract class WGPUBufferMapCallback extends Callback<WGPUBufferMapCallback > {
		abstract public void apply(IntValuedEnum<WgpuLibrary.WGPUBufferMapAsyncStatus > status, Pointer<? > userdata);
	};
	/// <i>native declaration : wgpu.h</i>
	/// <i>native declaration : wgpu.h</i>
	public static abstract class WGPUCompilationInfoCallback extends Callback<WGPUCompilationInfoCallback > {
		abstract public void apply(IntValuedEnum<WgpuLibrary.WGPUCompilationInfoRequestStatus > status, Pointer<WGPUCompilationInfo > compilationInfo, Pointer<? > userdata);
	};
	/// <i>native declaration : wgpu.h</i>
	/// <i>native declaration : wgpu.h</i>
	public static abstract class WGPUCreateComputePipelineAsyncCallback extends Callback<WGPUCreateComputePipelineAsyncCallback > {
		abstract public void apply(IntValuedEnum<WgpuLibrary.WGPUCreatePipelineAsyncStatus > status, WgpuLibrary.WGPUComputePipeline pipeline, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : wgpu.h</i>
	/// <i>native declaration : wgpu.h</i>
	public static abstract class WGPUCreateRenderPipelineAsyncCallback extends Callback<WGPUCreateRenderPipelineAsyncCallback > {
		abstract public void apply(IntValuedEnum<WgpuLibrary.WGPUCreatePipelineAsyncStatus > status, WgpuLibrary.WGPURenderPipeline pipeline, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : wgpu.h</i>
	/// <i>native declaration : wgpu.h</i>
	public static abstract class WGPUDeviceLostCallback extends Callback<WGPUDeviceLostCallback > {
		abstract public void apply(IntValuedEnum<WgpuLibrary.WGPUDeviceLostReason > reason, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : wgpu.h</i>
	/// <i>native declaration : wgpu.h</i>
	public static abstract class WGPUErrorCallback extends Callback<WGPUErrorCallback > {
		abstract public void apply(IntValuedEnum<WgpuLibrary.WGPUErrorType > type, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : wgpu.h</i>
	/// <i>native declaration : wgpu.h</i>
	public static abstract class WGPUProc extends Callback<WGPUProc > {
		abstract public void apply();
	};
	/// <i>native declaration : wgpu.h</i>
	/// <i>native declaration : wgpu.h</i>
	public static abstract class WGPUQueueWorkDoneCallback extends Callback<WGPUQueueWorkDoneCallback > {
		abstract public void apply(IntValuedEnum<WgpuLibrary.WGPUQueueWorkDoneStatus > status, Pointer<? > userdata);
	};
	/// <i>native declaration : wgpu.h</i>
	/// <i>native declaration : wgpu.h</i>
	public static abstract class WGPURequestAdapterCallback extends Callback<WGPURequestAdapterCallback > {
		abstract public void apply(IntValuedEnum<WgpuLibrary.WGPURequestAdapterStatus > status, WgpuLibrary.WGPUAdapter adapter, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : wgpu.h</i>
	/// <i>native declaration : wgpu.h</i>
	public static abstract class WGPURequestDeviceCallback extends Callback<WGPURequestDeviceCallback > {
		abstract public void apply(IntValuedEnum<WgpuLibrary.WGPURequestDeviceStatus > status, WgpuLibrary.WGPUDevice device, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCreateInstance extends Callback<WGPUProcCreateInstance > {
		abstract public WgpuLibrary.WGPUInstance apply(Pointer<WGPUInstanceDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcGetProcAddress extends Callback<WGPUProcGetProcAddress > {
		abstract public Pointer<WgpuLibrary.WGPUProc > apply(WgpuLibrary.WGPUDevice device, Pointer<Byte > procName);
	};
	/**
	 * Procs of Adapter<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Adapter<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcAdapterEnumerateFeatures extends Callback<WGPUProcAdapterEnumerateFeatures > {
		@Ptr 
		abstract public long apply(WgpuLibrary.WGPUAdapter adapter, Pointer<IntValuedEnum<WgpuLibrary.WGPUFeatureName > > features);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterGetLimits extends Callback<WGPUProcAdapterGetLimits > {
		abstract public int apply(WgpuLibrary.WGPUAdapter adapter, Pointer<WGPUSupportedLimits > limits);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterGetProperties extends Callback<WGPUProcAdapterGetProperties > {
		abstract public void apply(WgpuLibrary.WGPUAdapter adapter, Pointer<WGPUAdapterProperties > properties);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterHasFeature extends Callback<WGPUProcAdapterHasFeature > {
		abstract public int apply(WgpuLibrary.WGPUAdapter adapter, IntValuedEnum<WgpuLibrary.WGPUFeatureName > feature);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterRequestDevice extends Callback<WGPUProcAdapterRequestDevice > {
		abstract public void apply(WgpuLibrary.WGPUAdapter adapter, Pointer<WGPUDeviceDescriptor > descriptor, Pointer<WgpuLibrary.WGPURequestDeviceCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterReference extends Callback<WGPUProcAdapterReference > {
		abstract public void apply(WgpuLibrary.WGPUAdapter adapter);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterRelease extends Callback<WGPUProcAdapterRelease > {
		abstract public void apply(WgpuLibrary.WGPUAdapter adapter);
	};
	/**
	 * Procs of BindGroup<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of BindGroup<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcBindGroupSetLabel extends Callback<WGPUProcBindGroupSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUBindGroup bindGroup, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBindGroupReference extends Callback<WGPUProcBindGroupReference > {
		abstract public void apply(WgpuLibrary.WGPUBindGroup bindGroup);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBindGroupRelease extends Callback<WGPUProcBindGroupRelease > {
		abstract public void apply(WgpuLibrary.WGPUBindGroup bindGroup);
	};
	/**
	 * Procs of BindGroupLayout<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of BindGroupLayout<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcBindGroupLayoutSetLabel extends Callback<WGPUProcBindGroupLayoutSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUBindGroupLayout bindGroupLayout, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBindGroupLayoutReference extends Callback<WGPUProcBindGroupLayoutReference > {
		abstract public void apply(WgpuLibrary.WGPUBindGroupLayout bindGroupLayout);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBindGroupLayoutRelease extends Callback<WGPUProcBindGroupLayoutRelease > {
		abstract public void apply(WgpuLibrary.WGPUBindGroupLayout bindGroupLayout);
	};
	/**
	 * Procs of Buffer<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Buffer<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcBufferDestroy extends Callback<WGPUProcBufferDestroy > {
		abstract public void apply(WgpuLibrary.WGPUBuffer buffer);
	};
	/// <i>native declaration : webgpu.h:1294</i>
	/// <i>native declaration : webgpu.h:1294</i>
	public static abstract class WGPUProcBufferGetConstMappedRange extends Callback<WGPUProcBufferGetConstMappedRange > {
		abstract public Pointer<? > apply(WgpuLibrary.WGPUBuffer buffer, @Ptr long offset, @Ptr long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferGetMapState extends Callback<WGPUProcBufferGetMapState > {
		abstract public IntValuedEnum<WgpuLibrary.WGPUBufferMapState > apply(WgpuLibrary.WGPUBuffer buffer);
	};
	/// <i>native declaration : webgpu.h:1296</i>
	/// <i>native declaration : webgpu.h:1296</i>
	public static abstract class WGPUProcBufferGetMappedRange extends Callback<WGPUProcBufferGetMappedRange > {
		abstract public Pointer<? > apply(WgpuLibrary.WGPUBuffer buffer, @Ptr long offset, @Ptr long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferGetSize extends Callback<WGPUProcBufferGetSize > {
		abstract public long apply(WgpuLibrary.WGPUBuffer buffer);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferGetUsage extends Callback<WGPUProcBufferGetUsage > {
		abstract public int apply(WgpuLibrary.WGPUBuffer buffer);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferMapAsync extends Callback<WGPUProcBufferMapAsync > {
		abstract public void apply(WgpuLibrary.WGPUBuffer buffer, int mode, @Ptr long offset, @Ptr long size, Pointer<WgpuLibrary.WGPUBufferMapCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferSetLabel extends Callback<WGPUProcBufferSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUBuffer buffer, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferUnmap extends Callback<WGPUProcBufferUnmap > {
		abstract public void apply(WgpuLibrary.WGPUBuffer buffer);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferReference extends Callback<WGPUProcBufferReference > {
		abstract public void apply(WgpuLibrary.WGPUBuffer buffer);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferRelease extends Callback<WGPUProcBufferRelease > {
		abstract public void apply(WgpuLibrary.WGPUBuffer buffer);
	};
	/**
	 * Procs of CommandBuffer<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of CommandBuffer<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcCommandBufferSetLabel extends Callback<WGPUProcCommandBufferSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUCommandBuffer commandBuffer, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandBufferReference extends Callback<WGPUProcCommandBufferReference > {
		abstract public void apply(WgpuLibrary.WGPUCommandBuffer commandBuffer);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandBufferRelease extends Callback<WGPUProcCommandBufferRelease > {
		abstract public void apply(WgpuLibrary.WGPUCommandBuffer commandBuffer);
	};
	/**
	 * Procs of CommandEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of CommandEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcCommandEncoderBeginComputePass extends Callback<WGPUProcCommandEncoderBeginComputePass > {
		abstract public WgpuLibrary.WGPUComputePassEncoder apply(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUComputePassDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderBeginRenderPass extends Callback<WGPUProcCommandEncoderBeginRenderPass > {
		abstract public WgpuLibrary.WGPURenderPassEncoder apply(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPURenderPassDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderClearBuffer extends Callback<WGPUProcCommandEncoderClearBuffer > {
		abstract public void apply(WgpuLibrary.WGPUCommandEncoder commandEncoder, WgpuLibrary.WGPUBuffer buffer, long offset, long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderCopyBufferToBuffer extends Callback<WGPUProcCommandEncoderCopyBufferToBuffer > {
		abstract public void apply(WgpuLibrary.WGPUCommandEncoder commandEncoder, WgpuLibrary.WGPUBuffer source, long sourceOffset, WgpuLibrary.WGPUBuffer destination, long destinationOffset, long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderCopyBufferToTexture extends Callback<WGPUProcCommandEncoderCopyBufferToTexture > {
		abstract public void apply(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUImageCopyBuffer > source, Pointer<WGPUImageCopyTexture > destination, Pointer<WGPUExtent3D > copySize);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderCopyTextureToBuffer extends Callback<WGPUProcCommandEncoderCopyTextureToBuffer > {
		abstract public void apply(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUImageCopyTexture > source, Pointer<WGPUImageCopyBuffer > destination, Pointer<WGPUExtent3D > copySize);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderCopyTextureToTexture extends Callback<WGPUProcCommandEncoderCopyTextureToTexture > {
		abstract public void apply(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUImageCopyTexture > source, Pointer<WGPUImageCopyTexture > destination, Pointer<WGPUExtent3D > copySize);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderFinish extends Callback<WGPUProcCommandEncoderFinish > {
		abstract public WgpuLibrary.WGPUCommandBuffer apply(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUCommandBufferDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderInsertDebugMarker extends Callback<WGPUProcCommandEncoderInsertDebugMarker > {
		abstract public void apply(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > markerLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderPopDebugGroup extends Callback<WGPUProcCommandEncoderPopDebugGroup > {
		abstract public void apply(WgpuLibrary.WGPUCommandEncoder commandEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderPushDebugGroup extends Callback<WGPUProcCommandEncoderPushDebugGroup > {
		abstract public void apply(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > groupLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderResolveQuerySet extends Callback<WGPUProcCommandEncoderResolveQuerySet > {
		abstract public void apply(WgpuLibrary.WGPUCommandEncoder commandEncoder, WgpuLibrary.WGPUQuerySet querySet, int firstQuery, int queryCount, WgpuLibrary.WGPUBuffer destination, long destinationOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderSetLabel extends Callback<WGPUProcCommandEncoderSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderWriteTimestamp extends Callback<WGPUProcCommandEncoderWriteTimestamp > {
		abstract public void apply(WgpuLibrary.WGPUCommandEncoder commandEncoder, WgpuLibrary.WGPUQuerySet querySet, int queryIndex);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderReference extends Callback<WGPUProcCommandEncoderReference > {
		abstract public void apply(WgpuLibrary.WGPUCommandEncoder commandEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderRelease extends Callback<WGPUProcCommandEncoderRelease > {
		abstract public void apply(WgpuLibrary.WGPUCommandEncoder commandEncoder);
	};
	/**
	 * Procs of ComputePassEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of ComputePassEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcComputePassEncoderDispatchWorkgroups extends Callback<WGPUProcComputePassEncoderDispatchWorkgroups > {
		abstract public void apply(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, int workgroupCountX, int workgroupCountY, int workgroupCountZ);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderDispatchWorkgroupsIndirect extends Callback<WGPUProcComputePassEncoderDispatchWorkgroupsIndirect > {
		abstract public void apply(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, WgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderEnd extends Callback<WGPUProcComputePassEncoderEnd > {
		abstract public void apply(WgpuLibrary.WGPUComputePassEncoder computePassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderInsertDebugMarker extends Callback<WGPUProcComputePassEncoderInsertDebugMarker > {
		abstract public void apply(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, Pointer<Byte > markerLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderPopDebugGroup extends Callback<WGPUProcComputePassEncoderPopDebugGroup > {
		abstract public void apply(WgpuLibrary.WGPUComputePassEncoder computePassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderPushDebugGroup extends Callback<WGPUProcComputePassEncoderPushDebugGroup > {
		abstract public void apply(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, Pointer<Byte > groupLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderSetBindGroup extends Callback<WGPUProcComputePassEncoderSetBindGroup > {
		abstract public void apply(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, int groupIndex, WgpuLibrary.WGPUBindGroup group, @Ptr long dynamicOffsetCount, Pointer<Integer > dynamicOffsets);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderSetLabel extends Callback<WGPUProcComputePassEncoderSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderSetPipeline extends Callback<WGPUProcComputePassEncoderSetPipeline > {
		abstract public void apply(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, WgpuLibrary.WGPUComputePipeline pipeline);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderReference extends Callback<WGPUProcComputePassEncoderReference > {
		abstract public void apply(WgpuLibrary.WGPUComputePassEncoder computePassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderRelease extends Callback<WGPUProcComputePassEncoderRelease > {
		abstract public void apply(WgpuLibrary.WGPUComputePassEncoder computePassEncoder);
	};
	/**
	 * Procs of ComputePipeline<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of ComputePipeline<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcComputePipelineGetBindGroupLayout extends Callback<WGPUProcComputePipelineGetBindGroupLayout > {
		abstract public WgpuLibrary.WGPUBindGroupLayout apply(WgpuLibrary.WGPUComputePipeline computePipeline, int groupIndex);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePipelineSetLabel extends Callback<WGPUProcComputePipelineSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUComputePipeline computePipeline, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePipelineReference extends Callback<WGPUProcComputePipelineReference > {
		abstract public void apply(WgpuLibrary.WGPUComputePipeline computePipeline);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePipelineRelease extends Callback<WGPUProcComputePipelineRelease > {
		abstract public void apply(WgpuLibrary.WGPUComputePipeline computePipeline);
	};
	/**
	 * Procs of Device<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Device<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcDeviceCreateBindGroup extends Callback<WGPUProcDeviceCreateBindGroup > {
		abstract public WgpuLibrary.WGPUBindGroup apply(WgpuLibrary.WGPUDevice device, Pointer<WGPUBindGroupDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateBindGroupLayout extends Callback<WGPUProcDeviceCreateBindGroupLayout > {
		abstract public WgpuLibrary.WGPUBindGroupLayout apply(WgpuLibrary.WGPUDevice device, Pointer<WGPUBindGroupLayoutDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateBuffer extends Callback<WGPUProcDeviceCreateBuffer > {
		abstract public WgpuLibrary.WGPUBuffer apply(WgpuLibrary.WGPUDevice device, Pointer<WGPUBufferDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateCommandEncoder extends Callback<WGPUProcDeviceCreateCommandEncoder > {
		abstract public WgpuLibrary.WGPUCommandEncoder apply(WgpuLibrary.WGPUDevice device, Pointer<WGPUCommandEncoderDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateComputePipeline extends Callback<WGPUProcDeviceCreateComputePipeline > {
		abstract public WgpuLibrary.WGPUComputePipeline apply(WgpuLibrary.WGPUDevice device, Pointer<WGPUComputePipelineDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateComputePipelineAsync extends Callback<WGPUProcDeviceCreateComputePipelineAsync > {
		abstract public void apply(WgpuLibrary.WGPUDevice device, Pointer<WGPUComputePipelineDescriptor > descriptor, Pointer<WgpuLibrary.WGPUCreateComputePipelineAsyncCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreatePipelineLayout extends Callback<WGPUProcDeviceCreatePipelineLayout > {
		abstract public WgpuLibrary.WGPUPipelineLayout apply(WgpuLibrary.WGPUDevice device, Pointer<WGPUPipelineLayoutDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateQuerySet extends Callback<WGPUProcDeviceCreateQuerySet > {
		abstract public WgpuLibrary.WGPUQuerySet apply(WgpuLibrary.WGPUDevice device, Pointer<WGPUQuerySetDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateRenderBundleEncoder extends Callback<WGPUProcDeviceCreateRenderBundleEncoder > {
		abstract public WgpuLibrary.WGPURenderBundleEncoder apply(WgpuLibrary.WGPUDevice device, Pointer<WGPURenderBundleEncoderDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateRenderPipeline extends Callback<WGPUProcDeviceCreateRenderPipeline > {
		abstract public WgpuLibrary.WGPURenderPipeline apply(WgpuLibrary.WGPUDevice device, Pointer<WGPURenderPipelineDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateRenderPipelineAsync extends Callback<WGPUProcDeviceCreateRenderPipelineAsync > {
		abstract public void apply(WgpuLibrary.WGPUDevice device, Pointer<WGPURenderPipelineDescriptor > descriptor, Pointer<WgpuLibrary.WGPUCreateRenderPipelineAsyncCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateSampler extends Callback<WGPUProcDeviceCreateSampler > {
		abstract public WgpuLibrary.WGPUSampler apply(WgpuLibrary.WGPUDevice device, Pointer<WGPUSamplerDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateShaderModule extends Callback<WGPUProcDeviceCreateShaderModule > {
		abstract public WgpuLibrary.WGPUShaderModule apply(WgpuLibrary.WGPUDevice device, Pointer<WGPUShaderModuleDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateTexture extends Callback<WGPUProcDeviceCreateTexture > {
		abstract public WgpuLibrary.WGPUTexture apply(WgpuLibrary.WGPUDevice device, Pointer<WGPUTextureDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceDestroy extends Callback<WGPUProcDeviceDestroy > {
		abstract public void apply(WgpuLibrary.WGPUDevice device);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceEnumerateFeatures extends Callback<WGPUProcDeviceEnumerateFeatures > {
		@Ptr 
		abstract public long apply(WgpuLibrary.WGPUDevice device, Pointer<IntValuedEnum<WgpuLibrary.WGPUFeatureName > > features);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceGetLimits extends Callback<WGPUProcDeviceGetLimits > {
		abstract public int apply(WgpuLibrary.WGPUDevice device, Pointer<WGPUSupportedLimits > limits);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceGetQueue extends Callback<WGPUProcDeviceGetQueue > {
		abstract public WgpuLibrary.WGPUQueue apply(WgpuLibrary.WGPUDevice device);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceHasFeature extends Callback<WGPUProcDeviceHasFeature > {
		abstract public int apply(WgpuLibrary.WGPUDevice device, IntValuedEnum<WgpuLibrary.WGPUFeatureName > feature);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDevicePopErrorScope extends Callback<WGPUProcDevicePopErrorScope > {
		abstract public void apply(WgpuLibrary.WGPUDevice device, Pointer<WgpuLibrary.WGPUErrorCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDevicePushErrorScope extends Callback<WGPUProcDevicePushErrorScope > {
		abstract public void apply(WgpuLibrary.WGPUDevice device, IntValuedEnum<WgpuLibrary.WGPUErrorFilter > filter);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceSetLabel extends Callback<WGPUProcDeviceSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUDevice device, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceSetUncapturedErrorCallback extends Callback<WGPUProcDeviceSetUncapturedErrorCallback > {
		abstract public void apply(WgpuLibrary.WGPUDevice device, Pointer<WgpuLibrary.WGPUErrorCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceReference extends Callback<WGPUProcDeviceReference > {
		abstract public void apply(WgpuLibrary.WGPUDevice device);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceRelease extends Callback<WGPUProcDeviceRelease > {
		abstract public void apply(WgpuLibrary.WGPUDevice device);
	};
	/**
	 * Procs of Instance<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Instance<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcInstanceCreateSurface extends Callback<WGPUProcInstanceCreateSurface > {
		abstract public WgpuLibrary.WGPUSurface apply(WgpuLibrary.WGPUInstance instance, Pointer<WGPUSurfaceDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcInstanceProcessEvents extends Callback<WGPUProcInstanceProcessEvents > {
		abstract public void apply(WgpuLibrary.WGPUInstance instance);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcInstanceRequestAdapter extends Callback<WGPUProcInstanceRequestAdapter > {
		abstract public void apply(WgpuLibrary.WGPUInstance instance, Pointer<WGPURequestAdapterOptions > options, Pointer<WgpuLibrary.WGPURequestAdapterCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcInstanceReference extends Callback<WGPUProcInstanceReference > {
		abstract public void apply(WgpuLibrary.WGPUInstance instance);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcInstanceRelease extends Callback<WGPUProcInstanceRelease > {
		abstract public void apply(WgpuLibrary.WGPUInstance instance);
	};
	/**
	 * Procs of PipelineLayout<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of PipelineLayout<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcPipelineLayoutSetLabel extends Callback<WGPUProcPipelineLayoutSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUPipelineLayout pipelineLayout, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcPipelineLayoutReference extends Callback<WGPUProcPipelineLayoutReference > {
		abstract public void apply(WgpuLibrary.WGPUPipelineLayout pipelineLayout);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcPipelineLayoutRelease extends Callback<WGPUProcPipelineLayoutRelease > {
		abstract public void apply(WgpuLibrary.WGPUPipelineLayout pipelineLayout);
	};
	/**
	 * Procs of QuerySet<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of QuerySet<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcQuerySetDestroy extends Callback<WGPUProcQuerySetDestroy > {
		abstract public void apply(WgpuLibrary.WGPUQuerySet querySet);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQuerySetGetCount extends Callback<WGPUProcQuerySetGetCount > {
		abstract public int apply(WgpuLibrary.WGPUQuerySet querySet);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQuerySetGetType extends Callback<WGPUProcQuerySetGetType > {
		abstract public IntValuedEnum<WgpuLibrary.WGPUQueryType > apply(WgpuLibrary.WGPUQuerySet querySet);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQuerySetSetLabel extends Callback<WGPUProcQuerySetSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUQuerySet querySet, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQuerySetReference extends Callback<WGPUProcQuerySetReference > {
		abstract public void apply(WgpuLibrary.WGPUQuerySet querySet);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQuerySetRelease extends Callback<WGPUProcQuerySetRelease > {
		abstract public void apply(WgpuLibrary.WGPUQuerySet querySet);
	};
	/**
	 * Procs of Queue<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Queue<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcQueueOnSubmittedWorkDone extends Callback<WGPUProcQueueOnSubmittedWorkDone > {
		abstract public void apply(WgpuLibrary.WGPUQueue queue, Pointer<WgpuLibrary.WGPUQueueWorkDoneCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueSetLabel extends Callback<WGPUProcQueueSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUQueue queue, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueSubmit extends Callback<WGPUProcQueueSubmit > {
		abstract public void apply(WgpuLibrary.WGPUQueue queue, @Ptr long commandCount, Pointer<WgpuLibrary.WGPUCommandBuffer > commands);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueWriteBuffer extends Callback<WGPUProcQueueWriteBuffer > {
		abstract public void apply(WgpuLibrary.WGPUQueue queue, WgpuLibrary.WGPUBuffer buffer, long bufferOffset, Pointer<? > data, @Ptr long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueWriteTexture extends Callback<WGPUProcQueueWriteTexture > {
		abstract public void apply(WgpuLibrary.WGPUQueue queue, Pointer<WGPUImageCopyTexture > destination, Pointer<? > data, @Ptr long dataSize, Pointer<WGPUTextureDataLayout > dataLayout, Pointer<WGPUExtent3D > writeSize);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueReference extends Callback<WGPUProcQueueReference > {
		abstract public void apply(WgpuLibrary.WGPUQueue queue);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueRelease extends Callback<WGPUProcQueueRelease > {
		abstract public void apply(WgpuLibrary.WGPUQueue queue);
	};
	/**
	 * Procs of RenderBundle<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of RenderBundle<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcRenderBundleSetLabel extends Callback<WGPUProcRenderBundleSetLabel > {
		abstract public void apply(WgpuLibrary.WGPURenderBundle renderBundle, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleReference extends Callback<WGPUProcRenderBundleReference > {
		abstract public void apply(WgpuLibrary.WGPURenderBundle renderBundle);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleRelease extends Callback<WGPUProcRenderBundleRelease > {
		abstract public void apply(WgpuLibrary.WGPURenderBundle renderBundle);
	};
	/**
	 * Procs of RenderBundleEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of RenderBundleEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcRenderBundleEncoderDraw extends Callback<WGPUProcRenderBundleEncoderDraw > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int vertexCount, int instanceCount, int firstVertex, int firstInstance);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderDrawIndexed extends Callback<WGPUProcRenderBundleEncoderDrawIndexed > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderDrawIndexedIndirect extends Callback<WGPUProcRenderBundleEncoderDrawIndexedIndirect > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderDrawIndirect extends Callback<WGPUProcRenderBundleEncoderDrawIndirect > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderFinish extends Callback<WGPUProcRenderBundleEncoderFinish > {
		abstract public WgpuLibrary.WGPURenderBundle apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<WGPURenderBundleDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderInsertDebugMarker extends Callback<WGPUProcRenderBundleEncoderInsertDebugMarker > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<Byte > markerLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderPopDebugGroup extends Callback<WGPUProcRenderBundleEncoderPopDebugGroup > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderPushDebugGroup extends Callback<WGPUProcRenderBundleEncoderPushDebugGroup > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<Byte > groupLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderSetBindGroup extends Callback<WGPUProcRenderBundleEncoderSetBindGroup > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int groupIndex, WgpuLibrary.WGPUBindGroup group, @Ptr long dynamicOffsetCount, Pointer<Integer > dynamicOffsets);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderSetIndexBuffer extends Callback<WGPUProcRenderBundleEncoderSetIndexBuffer > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WgpuLibrary.WGPUBuffer buffer, IntValuedEnum<WgpuLibrary.WGPUIndexFormat > format, long offset, long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderSetLabel extends Callback<WGPUProcRenderBundleEncoderSetLabel > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderSetPipeline extends Callback<WGPUProcRenderBundleEncoderSetPipeline > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WgpuLibrary.WGPURenderPipeline pipeline);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderSetVertexBuffer extends Callback<WGPUProcRenderBundleEncoderSetVertexBuffer > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int slot, WgpuLibrary.WGPUBuffer buffer, long offset, long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderReference extends Callback<WGPUProcRenderBundleEncoderReference > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderRelease extends Callback<WGPUProcRenderBundleEncoderRelease > {
		abstract public void apply(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder);
	};
	/**
	 * Procs of RenderPassEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of RenderPassEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcRenderPassEncoderBeginOcclusionQuery extends Callback<WGPUProcRenderPassEncoderBeginOcclusionQuery > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int queryIndex);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderDraw extends Callback<WGPUProcRenderPassEncoderDraw > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int vertexCount, int instanceCount, int firstVertex, int firstInstance);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderDrawIndexed extends Callback<WGPUProcRenderPassEncoderDrawIndexed > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderDrawIndexedIndirect extends Callback<WGPUProcRenderPassEncoderDrawIndexedIndirect > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderDrawIndirect extends Callback<WGPUProcRenderPassEncoderDrawIndirect > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderEnd extends Callback<WGPUProcRenderPassEncoderEnd > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderEndOcclusionQuery extends Callback<WGPUProcRenderPassEncoderEndOcclusionQuery > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderExecuteBundles extends Callback<WGPUProcRenderPassEncoderExecuteBundles > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, @Ptr long bundleCount, Pointer<WgpuLibrary.WGPURenderBundle > bundles);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderInsertDebugMarker extends Callback<WGPUProcRenderPassEncoderInsertDebugMarker > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<Byte > markerLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderPopDebugGroup extends Callback<WGPUProcRenderPassEncoderPopDebugGroup > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderPushDebugGroup extends Callback<WGPUProcRenderPassEncoderPushDebugGroup > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<Byte > groupLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetBindGroup extends Callback<WGPUProcRenderPassEncoderSetBindGroup > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int groupIndex, WgpuLibrary.WGPUBindGroup group, @Ptr long dynamicOffsetCount, Pointer<Integer > dynamicOffsets);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetBlendConstant extends Callback<WGPUProcRenderPassEncoderSetBlendConstant > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<WGPUColor > color);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetIndexBuffer extends Callback<WGPUProcRenderPassEncoderSetIndexBuffer > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WgpuLibrary.WGPUBuffer buffer, IntValuedEnum<WgpuLibrary.WGPUIndexFormat > format, long offset, long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetLabel extends Callback<WGPUProcRenderPassEncoderSetLabel > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetPipeline extends Callback<WGPUProcRenderPassEncoderSetPipeline > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WgpuLibrary.WGPURenderPipeline pipeline);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetScissorRect extends Callback<WGPUProcRenderPassEncoderSetScissorRect > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int x, int y, int width, int height);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetStencilReference extends Callback<WGPUProcRenderPassEncoderSetStencilReference > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int reference);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetVertexBuffer extends Callback<WGPUProcRenderPassEncoderSetVertexBuffer > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int slot, WgpuLibrary.WGPUBuffer buffer, long offset, long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetViewport extends Callback<WGPUProcRenderPassEncoderSetViewport > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderReference extends Callback<WGPUProcRenderPassEncoderReference > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderRelease extends Callback<WGPUProcRenderPassEncoderRelease > {
		abstract public void apply(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder);
	};
	/**
	 * Procs of RenderPipeline<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of RenderPipeline<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcRenderPipelineGetBindGroupLayout extends Callback<WGPUProcRenderPipelineGetBindGroupLayout > {
		abstract public WgpuLibrary.WGPUBindGroupLayout apply(WgpuLibrary.WGPURenderPipeline renderPipeline, int groupIndex);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPipelineSetLabel extends Callback<WGPUProcRenderPipelineSetLabel > {
		abstract public void apply(WgpuLibrary.WGPURenderPipeline renderPipeline, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPipelineReference extends Callback<WGPUProcRenderPipelineReference > {
		abstract public void apply(WgpuLibrary.WGPURenderPipeline renderPipeline);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPipelineRelease extends Callback<WGPUProcRenderPipelineRelease > {
		abstract public void apply(WgpuLibrary.WGPURenderPipeline renderPipeline);
	};
	/**
	 * Procs of Sampler<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Sampler<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcSamplerSetLabel extends Callback<WGPUProcSamplerSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUSampler sampler, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSamplerReference extends Callback<WGPUProcSamplerReference > {
		abstract public void apply(WgpuLibrary.WGPUSampler sampler);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSamplerRelease extends Callback<WGPUProcSamplerRelease > {
		abstract public void apply(WgpuLibrary.WGPUSampler sampler);
	};
	/**
	 * Procs of ShaderModule<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of ShaderModule<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcShaderModuleGetCompilationInfo extends Callback<WGPUProcShaderModuleGetCompilationInfo > {
		abstract public void apply(WgpuLibrary.WGPUShaderModule shaderModule, Pointer<WgpuLibrary.WGPUCompilationInfoCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcShaderModuleSetLabel extends Callback<WGPUProcShaderModuleSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUShaderModule shaderModule, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcShaderModuleReference extends Callback<WGPUProcShaderModuleReference > {
		abstract public void apply(WgpuLibrary.WGPUShaderModule shaderModule);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcShaderModuleRelease extends Callback<WGPUProcShaderModuleRelease > {
		abstract public void apply(WgpuLibrary.WGPUShaderModule shaderModule);
	};
	/**
	 * Procs of Surface<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Surface<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcSurfaceConfigure extends Callback<WGPUProcSurfaceConfigure > {
		abstract public void apply(WgpuLibrary.WGPUSurface surface, Pointer<WGPUSurfaceConfiguration > config);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceGetCapabilities extends Callback<WGPUProcSurfaceGetCapabilities > {
		abstract public void apply(WgpuLibrary.WGPUSurface surface, WgpuLibrary.WGPUAdapter adapter, Pointer<WGPUSurfaceCapabilities > capabilities);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceGetCurrentTexture extends Callback<WGPUProcSurfaceGetCurrentTexture > {
		abstract public void apply(WgpuLibrary.WGPUSurface surface, Pointer<WGPUSurfaceTexture > surfaceTexture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceGetPreferredFormat extends Callback<WGPUProcSurfaceGetPreferredFormat > {
		abstract public IntValuedEnum<WgpuLibrary.WGPUTextureFormat > apply(WgpuLibrary.WGPUSurface surface, WgpuLibrary.WGPUAdapter adapter);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfacePresent extends Callback<WGPUProcSurfacePresent > {
		abstract public void apply(WgpuLibrary.WGPUSurface surface);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceUnconfigure extends Callback<WGPUProcSurfaceUnconfigure > {
		abstract public void apply(WgpuLibrary.WGPUSurface surface);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceReference extends Callback<WGPUProcSurfaceReference > {
		abstract public void apply(WgpuLibrary.WGPUSurface surface);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceRelease extends Callback<WGPUProcSurfaceRelease > {
		abstract public void apply(WgpuLibrary.WGPUSurface surface);
	};
	/**
	 * Procs of SurfaceCapabilities<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of SurfaceCapabilities<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcSurfaceCapabilitiesFreeMembers extends Callback<WGPUProcSurfaceCapabilitiesFreeMembers > {
		abstract public void apply(WGPUSurfaceCapabilities capabilities);
	};
	/**
	 * Procs of Texture<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Texture<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcTextureCreateView extends Callback<WGPUProcTextureCreateView > {
		abstract public WgpuLibrary.WGPUTextureView apply(WgpuLibrary.WGPUTexture texture, Pointer<WGPUTextureViewDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureDestroy extends Callback<WGPUProcTextureDestroy > {
		abstract public void apply(WgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetDepthOrArrayLayers extends Callback<WGPUProcTextureGetDepthOrArrayLayers > {
		abstract public int apply(WgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetDimension extends Callback<WGPUProcTextureGetDimension > {
		abstract public IntValuedEnum<WgpuLibrary.WGPUTextureDimension > apply(WgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetFormat extends Callback<WGPUProcTextureGetFormat > {
		abstract public IntValuedEnum<WgpuLibrary.WGPUTextureFormat > apply(WgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetHeight extends Callback<WGPUProcTextureGetHeight > {
		abstract public int apply(WgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetMipLevelCount extends Callback<WGPUProcTextureGetMipLevelCount > {
		abstract public int apply(WgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetSampleCount extends Callback<WGPUProcTextureGetSampleCount > {
		abstract public int apply(WgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetUsage extends Callback<WGPUProcTextureGetUsage > {
		abstract public int apply(WgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetWidth extends Callback<WGPUProcTextureGetWidth > {
		abstract public int apply(WgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureSetLabel extends Callback<WGPUProcTextureSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUTexture texture, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureReference extends Callback<WGPUProcTextureReference > {
		abstract public void apply(WgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureRelease extends Callback<WGPUProcTextureRelease > {
		abstract public void apply(WgpuLibrary.WGPUTexture texture);
	};
	/**
	 * Procs of TextureView<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of TextureView<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcTextureViewSetLabel extends Callback<WGPUProcTextureViewSetLabel > {
		abstract public void apply(WgpuLibrary.WGPUTextureView textureView, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureViewReference extends Callback<WGPUProcTextureViewReference > {
		abstract public void apply(WgpuLibrary.WGPUTextureView textureView);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureViewRelease extends Callback<WGPUProcTextureViewRelease > {
		abstract public void apply(WgpuLibrary.WGPUTextureView textureView);
	};
	/// <i>native declaration : wgpu.h</i>
	/// <i>native declaration : wgpu.h</i>
	public static abstract class WGPULogCallback extends Callback<WGPULogCallback > {
		abstract public void apply(IntValuedEnum<WgpuLibrary.WGPULogLevel > level, Pointer<Byte > message, Pointer<? > userdata);
	};
	/**
	 * Original signature : <code>WGPUInstance wgpuCreateInstance(const WGPUInstanceDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1503</i>
	 */
	public static WgpuLibrary.WGPUInstance wgpuCreateInstance(Pointer<WGPUInstanceDescriptor > descriptor) {
		return new WgpuLibrary.WGPUInstance(wgpuCreateInstance(Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuCreateInstance(@Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUProc wgpuGetProcAddress(WGPUDevice, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1504</i>
	 */
	public static Pointer<WgpuLibrary.WGPUProc> wgpuGetProcAddress(WgpuLibrary.WGPUDevice device, Pointer<Byte > procName) {
		long hmm = wgpuGetProcAddress(Pointer.getPeer(device), Pointer.getPeer(procName));
		return (Pointer<WgpuLibrary.WGPUProc>) Pointer.pointerToAddress(hmm);
	}
	@Ptr 
	protected native static long wgpuGetProcAddress(@Ptr long device, @Ptr long procName);
	/**
	 * Methods of Adapter<br>
	 * Original signature : <code>size_t wgpuAdapterEnumerateFeatures(WGPUAdapter, WGPUFeatureName*)</code><br>
	 * <i>native declaration : webgpu.h:1507</i>
	 */
	@Ptr 
	public static long wgpuAdapterEnumerateFeatures(WgpuLibrary.WGPUAdapter adapter, Pointer<IntValuedEnum<WgpuLibrary.WGPUFeatureName > > features) {
		return wgpuAdapterEnumerateFeatures(Pointer.getPeer(adapter), Pointer.getPeer(features));
	}
	@Ptr 
	protected native static long wgpuAdapterEnumerateFeatures(@Ptr long adapter, @Ptr long features);
	/**
	 * Original signature : <code>WGPUBool wgpuAdapterGetLimits(WGPUAdapter, WGPUSupportedLimits*)</code><br>
	 * <i>native declaration : webgpu.h:1508</i>
	 */
	public static int wgpuAdapterGetLimits(WgpuLibrary.WGPUAdapter adapter, Pointer<WGPUSupportedLimits > limits) {
		return wgpuAdapterGetLimits(Pointer.getPeer(adapter), Pointer.getPeer(limits));
	}
	protected native static int wgpuAdapterGetLimits(@Ptr long adapter, @Ptr long limits);
	/**
	 * Original signature : <code>void wgpuAdapterGetProperties(WGPUAdapter, WGPUAdapterProperties*)</code><br>
	 * <i>native declaration : webgpu.h:1509</i>
	 */
	public static void wgpuAdapterGetProperties(WgpuLibrary.WGPUAdapter adapter, Pointer<WGPUAdapterProperties > properties) {
		wgpuAdapterGetProperties(Pointer.getPeer(adapter), Pointer.getPeer(properties));
	}
	protected native static void wgpuAdapterGetProperties(@Ptr long adapter, @Ptr long properties);
	/**
	 * Original signature : <code>WGPUBool wgpuAdapterHasFeature(WGPUAdapter, WGPUFeatureName)</code><br>
	 * <i>native declaration : webgpu.h:1510</i>
	 */
	public static int wgpuAdapterHasFeature(WgpuLibrary.WGPUAdapter adapter, IntValuedEnum<WgpuLibrary.WGPUFeatureName > feature) {
		return wgpuAdapterHasFeature(Pointer.getPeer(adapter), (int)feature.value());
	}
	protected native static int wgpuAdapterHasFeature(@Ptr long adapter, int feature);
	/**
	 * Original signature : <code>void wgpuAdapterRequestDevice(WGPUAdapter, const WGPUDeviceDescriptor*, WGPURequestDeviceCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:1511</i>
	 */
	public static void wgpuAdapterRequestDevice(WgpuLibrary.WGPUAdapter adapter, Pointer<WGPUDeviceDescriptor > descriptor, Pointer<WgpuLibrary.WGPURequestDeviceCallback > callback, Pointer<? > userdata) {
		wgpuAdapterRequestDevice(Pointer.getPeer(adapter), Pointer.getPeer(descriptor), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuAdapterRequestDevice(@Ptr long adapter, @Ptr long descriptor, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>void wgpuAdapterReference(WGPUAdapter)</code><br>
	 * <i>native declaration : webgpu.h:1512</i>
	 */
	public static void wgpuAdapterReference(WgpuLibrary.WGPUAdapter adapter) {
		wgpuAdapterReference(Pointer.getPeer(adapter));
	}
	protected native static void wgpuAdapterReference(@Ptr long adapter);
	/**
	 * Original signature : <code>void wgpuAdapterRelease(WGPUAdapter)</code><br>
	 * <i>native declaration : webgpu.h:1513</i>
	 */
	public static void wgpuAdapterRelease(WgpuLibrary.WGPUAdapter adapter) {
		wgpuAdapterRelease(Pointer.getPeer(adapter));
	}
	protected native static void wgpuAdapterRelease(@Ptr long adapter);
	/**
	 * Methods of BindGroup<br>
	 * Original signature : <code>void wgpuBindGroupSetLabel(WGPUBindGroup, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1516</i>
	 */
	public static void wgpuBindGroupSetLabel(WgpuLibrary.WGPUBindGroup bindGroup, Pointer<Byte > label) {
		wgpuBindGroupSetLabel(Pointer.getPeer(bindGroup), Pointer.getPeer(label));
	}
	protected native static void wgpuBindGroupSetLabel(@Ptr long bindGroup, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuBindGroupReference(WGPUBindGroup)</code><br>
	 * <i>native declaration : webgpu.h:1517</i>
	 */
	public static void wgpuBindGroupReference(WgpuLibrary.WGPUBindGroup bindGroup) {
		wgpuBindGroupReference(Pointer.getPeer(bindGroup));
	}
	protected native static void wgpuBindGroupReference(@Ptr long bindGroup);
	/**
	 * Original signature : <code>void wgpuBindGroupRelease(WGPUBindGroup)</code><br>
	 * <i>native declaration : webgpu.h:1518</i>
	 */
	public static void wgpuBindGroupRelease(WgpuLibrary.WGPUBindGroup bindGroup) {
		wgpuBindGroupRelease(Pointer.getPeer(bindGroup));
	}
	protected native static void wgpuBindGroupRelease(@Ptr long bindGroup);
	/**
	 * Methods of BindGroupLayout<br>
	 * Original signature : <code>void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1521</i>
	 */
	public static void wgpuBindGroupLayoutSetLabel(WgpuLibrary.WGPUBindGroupLayout bindGroupLayout, Pointer<Byte > label) {
		wgpuBindGroupLayoutSetLabel(Pointer.getPeer(bindGroupLayout), Pointer.getPeer(label));
	}
	protected native static void wgpuBindGroupLayoutSetLabel(@Ptr long bindGroupLayout, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuBindGroupLayoutReference(WGPUBindGroupLayout)</code><br>
	 * <i>native declaration : webgpu.h:1522</i>
	 */
	public static void wgpuBindGroupLayoutReference(WgpuLibrary.WGPUBindGroupLayout bindGroupLayout) {
		wgpuBindGroupLayoutReference(Pointer.getPeer(bindGroupLayout));
	}
	protected native static void wgpuBindGroupLayoutReference(@Ptr long bindGroupLayout);
	/**
	 * Original signature : <code>void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout)</code><br>
	 * <i>native declaration : webgpu.h:1523</i>
	 */
	public static void wgpuBindGroupLayoutRelease(WgpuLibrary.WGPUBindGroupLayout bindGroupLayout) {
		wgpuBindGroupLayoutRelease(Pointer.getPeer(bindGroupLayout));
	}
	protected native static void wgpuBindGroupLayoutRelease(@Ptr long bindGroupLayout);
	/**
	 * Methods of Buffer<br>
	 * Original signature : <code>void wgpuBufferDestroy(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:1526</i>
	 */
	public static void wgpuBufferDestroy(WgpuLibrary.WGPUBuffer buffer) {
		wgpuBufferDestroy(Pointer.getPeer(buffer));
	}
	protected native static void wgpuBufferDestroy(@Ptr long buffer);
	/**
	 * Original signature : <code>const void* wgpuBufferGetConstMappedRange(WGPUBuffer, size_t, size_t)</code><br>
	 * <i>native declaration : webgpu.h:1527</i>
	 */
	public static Pointer<? > wgpuBufferGetConstMappedRange(WgpuLibrary.WGPUBuffer buffer, @Ptr long offset, @Ptr long size) {
		return Pointer.pointerToAddress(wgpuBufferGetConstMappedRange(Pointer.getPeer(buffer), offset, size));
	}
	@Ptr 
	protected native static long wgpuBufferGetConstMappedRange(@Ptr long buffer, @Ptr long offset, @Ptr long size);
	/**
	 * Original signature : <code>WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:1528</i>
	 */
	public static IntValuedEnum<WgpuLibrary.WGPUBufferMapState > wgpuBufferGetMapState(WgpuLibrary.WGPUBuffer buffer) {
		return FlagSet.fromValue(wgpuBufferGetMapState(Pointer.getPeer(buffer)), WgpuLibrary.WGPUBufferMapState.class);
	}
	protected native static int wgpuBufferGetMapState(@Ptr long buffer);
	/**
	 * Original signature : <code>void* wgpuBufferGetMappedRange(WGPUBuffer, size_t, size_t)</code><br>
	 * <i>native declaration : webgpu.h:1529</i>
	 */
	public static Pointer<? > wgpuBufferGetMappedRange(WgpuLibrary.WGPUBuffer buffer, @Ptr long offset, @Ptr long size) {
		return Pointer.pointerToAddress(wgpuBufferGetMappedRange(Pointer.getPeer(buffer), offset, size));
	}
	@Ptr 
	protected native static long wgpuBufferGetMappedRange(@Ptr long buffer, @Ptr long offset, @Ptr long size);
	/**
	 * Original signature : <code>uint64_t wgpuBufferGetSize(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:1530</i>
	 */
	public static long wgpuBufferGetSize(WgpuLibrary.WGPUBuffer buffer) {
		return wgpuBufferGetSize(Pointer.getPeer(buffer));
	}
	protected native static long wgpuBufferGetSize(@Ptr long buffer);
	/**
	 * Original signature : <code>WGPUBufferUsageFlags wgpuBufferGetUsage(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:1531</i>
	 */
	public static int wgpuBufferGetUsage(WgpuLibrary.WGPUBuffer buffer) {
		return wgpuBufferGetUsage(Pointer.getPeer(buffer));
	}
	protected native static int wgpuBufferGetUsage(@Ptr long buffer);
	/**
	 * Original signature : <code>void wgpuBufferMapAsync(WGPUBuffer, WGPUMapModeFlags, size_t, size_t, WGPUBufferMapCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:1532</i>
	 */
	public static void wgpuBufferMapAsync(WgpuLibrary.WGPUBuffer buffer, int mode, @Ptr long offset, @Ptr long size, Pointer<WgpuLibrary.WGPUBufferMapCallback > callback, Pointer<? > userdata) {
		wgpuBufferMapAsync(Pointer.getPeer(buffer), mode, offset, size, Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuBufferMapAsync(@Ptr long buffer, int mode, @Ptr long offset, @Ptr long size, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>void wgpuBufferSetLabel(WGPUBuffer, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1533</i>
	 */
	public static void wgpuBufferSetLabel(WgpuLibrary.WGPUBuffer buffer, Pointer<Byte > label) {
		wgpuBufferSetLabel(Pointer.getPeer(buffer), Pointer.getPeer(label));
	}
	protected native static void wgpuBufferSetLabel(@Ptr long buffer, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuBufferUnmap(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:1534</i>
	 */
	public static void wgpuBufferUnmap(WgpuLibrary.WGPUBuffer buffer) {
		wgpuBufferUnmap(Pointer.getPeer(buffer));
	}
	protected native static void wgpuBufferUnmap(@Ptr long buffer);
	/**
	 * Original signature : <code>void wgpuBufferReference(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:1535</i>
	 */
	public static void wgpuBufferReference(WgpuLibrary.WGPUBuffer buffer) {
		wgpuBufferReference(Pointer.getPeer(buffer));
	}
	protected native static void wgpuBufferReference(@Ptr long buffer);
	/**
	 * Original signature : <code>void wgpuBufferRelease(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:1536</i>
	 */
	public static void wgpuBufferRelease(WgpuLibrary.WGPUBuffer buffer) {
		wgpuBufferRelease(Pointer.getPeer(buffer));
	}
	protected native static void wgpuBufferRelease(@Ptr long buffer);
	/**
	 * Methods of CommandBuffer<br>
	 * Original signature : <code>void wgpuCommandBufferSetLabel(WGPUCommandBuffer, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1539</i>
	 */
	public static void wgpuCommandBufferSetLabel(WgpuLibrary.WGPUCommandBuffer commandBuffer, Pointer<Byte > label) {
		wgpuCommandBufferSetLabel(Pointer.getPeer(commandBuffer), Pointer.getPeer(label));
	}
	protected native static void wgpuCommandBufferSetLabel(@Ptr long commandBuffer, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuCommandBufferReference(WGPUCommandBuffer)</code><br>
	 * <i>native declaration : webgpu.h:1540</i>
	 */
	public static void wgpuCommandBufferReference(WgpuLibrary.WGPUCommandBuffer commandBuffer) {
		wgpuCommandBufferReference(Pointer.getPeer(commandBuffer));
	}
	protected native static void wgpuCommandBufferReference(@Ptr long commandBuffer);
	/**
	 * Original signature : <code>void wgpuCommandBufferRelease(WGPUCommandBuffer)</code><br>
	 * <i>native declaration : webgpu.h:1541</i>
	 */
	public static void wgpuCommandBufferRelease(WgpuLibrary.WGPUCommandBuffer commandBuffer) {
		wgpuCommandBufferRelease(Pointer.getPeer(commandBuffer));
	}
	protected native static void wgpuCommandBufferRelease(@Ptr long commandBuffer);
	/**
	 * Methods of CommandEncoder<br>
	 * Original signature : <code>WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder, const WGPUComputePassDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1544</i>
	 */
	public static WgpuLibrary.WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUComputePassDescriptor > descriptor) {
		return new WgpuLibrary.WGPUComputePassEncoder(wgpuCommandEncoderBeginComputePass(Pointer.getPeer(commandEncoder), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuCommandEncoderBeginComputePass(@Ptr long commandEncoder, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder, const WGPURenderPassDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1545</i>
	 */
	public static WgpuLibrary.WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPURenderPassDescriptor > descriptor) {
		return new WgpuLibrary.WGPURenderPassEncoder(wgpuCommandEncoderBeginRenderPass(Pointer.getPeer(commandEncoder), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuCommandEncoderBeginRenderPass(@Ptr long commandEncoder, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder, WGPUBuffer, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:1546</i>
	 */
	public static void wgpuCommandEncoderClearBuffer(WgpuLibrary.WGPUCommandEncoder commandEncoder, WgpuLibrary.WGPUBuffer buffer, long offset, long size) {
		wgpuCommandEncoderClearBuffer(Pointer.getPeer(commandEncoder), Pointer.getPeer(buffer), offset, size);
	}
	protected native static void wgpuCommandEncoderClearBuffer(@Ptr long commandEncoder, @Ptr long buffer, long offset, long size);
	/**
	 * Original signature : <code>void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder, WGPUBuffer, uint64_t, WGPUBuffer, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:1547</i>
	 */
	public static void wgpuCommandEncoderCopyBufferToBuffer(WgpuLibrary.WGPUCommandEncoder commandEncoder, WgpuLibrary.WGPUBuffer source, long sourceOffset, WgpuLibrary.WGPUBuffer destination, long destinationOffset, long size) {
		wgpuCommandEncoderCopyBufferToBuffer(Pointer.getPeer(commandEncoder), Pointer.getPeer(source), sourceOffset, Pointer.getPeer(destination), destinationOffset, size);
	}
	protected native static void wgpuCommandEncoderCopyBufferToBuffer(@Ptr long commandEncoder, @Ptr long source, long sourceOffset, @Ptr long destination, long destinationOffset, long size);
	/**
	 * Original signature : <code>void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder, const WGPUImageCopyBuffer*, const WGPUImageCopyTexture*, const WGPUExtent3D*)</code><br>
	 * <i>native declaration : webgpu.h:1548</i>
	 */
	public static void wgpuCommandEncoderCopyBufferToTexture(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUImageCopyBuffer > source, Pointer<WGPUImageCopyTexture > destination, Pointer<WGPUExtent3D > copySize) {
		wgpuCommandEncoderCopyBufferToTexture(Pointer.getPeer(commandEncoder), Pointer.getPeer(source), Pointer.getPeer(destination), Pointer.getPeer(copySize));
	}
	protected native static void wgpuCommandEncoderCopyBufferToTexture(@Ptr long commandEncoder, @Ptr long source, @Ptr long destination, @Ptr long copySize);
	/**
	 * Original signature : <code>void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder, const WGPUImageCopyTexture*, const WGPUImageCopyBuffer*, const WGPUExtent3D*)</code><br>
	 * <i>native declaration : webgpu.h:1549</i>
	 */
	public static void wgpuCommandEncoderCopyTextureToBuffer(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUImageCopyTexture > source, Pointer<WGPUImageCopyBuffer > destination, Pointer<WGPUExtent3D > copySize) {
		wgpuCommandEncoderCopyTextureToBuffer(Pointer.getPeer(commandEncoder), Pointer.getPeer(source), Pointer.getPeer(destination), Pointer.getPeer(copySize));
	}
	protected native static void wgpuCommandEncoderCopyTextureToBuffer(@Ptr long commandEncoder, @Ptr long source, @Ptr long destination, @Ptr long copySize);
	/**
	 * Original signature : <code>void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder, const WGPUImageCopyTexture*, const WGPUImageCopyTexture*, const WGPUExtent3D*)</code><br>
	 * <i>native declaration : webgpu.h:1550</i>
	 */
	public static void wgpuCommandEncoderCopyTextureToTexture(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUImageCopyTexture > source, Pointer<WGPUImageCopyTexture > destination, Pointer<WGPUExtent3D > copySize) {
		wgpuCommandEncoderCopyTextureToTexture(Pointer.getPeer(commandEncoder), Pointer.getPeer(source), Pointer.getPeer(destination), Pointer.getPeer(copySize));
	}
	protected native static void wgpuCommandEncoderCopyTextureToTexture(@Ptr long commandEncoder, @Ptr long source, @Ptr long destination, @Ptr long copySize);
	/**
	 * Original signature : <code>WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder, const WGPUCommandBufferDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1551</i>
	 */
	public static WgpuLibrary.WGPUCommandBuffer wgpuCommandEncoderFinish(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUCommandBufferDescriptor > descriptor) {
		return new WgpuLibrary.WGPUCommandBuffer(wgpuCommandEncoderFinish(Pointer.getPeer(commandEncoder), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuCommandEncoderFinish(@Ptr long commandEncoder, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1552</i>
	 */
	public static void wgpuCommandEncoderInsertDebugMarker(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > markerLabel) {
		wgpuCommandEncoderInsertDebugMarker(Pointer.getPeer(commandEncoder), Pointer.getPeer(markerLabel));
	}
	protected native static void wgpuCommandEncoderInsertDebugMarker(@Ptr long commandEncoder, @Ptr long markerLabel);
	/**
	 * Original signature : <code>void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1553</i>
	 */
	public static void wgpuCommandEncoderPopDebugGroup(WgpuLibrary.WGPUCommandEncoder commandEncoder) {
		wgpuCommandEncoderPopDebugGroup(Pointer.getPeer(commandEncoder));
	}
	protected native static void wgpuCommandEncoderPopDebugGroup(@Ptr long commandEncoder);
	/**
	 * Original signature : <code>void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1554</i>
	 */
	public static void wgpuCommandEncoderPushDebugGroup(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > groupLabel) {
		wgpuCommandEncoderPushDebugGroup(Pointer.getPeer(commandEncoder), Pointer.getPeer(groupLabel));
	}
	protected native static void wgpuCommandEncoderPushDebugGroup(@Ptr long commandEncoder, @Ptr long groupLabel);
	/**
	 * Original signature : <code>void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder, WGPUQuerySet, uint32_t, uint32_t, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:1555</i>
	 */
	public static void wgpuCommandEncoderResolveQuerySet(WgpuLibrary.WGPUCommandEncoder commandEncoder, WgpuLibrary.WGPUQuerySet querySet, int firstQuery, int queryCount, WgpuLibrary.WGPUBuffer destination, long destinationOffset) {
		wgpuCommandEncoderResolveQuerySet(Pointer.getPeer(commandEncoder), Pointer.getPeer(querySet), firstQuery, queryCount, Pointer.getPeer(destination), destinationOffset);
	}
	protected native static void wgpuCommandEncoderResolveQuerySet(@Ptr long commandEncoder, @Ptr long querySet, int firstQuery, int queryCount, @Ptr long destination, long destinationOffset);
	/**
	 * Original signature : <code>void wgpuCommandEncoderSetLabel(WGPUCommandEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1556</i>
	 */
	public static void wgpuCommandEncoderSetLabel(WgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > label) {
		wgpuCommandEncoderSetLabel(Pointer.getPeer(commandEncoder), Pointer.getPeer(label));
	}
	protected native static void wgpuCommandEncoderSetLabel(@Ptr long commandEncoder, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder, WGPUQuerySet, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:1557</i>
	 */
	public static void wgpuCommandEncoderWriteTimestamp(WgpuLibrary.WGPUCommandEncoder commandEncoder, WgpuLibrary.WGPUQuerySet querySet, int queryIndex) {
		wgpuCommandEncoderWriteTimestamp(Pointer.getPeer(commandEncoder), Pointer.getPeer(querySet), queryIndex);
	}
	protected native static void wgpuCommandEncoderWriteTimestamp(@Ptr long commandEncoder, @Ptr long querySet, int queryIndex);
	/**
	 * Original signature : <code>void wgpuCommandEncoderReference(WGPUCommandEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1558</i>
	 */
	public static void wgpuCommandEncoderReference(WgpuLibrary.WGPUCommandEncoder commandEncoder) {
		wgpuCommandEncoderReference(Pointer.getPeer(commandEncoder));
	}
	protected native static void wgpuCommandEncoderReference(@Ptr long commandEncoder);
	/**
	 * Original signature : <code>void wgpuCommandEncoderRelease(WGPUCommandEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1559</i>
	 */
	public static void wgpuCommandEncoderRelease(WgpuLibrary.WGPUCommandEncoder commandEncoder) {
		wgpuCommandEncoderRelease(Pointer.getPeer(commandEncoder));
	}
	protected native static void wgpuCommandEncoderRelease(@Ptr long commandEncoder);
	/**
	 * Methods of ComputePassEncoder<br>
	 * Original signature : <code>void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder, uint32_t, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:1562</i>
	 */
	public static void wgpuComputePassEncoderDispatchWorkgroups(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, int workgroupCountX, int workgroupCountY, int workgroupCountZ) {
		wgpuComputePassEncoderDispatchWorkgroups(Pointer.getPeer(computePassEncoder), workgroupCountX, workgroupCountY, workgroupCountZ);
	}
	protected native static void wgpuComputePassEncoderDispatchWorkgroups(@Ptr long computePassEncoder, int workgroupCountX, int workgroupCountY, int workgroupCountZ);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:1563</i>
	 */
	public static void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, WgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset) {
		wgpuComputePassEncoderDispatchWorkgroupsIndirect(Pointer.getPeer(computePassEncoder), Pointer.getPeer(indirectBuffer), indirectOffset);
	}
	protected native static void wgpuComputePassEncoderDispatchWorkgroupsIndirect(@Ptr long computePassEncoder, @Ptr long indirectBuffer, long indirectOffset);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderEnd(WGPUComputePassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1564</i>
	 */
	public static void wgpuComputePassEncoderEnd(WgpuLibrary.WGPUComputePassEncoder computePassEncoder) {
		wgpuComputePassEncoderEnd(Pointer.getPeer(computePassEncoder));
	}
	protected native static void wgpuComputePassEncoderEnd(@Ptr long computePassEncoder);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1565</i>
	 */
	public static void wgpuComputePassEncoderInsertDebugMarker(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, Pointer<Byte > markerLabel) {
		wgpuComputePassEncoderInsertDebugMarker(Pointer.getPeer(computePassEncoder), Pointer.getPeer(markerLabel));
	}
	protected native static void wgpuComputePassEncoderInsertDebugMarker(@Ptr long computePassEncoder, @Ptr long markerLabel);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1566</i>
	 */
	public static void wgpuComputePassEncoderPopDebugGroup(WgpuLibrary.WGPUComputePassEncoder computePassEncoder) {
		wgpuComputePassEncoderPopDebugGroup(Pointer.getPeer(computePassEncoder));
	}
	protected native static void wgpuComputePassEncoderPopDebugGroup(@Ptr long computePassEncoder);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1567</i>
	 */
	public static void wgpuComputePassEncoderPushDebugGroup(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, Pointer<Byte > groupLabel) {
		wgpuComputePassEncoderPushDebugGroup(Pointer.getPeer(computePassEncoder), Pointer.getPeer(groupLabel));
	}
	protected native static void wgpuComputePassEncoderPushDebugGroup(@Ptr long computePassEncoder, @Ptr long groupLabel);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder, uint32_t, WGPUBindGroup, size_t, const uint32_t*)</code><br>
	 * <i>native declaration : webgpu.h:1568</i>
	 */
	public static void wgpuComputePassEncoderSetBindGroup(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, int groupIndex, WgpuLibrary.WGPUBindGroup group, @Ptr long dynamicOffsetCount, Pointer<Integer > dynamicOffsets) {
		wgpuComputePassEncoderSetBindGroup(Pointer.getPeer(computePassEncoder), groupIndex, Pointer.getPeer(group), dynamicOffsetCount, Pointer.getPeer(dynamicOffsets));
	}
	protected native static void wgpuComputePassEncoderSetBindGroup(@Ptr long computePassEncoder, int groupIndex, @Ptr long group, @Ptr long dynamicOffsetCount, @Ptr long dynamicOffsets);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1569</i>
	 */
	public static void wgpuComputePassEncoderSetLabel(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, Pointer<Byte > label) {
		wgpuComputePassEncoderSetLabel(Pointer.getPeer(computePassEncoder), Pointer.getPeer(label));
	}
	protected native static void wgpuComputePassEncoderSetLabel(@Ptr long computePassEncoder, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder, WGPUComputePipeline)</code><br>
	 * <i>native declaration : webgpu.h:1570</i>
	 */
	public static void wgpuComputePassEncoderSetPipeline(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, WgpuLibrary.WGPUComputePipeline pipeline) {
		wgpuComputePassEncoderSetPipeline(Pointer.getPeer(computePassEncoder), Pointer.getPeer(pipeline));
	}
	protected native static void wgpuComputePassEncoderSetPipeline(@Ptr long computePassEncoder, @Ptr long pipeline);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderReference(WGPUComputePassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1571</i>
	 */
	public static void wgpuComputePassEncoderReference(WgpuLibrary.WGPUComputePassEncoder computePassEncoder) {
		wgpuComputePassEncoderReference(Pointer.getPeer(computePassEncoder));
	}
	protected native static void wgpuComputePassEncoderReference(@Ptr long computePassEncoder);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderRelease(WGPUComputePassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1572</i>
	 */
	public static void wgpuComputePassEncoderRelease(WgpuLibrary.WGPUComputePassEncoder computePassEncoder) {
		wgpuComputePassEncoderRelease(Pointer.getPeer(computePassEncoder));
	}
	protected native static void wgpuComputePassEncoderRelease(@Ptr long computePassEncoder);
	/**
	 * Methods of ComputePipeline<br>
	 * Original signature : <code>WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:1575</i>
	 */
	public static WgpuLibrary.WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WgpuLibrary.WGPUComputePipeline computePipeline, int groupIndex) {
		return new WgpuLibrary.WGPUBindGroupLayout(wgpuComputePipelineGetBindGroupLayout(Pointer.getPeer(computePipeline), groupIndex));
	}
	@Ptr 
	protected native static long wgpuComputePipelineGetBindGroupLayout(@Ptr long computePipeline, int groupIndex);
	/**
	 * Original signature : <code>void wgpuComputePipelineSetLabel(WGPUComputePipeline, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1576</i>
	 */
	public static void wgpuComputePipelineSetLabel(WgpuLibrary.WGPUComputePipeline computePipeline, Pointer<Byte > label) {
		wgpuComputePipelineSetLabel(Pointer.getPeer(computePipeline), Pointer.getPeer(label));
	}
	protected native static void wgpuComputePipelineSetLabel(@Ptr long computePipeline, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuComputePipelineReference(WGPUComputePipeline)</code><br>
	 * <i>native declaration : webgpu.h:1577</i>
	 */
	public static void wgpuComputePipelineReference(WgpuLibrary.WGPUComputePipeline computePipeline) {
		wgpuComputePipelineReference(Pointer.getPeer(computePipeline));
	}
	protected native static void wgpuComputePipelineReference(@Ptr long computePipeline);
	/**
	 * Original signature : <code>void wgpuComputePipelineRelease(WGPUComputePipeline)</code><br>
	 * <i>native declaration : webgpu.h:1578</i>
	 */
	public static void wgpuComputePipelineRelease(WgpuLibrary.WGPUComputePipeline computePipeline) {
		wgpuComputePipelineRelease(Pointer.getPeer(computePipeline));
	}
	protected native static void wgpuComputePipelineRelease(@Ptr long computePipeline);
	/**
	 * Methods of Device<br>
	 * Original signature : <code>WGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice, const WGPUBindGroupDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1581</i>
	 */
	public static WgpuLibrary.WGPUBindGroup wgpuDeviceCreateBindGroup(WgpuLibrary.WGPUDevice device, Pointer<WGPUBindGroupDescriptor > descriptor) {
		return new WgpuLibrary.WGPUBindGroup(wgpuDeviceCreateBindGroup(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateBindGroup(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice, const WGPUBindGroupLayoutDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1582</i>
	 */
	public static WgpuLibrary.WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WgpuLibrary.WGPUDevice device, Pointer<WGPUBindGroupLayoutDescriptor > descriptor) {
		return new WgpuLibrary.WGPUBindGroupLayout(wgpuDeviceCreateBindGroupLayout(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateBindGroupLayout(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice, const WGPUBufferDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1583</i>
	 */
	public static WgpuLibrary.WGPUBuffer wgpuDeviceCreateBuffer(WgpuLibrary.WGPUDevice device, Pointer<WGPUBufferDescriptor > descriptor) {
		return new WgpuLibrary.WGPUBuffer(wgpuDeviceCreateBuffer(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateBuffer(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice, const WGPUCommandEncoderDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1584</i>
	 */
	public static WgpuLibrary.WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WgpuLibrary.WGPUDevice device, Pointer<WGPUCommandEncoderDescriptor > descriptor) {
		return new WgpuLibrary.WGPUCommandEncoder(wgpuDeviceCreateCommandEncoder(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateCommandEncoder(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice, const WGPUComputePipelineDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1585</i>
	 */
	public static WgpuLibrary.WGPUComputePipeline wgpuDeviceCreateComputePipeline(WgpuLibrary.WGPUDevice device, Pointer<WGPUComputePipelineDescriptor > descriptor) {
		return new WgpuLibrary.WGPUComputePipeline(wgpuDeviceCreateComputePipeline(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateComputePipeline(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuDeviceCreateComputePipelineAsync(WGPUDevice, const WGPUComputePipelineDescriptor*, WGPUCreateComputePipelineAsyncCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:1586</i>
	 */
	public static void wgpuDeviceCreateComputePipelineAsync(WgpuLibrary.WGPUDevice device, Pointer<WGPUComputePipelineDescriptor > descriptor, Pointer<WgpuLibrary.WGPUCreateComputePipelineAsyncCallback > callback, Pointer<? > userdata) {
		wgpuDeviceCreateComputePipelineAsync(Pointer.getPeer(device), Pointer.getPeer(descriptor), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuDeviceCreateComputePipelineAsync(@Ptr long device, @Ptr long descriptor, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice, const WGPUPipelineLayoutDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1587</i>
	 */
	public static WgpuLibrary.WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WgpuLibrary.WGPUDevice device, Pointer<WGPUPipelineLayoutDescriptor > descriptor) {
		return new WgpuLibrary.WGPUPipelineLayout(wgpuDeviceCreatePipelineLayout(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreatePipelineLayout(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice, const WGPUQuerySetDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1588</i>
	 */
	public static WgpuLibrary.WGPUQuerySet wgpuDeviceCreateQuerySet(WgpuLibrary.WGPUDevice device, Pointer<WGPUQuerySetDescriptor > descriptor) {
		return new WgpuLibrary.WGPUQuerySet(wgpuDeviceCreateQuerySet(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateQuerySet(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice, const WGPURenderBundleEncoderDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1589</i>
	 */
	public static WgpuLibrary.WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WgpuLibrary.WGPUDevice device, Pointer<WGPURenderBundleEncoderDescriptor > descriptor) {
		return new WgpuLibrary.WGPURenderBundleEncoder(wgpuDeviceCreateRenderBundleEncoder(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateRenderBundleEncoder(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice, const WGPURenderPipelineDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1590</i>
	 */
	public static WgpuLibrary.WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WgpuLibrary.WGPUDevice device, Pointer<WGPURenderPipelineDescriptor > descriptor) {
		return new WgpuLibrary.WGPURenderPipeline(wgpuDeviceCreateRenderPipeline(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateRenderPipeline(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuDeviceCreateRenderPipelineAsync(WGPUDevice, const WGPURenderPipelineDescriptor*, WGPUCreateRenderPipelineAsyncCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:1591</i>
	 */
	public static void wgpuDeviceCreateRenderPipelineAsync(WgpuLibrary.WGPUDevice device, Pointer<WGPURenderPipelineDescriptor > descriptor, Pointer<WgpuLibrary.WGPUCreateRenderPipelineAsyncCallback > callback, Pointer<? > userdata) {
		wgpuDeviceCreateRenderPipelineAsync(Pointer.getPeer(device), Pointer.getPeer(descriptor), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuDeviceCreateRenderPipelineAsync(@Ptr long device, @Ptr long descriptor, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>WGPUSampler wgpuDeviceCreateSampler(WGPUDevice, const WGPUSamplerDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1592</i>
	 */
	public static WgpuLibrary.WGPUSampler wgpuDeviceCreateSampler(WgpuLibrary.WGPUDevice device, Pointer<WGPUSamplerDescriptor > descriptor) {
		return new WgpuLibrary.WGPUSampler(wgpuDeviceCreateSampler(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateSampler(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice, const WGPUShaderModuleDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1593</i>
	 */
	public static WgpuLibrary.WGPUShaderModule wgpuDeviceCreateShaderModule(WgpuLibrary.WGPUDevice device, Pointer<WGPUShaderModuleDescriptor > descriptor) {
		return new WgpuLibrary.WGPUShaderModule(wgpuDeviceCreateShaderModule(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateShaderModule(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUTexture wgpuDeviceCreateTexture(WGPUDevice, const WGPUTextureDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1594</i>
	 */
	public static WgpuLibrary.WGPUTexture wgpuDeviceCreateTexture(WgpuLibrary.WGPUDevice device, Pointer<WGPUTextureDescriptor > descriptor) {
		return new WgpuLibrary.WGPUTexture(wgpuDeviceCreateTexture(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateTexture(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuDeviceDestroy(WGPUDevice)</code><br>
	 * <i>native declaration : webgpu.h:1595</i>
	 */
	public static void wgpuDeviceDestroy(WgpuLibrary.WGPUDevice device) {
		wgpuDeviceDestroy(Pointer.getPeer(device));
	}
	protected native static void wgpuDeviceDestroy(@Ptr long device);
	/**
	 * Original signature : <code>size_t wgpuDeviceEnumerateFeatures(WGPUDevice, WGPUFeatureName*)</code><br>
	 * <i>native declaration : webgpu.h:1596</i>
	 */
	@Ptr 
	public static long wgpuDeviceEnumerateFeatures(WgpuLibrary.WGPUDevice device, Pointer<IntValuedEnum<WgpuLibrary.WGPUFeatureName > > features) {
		return wgpuDeviceEnumerateFeatures(Pointer.getPeer(device), Pointer.getPeer(features));
	}
	@Ptr 
	protected native static long wgpuDeviceEnumerateFeatures(@Ptr long device, @Ptr long features);
	/**
	 * Original signature : <code>WGPUBool wgpuDeviceGetLimits(WGPUDevice, WGPUSupportedLimits*)</code><br>
	 * <i>native declaration : webgpu.h:1597</i>
	 */
	public static int wgpuDeviceGetLimits(WgpuLibrary.WGPUDevice device, Pointer<WGPUSupportedLimits > limits) {
		return wgpuDeviceGetLimits(Pointer.getPeer(device), Pointer.getPeer(limits));
	}
	protected native static int wgpuDeviceGetLimits(@Ptr long device, @Ptr long limits);
	/**
	 * Original signature : <code>WGPUQueue wgpuDeviceGetQueue(WGPUDevice)</code><br>
	 * <i>native declaration : webgpu.h:1598</i>
	 */
	public static WgpuLibrary.WGPUQueue wgpuDeviceGetQueue(WgpuLibrary.WGPUDevice device) {
		return new WgpuLibrary.WGPUQueue(wgpuDeviceGetQueue(Pointer.getPeer(device)));
	}
	@Ptr 
	protected native static long wgpuDeviceGetQueue(@Ptr long device);
	/**
	 * Original signature : <code>WGPUBool wgpuDeviceHasFeature(WGPUDevice, WGPUFeatureName)</code><br>
	 * <i>native declaration : webgpu.h:1599</i>
	 */
	public static int wgpuDeviceHasFeature(WgpuLibrary.WGPUDevice device, IntValuedEnum<WgpuLibrary.WGPUFeatureName > feature) {
		return wgpuDeviceHasFeature(Pointer.getPeer(device), (int)feature.value());
	}
	protected native static int wgpuDeviceHasFeature(@Ptr long device, int feature);
	/**
	 * Original signature : <code>void wgpuDevicePopErrorScope(WGPUDevice, WGPUErrorCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:1600</i>
	 */
	public static void wgpuDevicePopErrorScope(WgpuLibrary.WGPUDevice device, Pointer<WgpuLibrary.WGPUErrorCallback > callback, Pointer<? > userdata) {
		wgpuDevicePopErrorScope(Pointer.getPeer(device), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuDevicePopErrorScope(@Ptr long device, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>void wgpuDevicePushErrorScope(WGPUDevice, WGPUErrorFilter)</code><br>
	 * <i>native declaration : webgpu.h:1601</i>
	 */
	public static void wgpuDevicePushErrorScope(WgpuLibrary.WGPUDevice device, IntValuedEnum<WgpuLibrary.WGPUErrorFilter > filter) {
		wgpuDevicePushErrorScope(Pointer.getPeer(device), (int)filter.value());
	}
	protected native static void wgpuDevicePushErrorScope(@Ptr long device, int filter);
	/**
	 * Original signature : <code>void wgpuDeviceSetLabel(WGPUDevice, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1602</i>
	 */
	public static void wgpuDeviceSetLabel(WgpuLibrary.WGPUDevice device, Pointer<Byte > label) {
		wgpuDeviceSetLabel(Pointer.getPeer(device), Pointer.getPeer(label));
	}
	protected native static void wgpuDeviceSetLabel(@Ptr long device, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuDeviceSetUncapturedErrorCallback(WGPUDevice, WGPUErrorCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:1603</i>
	 */
	public static void wgpuDeviceSetUncapturedErrorCallback(WgpuLibrary.WGPUDevice device, Pointer<WgpuLibrary.WGPUErrorCallback > callback, Pointer<? > userdata) {
		wgpuDeviceSetUncapturedErrorCallback(Pointer.getPeer(device), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuDeviceSetUncapturedErrorCallback(@Ptr long device, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>void wgpuDeviceReference(WGPUDevice)</code><br>
	 * <i>native declaration : webgpu.h:1604</i>
	 */
	public static void wgpuDeviceReference(WgpuLibrary.WGPUDevice device) {
		wgpuDeviceReference(Pointer.getPeer(device));
	}
	protected native static void wgpuDeviceReference(@Ptr long device);
	/**
	 * Original signature : <code>void wgpuDeviceRelease(WGPUDevice)</code><br>
	 * <i>native declaration : webgpu.h:1605</i>
	 */
	public static void wgpuDeviceRelease(WgpuLibrary.WGPUDevice device) {
		wgpuDeviceRelease(Pointer.getPeer(device));
	}
	protected native static void wgpuDeviceRelease(@Ptr long device);
	/**
	 * Methods of Instance<br>
	 * Original signature : <code>WGPUSurface wgpuInstanceCreateSurface(WGPUInstance, const WGPUSurfaceDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1608</i>
	 */
	public static WgpuLibrary.WGPUSurface wgpuInstanceCreateSurface(WgpuLibrary.WGPUInstance instance, Pointer<WGPUSurfaceDescriptor > descriptor) {
		return new WgpuLibrary.WGPUSurface(wgpuInstanceCreateSurface(Pointer.getPeer(instance), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuInstanceCreateSurface(@Ptr long instance, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuInstanceProcessEvents(WGPUInstance)</code><br>
	 * <i>native declaration : webgpu.h:1609</i>
	 */
	public static void wgpuInstanceProcessEvents(WgpuLibrary.WGPUInstance instance) {
		wgpuInstanceProcessEvents(Pointer.getPeer(instance));
	}
	protected native static void wgpuInstanceProcessEvents(@Ptr long instance);
	/**
	 * Original signature : <code>void wgpuInstanceRequestAdapter(WGPUInstance, const WGPURequestAdapterOptions*, WGPURequestAdapterCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:1610</i>
	 */
	public static void wgpuInstanceRequestAdapter(WgpuLibrary.WGPUInstance instance, Pointer<WGPURequestAdapterOptions > options, Pointer<WgpuLibrary.WGPURequestAdapterCallback > callback, Pointer<? > userdata) {
		wgpuInstanceRequestAdapter(Pointer.getPeer(instance), Pointer.getPeer(options), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuInstanceRequestAdapter(@Ptr long instance, @Ptr long options, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>void wgpuInstanceReference(WGPUInstance)</code><br>
	 * <i>native declaration : webgpu.h:1611</i>
	 */
	public static void wgpuInstanceReference(WgpuLibrary.WGPUInstance instance) {
		wgpuInstanceReference(Pointer.getPeer(instance));
	}
	protected native static void wgpuInstanceReference(@Ptr long instance);
	/**
	 * Original signature : <code>void wgpuInstanceRelease(WGPUInstance)</code><br>
	 * <i>native declaration : webgpu.h:1612</i>
	 */
	public static void wgpuInstanceRelease(WgpuLibrary.WGPUInstance instance) {
		wgpuInstanceRelease(Pointer.getPeer(instance));
	}
	protected native static void wgpuInstanceRelease(@Ptr long instance);
	/**
	 * Methods of PipelineLayout<br>
	 * Original signature : <code>void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1615</i>
	 */
	public static void wgpuPipelineLayoutSetLabel(WgpuLibrary.WGPUPipelineLayout pipelineLayout, Pointer<Byte > label) {
		wgpuPipelineLayoutSetLabel(Pointer.getPeer(pipelineLayout), Pointer.getPeer(label));
	}
	protected native static void wgpuPipelineLayoutSetLabel(@Ptr long pipelineLayout, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuPipelineLayoutReference(WGPUPipelineLayout)</code><br>
	 * <i>native declaration : webgpu.h:1616</i>
	 */
	public static void wgpuPipelineLayoutReference(WgpuLibrary.WGPUPipelineLayout pipelineLayout) {
		wgpuPipelineLayoutReference(Pointer.getPeer(pipelineLayout));
	}
	protected native static void wgpuPipelineLayoutReference(@Ptr long pipelineLayout);
	/**
	 * Original signature : <code>void wgpuPipelineLayoutRelease(WGPUPipelineLayout)</code><br>
	 * <i>native declaration : webgpu.h:1617</i>
	 */
	public static void wgpuPipelineLayoutRelease(WgpuLibrary.WGPUPipelineLayout pipelineLayout) {
		wgpuPipelineLayoutRelease(Pointer.getPeer(pipelineLayout));
	}
	protected native static void wgpuPipelineLayoutRelease(@Ptr long pipelineLayout);
	/**
	 * Methods of QuerySet<br>
	 * Original signature : <code>void wgpuQuerySetDestroy(WGPUQuerySet)</code><br>
	 * <i>native declaration : webgpu.h:1620</i>
	 */
	public static void wgpuQuerySetDestroy(WgpuLibrary.WGPUQuerySet querySet) {
		wgpuQuerySetDestroy(Pointer.getPeer(querySet));
	}
	protected native static void wgpuQuerySetDestroy(@Ptr long querySet);
	/**
	 * Original signature : <code>uint32_t wgpuQuerySetGetCount(WGPUQuerySet)</code><br>
	 * <i>native declaration : webgpu.h:1621</i>
	 */
	public static int wgpuQuerySetGetCount(WgpuLibrary.WGPUQuerySet querySet) {
		return wgpuQuerySetGetCount(Pointer.getPeer(querySet));
	}
	protected native static int wgpuQuerySetGetCount(@Ptr long querySet);
	/**
	 * Original signature : <code>WGPUQueryType wgpuQuerySetGetType(WGPUQuerySet)</code><br>
	 * <i>native declaration : webgpu.h:1622</i>
	 */
	public static IntValuedEnum<WgpuLibrary.WGPUQueryType > wgpuQuerySetGetType(WgpuLibrary.WGPUQuerySet querySet) {
		return FlagSet.fromValue(wgpuQuerySetGetType(Pointer.getPeer(querySet)), WgpuLibrary.WGPUQueryType.class);
	}
	protected native static int wgpuQuerySetGetType(@Ptr long querySet);
	/**
	 * Original signature : <code>void wgpuQuerySetSetLabel(WGPUQuerySet, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1623</i>
	 */
	public static void wgpuQuerySetSetLabel(WgpuLibrary.WGPUQuerySet querySet, Pointer<Byte > label) {
		wgpuQuerySetSetLabel(Pointer.getPeer(querySet), Pointer.getPeer(label));
	}
	protected native static void wgpuQuerySetSetLabel(@Ptr long querySet, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuQuerySetReference(WGPUQuerySet)</code><br>
	 * <i>native declaration : webgpu.h:1624</i>
	 */
	public static void wgpuQuerySetReference(WgpuLibrary.WGPUQuerySet querySet) {
		wgpuQuerySetReference(Pointer.getPeer(querySet));
	}
	protected native static void wgpuQuerySetReference(@Ptr long querySet);
	/**
	 * Original signature : <code>void wgpuQuerySetRelease(WGPUQuerySet)</code><br>
	 * <i>native declaration : webgpu.h:1625</i>
	 */
	public static void wgpuQuerySetRelease(WgpuLibrary.WGPUQuerySet querySet) {
		wgpuQuerySetRelease(Pointer.getPeer(querySet));
	}
	protected native static void wgpuQuerySetRelease(@Ptr long querySet);
	/**
	 * Methods of Queue<br>
	 * Original signature : <code>void wgpuQueueOnSubmittedWorkDone(WGPUQueue, WGPUQueueWorkDoneCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:1628</i>
	 */
	public static void wgpuQueueOnSubmittedWorkDone(WgpuLibrary.WGPUQueue queue, Pointer<WgpuLibrary.WGPUQueueWorkDoneCallback > callback, Pointer<? > userdata) {
		wgpuQueueOnSubmittedWorkDone(Pointer.getPeer(queue), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuQueueOnSubmittedWorkDone(@Ptr long queue, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>void wgpuQueueSetLabel(WGPUQueue, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1629</i>
	 */
	public static void wgpuQueueSetLabel(WgpuLibrary.WGPUQueue queue, Pointer<Byte > label) {
		wgpuQueueSetLabel(Pointer.getPeer(queue), Pointer.getPeer(label));
	}
	protected native static void wgpuQueueSetLabel(@Ptr long queue, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuQueueSubmit(WGPUQueue, size_t, const WGPUCommandBuffer*)</code><br>
	 * <i>native declaration : webgpu.h:1630</i>
	 */
	public static void wgpuQueueSubmit(WgpuLibrary.WGPUQueue queue, @Ptr long commandCount, Pointer<WgpuLibrary.WGPUCommandBuffer > commands) {
		wgpuQueueSubmit(Pointer.getPeer(queue), commandCount, Pointer.getPeer(commands));
	}
	protected native static void wgpuQueueSubmit(@Ptr long queue, @Ptr long commandCount, @Ptr long commands);
	/**
	 * Original signature : <code>void wgpuQueueWriteBuffer(WGPUQueue, WGPUBuffer, uint64_t, const void*, size_t)</code><br>
	 * <i>native declaration : webgpu.h:1631</i>
	 */
	public static void wgpuQueueWriteBuffer(WgpuLibrary.WGPUQueue queue, WgpuLibrary.WGPUBuffer buffer, long bufferOffset, Pointer<? > data, @Ptr long size) {
		wgpuQueueWriteBuffer(Pointer.getPeer(queue), Pointer.getPeer(buffer), bufferOffset, Pointer.getPeer(data), size);
	}
	protected native static void wgpuQueueWriteBuffer(@Ptr long queue, @Ptr long buffer, long bufferOffset, @Ptr long data, @Ptr long size);
	/**
	 * Original signature : <code>void wgpuQueueWriteTexture(WGPUQueue, const WGPUImageCopyTexture*, const void*, size_t, const WGPUTextureDataLayout*, const WGPUExtent3D*)</code><br>
	 * <i>native declaration : webgpu.h:1632</i>
	 */
	public static void wgpuQueueWriteTexture(WgpuLibrary.WGPUQueue queue, Pointer<WGPUImageCopyTexture > destination, Pointer<? > data, @Ptr long dataSize, Pointer<WGPUTextureDataLayout > dataLayout, Pointer<WGPUExtent3D > writeSize) {
		wgpuQueueWriteTexture(Pointer.getPeer(queue), Pointer.getPeer(destination), Pointer.getPeer(data), dataSize, Pointer.getPeer(dataLayout), Pointer.getPeer(writeSize));
	}
	protected native static void wgpuQueueWriteTexture(@Ptr long queue, @Ptr long destination, @Ptr long data, @Ptr long dataSize, @Ptr long dataLayout, @Ptr long writeSize);
	/**
	 * Original signature : <code>void wgpuQueueReference(WGPUQueue)</code><br>
	 * <i>native declaration : webgpu.h:1633</i>
	 */
	public static void wgpuQueueReference(WgpuLibrary.WGPUQueue queue) {
		wgpuQueueReference(Pointer.getPeer(queue));
	}
	protected native static void wgpuQueueReference(@Ptr long queue);
	/**
	 * Original signature : <code>void wgpuQueueRelease(WGPUQueue)</code><br>
	 * <i>native declaration : webgpu.h:1634</i>
	 */
	public static void wgpuQueueRelease(WgpuLibrary.WGPUQueue queue) {
		wgpuQueueRelease(Pointer.getPeer(queue));
	}
	protected native static void wgpuQueueRelease(@Ptr long queue);
	/**
	 * Methods of RenderBundle<br>
	 * Original signature : <code>void wgpuRenderBundleSetLabel(WGPURenderBundle, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1637</i>
	 */
	public static void wgpuRenderBundleSetLabel(WgpuLibrary.WGPURenderBundle renderBundle, Pointer<Byte > label) {
		wgpuRenderBundleSetLabel(Pointer.getPeer(renderBundle), Pointer.getPeer(label));
	}
	protected native static void wgpuRenderBundleSetLabel(@Ptr long renderBundle, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuRenderBundleReference(WGPURenderBundle)</code><br>
	 * <i>native declaration : webgpu.h:1638</i>
	 */
	public static void wgpuRenderBundleReference(WgpuLibrary.WGPURenderBundle renderBundle) {
		wgpuRenderBundleReference(Pointer.getPeer(renderBundle));
	}
	protected native static void wgpuRenderBundleReference(@Ptr long renderBundle);
	/**
	 * Original signature : <code>void wgpuRenderBundleRelease(WGPURenderBundle)</code><br>
	 * <i>native declaration : webgpu.h:1639</i>
	 */
	public static void wgpuRenderBundleRelease(WgpuLibrary.WGPURenderBundle renderBundle) {
		wgpuRenderBundleRelease(Pointer.getPeer(renderBundle));
	}
	protected native static void wgpuRenderBundleRelease(@Ptr long renderBundle);
	/**
	 * Methods of RenderBundleEncoder<br>
	 * Original signature : <code>void wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder, uint32_t, uint32_t, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:1642</i>
	 */
	public static void wgpuRenderBundleEncoderDraw(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int vertexCount, int instanceCount, int firstVertex, int firstInstance) {
		wgpuRenderBundleEncoderDraw(Pointer.getPeer(renderBundleEncoder), vertexCount, instanceCount, firstVertex, firstInstance);
	}
	protected native static void wgpuRenderBundleEncoderDraw(@Ptr long renderBundleEncoder, int vertexCount, int instanceCount, int firstVertex, int firstInstance);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder, uint32_t, uint32_t, uint32_t, int32_t, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:1643</i>
	 */
	public static void wgpuRenderBundleEncoderDrawIndexed(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance) {
		wgpuRenderBundleEncoderDrawIndexed(Pointer.getPeer(renderBundleEncoder), indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
	}
	protected native static void wgpuRenderBundleEncoderDrawIndexed(@Ptr long renderBundleEncoder, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:1644</i>
	 */
	public static void wgpuRenderBundleEncoderDrawIndexedIndirect(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset) {
		wgpuRenderBundleEncoderDrawIndexedIndirect(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(indirectBuffer), indirectOffset);
	}
	protected native static void wgpuRenderBundleEncoderDrawIndexedIndirect(@Ptr long renderBundleEncoder, @Ptr long indirectBuffer, long indirectOffset);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:1645</i>
	 */
	public static void wgpuRenderBundleEncoderDrawIndirect(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset) {
		wgpuRenderBundleEncoderDrawIndirect(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(indirectBuffer), indirectOffset);
	}
	protected native static void wgpuRenderBundleEncoderDrawIndirect(@Ptr long renderBundleEncoder, @Ptr long indirectBuffer, long indirectOffset);
	/**
	 * Original signature : <code>WGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder, const WGPURenderBundleDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1646</i>
	 */
	public static WgpuLibrary.WGPURenderBundle wgpuRenderBundleEncoderFinish(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<WGPURenderBundleDescriptor > descriptor) {
		return new WgpuLibrary.WGPURenderBundle(wgpuRenderBundleEncoderFinish(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuRenderBundleEncoderFinish(@Ptr long renderBundleEncoder, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1647</i>
	 */
	public static void wgpuRenderBundleEncoderInsertDebugMarker(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<Byte > markerLabel) {
		wgpuRenderBundleEncoderInsertDebugMarker(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(markerLabel));
	}
	protected native static void wgpuRenderBundleEncoderInsertDebugMarker(@Ptr long renderBundleEncoder, @Ptr long markerLabel);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1648</i>
	 */
	public static void wgpuRenderBundleEncoderPopDebugGroup(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder) {
		wgpuRenderBundleEncoderPopDebugGroup(Pointer.getPeer(renderBundleEncoder));
	}
	protected native static void wgpuRenderBundleEncoderPopDebugGroup(@Ptr long renderBundleEncoder);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1649</i>
	 */
	public static void wgpuRenderBundleEncoderPushDebugGroup(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<Byte > groupLabel) {
		wgpuRenderBundleEncoderPushDebugGroup(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(groupLabel));
	}
	protected native static void wgpuRenderBundleEncoderPushDebugGroup(@Ptr long renderBundleEncoder, @Ptr long groupLabel);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder, uint32_t, WGPUBindGroup, size_t, const uint32_t*)</code><br>
	 * <i>native declaration : webgpu.h:1650</i>
	 */
	public static void wgpuRenderBundleEncoderSetBindGroup(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int groupIndex, WgpuLibrary.WGPUBindGroup group, @Ptr long dynamicOffsetCount, Pointer<Integer > dynamicOffsets) {
		wgpuRenderBundleEncoderSetBindGroup(Pointer.getPeer(renderBundleEncoder), groupIndex, Pointer.getPeer(group), dynamicOffsetCount, Pointer.getPeer(dynamicOffsets));
	}
	protected native static void wgpuRenderBundleEncoderSetBindGroup(@Ptr long renderBundleEncoder, int groupIndex, @Ptr long group, @Ptr long dynamicOffsetCount, @Ptr long dynamicOffsets);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder, WGPUBuffer, WGPUIndexFormat, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:1651</i>
	 */
	public static void wgpuRenderBundleEncoderSetIndexBuffer(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WgpuLibrary.WGPUBuffer buffer, IntValuedEnum<WgpuLibrary.WGPUIndexFormat > format, long offset, long size) {
		wgpuRenderBundleEncoderSetIndexBuffer(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(buffer), (int)format.value(), offset, size);
	}
	protected native static void wgpuRenderBundleEncoderSetIndexBuffer(@Ptr long renderBundleEncoder, @Ptr long buffer, int format, long offset, long size);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1652</i>
	 */
	public static void wgpuRenderBundleEncoderSetLabel(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<Byte > label) {
		wgpuRenderBundleEncoderSetLabel(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(label));
	}
	protected native static void wgpuRenderBundleEncoderSetLabel(@Ptr long renderBundleEncoder, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder, WGPURenderPipeline)</code><br>
	 * <i>native declaration : webgpu.h:1653</i>
	 */
	public static void wgpuRenderBundleEncoderSetPipeline(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WgpuLibrary.WGPURenderPipeline pipeline) {
		wgpuRenderBundleEncoderSetPipeline(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(pipeline));
	}
	protected native static void wgpuRenderBundleEncoderSetPipeline(@Ptr long renderBundleEncoder, @Ptr long pipeline);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder, uint32_t, WGPUBuffer, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:1654</i>
	 */
	public static void wgpuRenderBundleEncoderSetVertexBuffer(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int slot, WgpuLibrary.WGPUBuffer buffer, long offset, long size) {
		wgpuRenderBundleEncoderSetVertexBuffer(Pointer.getPeer(renderBundleEncoder), slot, Pointer.getPeer(buffer), offset, size);
	}
	protected native static void wgpuRenderBundleEncoderSetVertexBuffer(@Ptr long renderBundleEncoder, int slot, @Ptr long buffer, long offset, long size);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderReference(WGPURenderBundleEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1655</i>
	 */
	public static void wgpuRenderBundleEncoderReference(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder) {
		wgpuRenderBundleEncoderReference(Pointer.getPeer(renderBundleEncoder));
	}
	protected native static void wgpuRenderBundleEncoderReference(@Ptr long renderBundleEncoder);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1656</i>
	 */
	public static void wgpuRenderBundleEncoderRelease(WgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder) {
		wgpuRenderBundleEncoderRelease(Pointer.getPeer(renderBundleEncoder));
	}
	protected native static void wgpuRenderBundleEncoderRelease(@Ptr long renderBundleEncoder);
	/**
	 * Methods of RenderPassEncoder<br>
	 * Original signature : <code>void wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:1659</i>
	 */
	public static void wgpuRenderPassEncoderBeginOcclusionQuery(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int queryIndex) {
		wgpuRenderPassEncoderBeginOcclusionQuery(Pointer.getPeer(renderPassEncoder), queryIndex);
	}
	protected native static void wgpuRenderPassEncoderBeginOcclusionQuery(@Ptr long renderPassEncoder, int queryIndex);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderDraw(WGPURenderPassEncoder, uint32_t, uint32_t, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:1660</i>
	 */
	public static void wgpuRenderPassEncoderDraw(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int vertexCount, int instanceCount, int firstVertex, int firstInstance) {
		wgpuRenderPassEncoderDraw(Pointer.getPeer(renderPassEncoder), vertexCount, instanceCount, firstVertex, firstInstance);
	}
	protected native static void wgpuRenderPassEncoderDraw(@Ptr long renderPassEncoder, int vertexCount, int instanceCount, int firstVertex, int firstInstance);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder, uint32_t, uint32_t, uint32_t, int32_t, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:1661</i>
	 */
	public static void wgpuRenderPassEncoderDrawIndexed(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance) {
		wgpuRenderPassEncoderDrawIndexed(Pointer.getPeer(renderPassEncoder), indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
	}
	protected native static void wgpuRenderPassEncoderDrawIndexed(@Ptr long renderPassEncoder, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:1662</i>
	 */
	public static void wgpuRenderPassEncoderDrawIndexedIndirect(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset) {
		wgpuRenderPassEncoderDrawIndexedIndirect(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(indirectBuffer), indirectOffset);
	}
	protected native static void wgpuRenderPassEncoderDrawIndexedIndirect(@Ptr long renderPassEncoder, @Ptr long indirectBuffer, long indirectOffset);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:1663</i>
	 */
	public static void wgpuRenderPassEncoderDrawIndirect(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset) {
		wgpuRenderPassEncoderDrawIndirect(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(indirectBuffer), indirectOffset);
	}
	protected native static void wgpuRenderPassEncoderDrawIndirect(@Ptr long renderPassEncoder, @Ptr long indirectBuffer, long indirectOffset);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderEnd(WGPURenderPassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1664</i>
	 */
	public static void wgpuRenderPassEncoderEnd(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder) {
		wgpuRenderPassEncoderEnd(Pointer.getPeer(renderPassEncoder));
	}
	protected native static void wgpuRenderPassEncoderEnd(@Ptr long renderPassEncoder);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1665</i>
	 */
	public static void wgpuRenderPassEncoderEndOcclusionQuery(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder) {
		wgpuRenderPassEncoderEndOcclusionQuery(Pointer.getPeer(renderPassEncoder));
	}
	protected native static void wgpuRenderPassEncoderEndOcclusionQuery(@Ptr long renderPassEncoder);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder, size_t, const WGPURenderBundle*)</code><br>
	 * <i>native declaration : webgpu.h:1666</i>
	 */
	public static void wgpuRenderPassEncoderExecuteBundles(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, @Ptr long bundleCount, Pointer<WgpuLibrary.WGPURenderBundle > bundles) {
		wgpuRenderPassEncoderExecuteBundles(Pointer.getPeer(renderPassEncoder), bundleCount, Pointer.getPeer(bundles));
	}
	protected native static void wgpuRenderPassEncoderExecuteBundles(@Ptr long renderPassEncoder, @Ptr long bundleCount, @Ptr long bundles);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1667</i>
	 */
	public static void wgpuRenderPassEncoderInsertDebugMarker(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<Byte > markerLabel) {
		wgpuRenderPassEncoderInsertDebugMarker(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(markerLabel));
	}
	protected native static void wgpuRenderPassEncoderInsertDebugMarker(@Ptr long renderPassEncoder, @Ptr long markerLabel);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1668</i>
	 */
	public static void wgpuRenderPassEncoderPopDebugGroup(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder) {
		wgpuRenderPassEncoderPopDebugGroup(Pointer.getPeer(renderPassEncoder));
	}
	protected native static void wgpuRenderPassEncoderPopDebugGroup(@Ptr long renderPassEncoder);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1669</i>
	 */
	public static void wgpuRenderPassEncoderPushDebugGroup(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<Byte > groupLabel) {
		wgpuRenderPassEncoderPushDebugGroup(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(groupLabel));
	}
	protected native static void wgpuRenderPassEncoderPushDebugGroup(@Ptr long renderPassEncoder, @Ptr long groupLabel);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder, uint32_t, WGPUBindGroup, size_t, const uint32_t*)</code><br>
	 * <i>native declaration : webgpu.h:1670</i>
	 */
	public static void wgpuRenderPassEncoderSetBindGroup(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int groupIndex, WgpuLibrary.WGPUBindGroup group, @Ptr long dynamicOffsetCount, Pointer<Integer > dynamicOffsets) {
		wgpuRenderPassEncoderSetBindGroup(Pointer.getPeer(renderPassEncoder), groupIndex, Pointer.getPeer(group), dynamicOffsetCount, Pointer.getPeer(dynamicOffsets));
	}
	protected native static void wgpuRenderPassEncoderSetBindGroup(@Ptr long renderPassEncoder, int groupIndex, @Ptr long group, @Ptr long dynamicOffsetCount, @Ptr long dynamicOffsets);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder, const WGPUColor*)</code><br>
	 * <i>native declaration : webgpu.h:1671</i>
	 */
	public static void wgpuRenderPassEncoderSetBlendConstant(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<WGPUColor > color) {
		wgpuRenderPassEncoderSetBlendConstant(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(color));
	}
	protected native static void wgpuRenderPassEncoderSetBlendConstant(@Ptr long renderPassEncoder, @Ptr long color);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder, WGPUBuffer, WGPUIndexFormat, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:1672</i>
	 */
	public static void wgpuRenderPassEncoderSetIndexBuffer(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WgpuLibrary.WGPUBuffer buffer, IntValuedEnum<WgpuLibrary.WGPUIndexFormat > format, long offset, long size) {
		wgpuRenderPassEncoderSetIndexBuffer(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(buffer), (int)format.value(), offset, size);
	}
	protected native static void wgpuRenderPassEncoderSetIndexBuffer(@Ptr long renderPassEncoder, @Ptr long buffer, int format, long offset, long size);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1673</i>
	 */
	public static void wgpuRenderPassEncoderSetLabel(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<Byte > label) {
		wgpuRenderPassEncoderSetLabel(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(label));
	}
	protected native static void wgpuRenderPassEncoderSetLabel(@Ptr long renderPassEncoder, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder, WGPURenderPipeline)</code><br>
	 * <i>native declaration : webgpu.h:1674</i>
	 */
	public static void wgpuRenderPassEncoderSetPipeline(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WgpuLibrary.WGPURenderPipeline pipeline) {
		wgpuRenderPassEncoderSetPipeline(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(pipeline));
	}
	protected native static void wgpuRenderPassEncoderSetPipeline(@Ptr long renderPassEncoder, @Ptr long pipeline);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder, uint32_t, uint32_t, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:1675</i>
	 */
	public static void wgpuRenderPassEncoderSetScissorRect(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int x, int y, int width, int height) {
		wgpuRenderPassEncoderSetScissorRect(Pointer.getPeer(renderPassEncoder), x, y, width, height);
	}
	protected native static void wgpuRenderPassEncoderSetScissorRect(@Ptr long renderPassEncoder, int x, int y, int width, int height);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:1676</i>
	 */
	public static void wgpuRenderPassEncoderSetStencilReference(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int reference) {
		wgpuRenderPassEncoderSetStencilReference(Pointer.getPeer(renderPassEncoder), reference);
	}
	protected native static void wgpuRenderPassEncoderSetStencilReference(@Ptr long renderPassEncoder, int reference);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder, uint32_t, WGPUBuffer, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:1677</i>
	 */
	public static void wgpuRenderPassEncoderSetVertexBuffer(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int slot, WgpuLibrary.WGPUBuffer buffer, long offset, long size) {
		wgpuRenderPassEncoderSetVertexBuffer(Pointer.getPeer(renderPassEncoder), slot, Pointer.getPeer(buffer), offset, size);
	}
	protected native static void wgpuRenderPassEncoderSetVertexBuffer(@Ptr long renderPassEncoder, int slot, @Ptr long buffer, long offset, long size);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder, float, float, float, float, float, float)</code><br>
	 * <i>native declaration : webgpu.h:1678</i>
	 */
	public static void wgpuRenderPassEncoderSetViewport(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth) {
		wgpuRenderPassEncoderSetViewport(Pointer.getPeer(renderPassEncoder), x, y, width, height, minDepth, maxDepth);
	}
	protected native static void wgpuRenderPassEncoderSetViewport(@Ptr long renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderReference(WGPURenderPassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1679</i>
	 */
	public static void wgpuRenderPassEncoderReference(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder) {
		wgpuRenderPassEncoderReference(Pointer.getPeer(renderPassEncoder));
	}
	protected native static void wgpuRenderPassEncoderReference(@Ptr long renderPassEncoder);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderRelease(WGPURenderPassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:1680</i>
	 */
	public static void wgpuRenderPassEncoderRelease(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder) {
		wgpuRenderPassEncoderRelease(Pointer.getPeer(renderPassEncoder));
	}
	protected native static void wgpuRenderPassEncoderRelease(@Ptr long renderPassEncoder);
	/**
	 * Methods of RenderPipeline<br>
	 * Original signature : <code>WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:1683</i>
	 */
	public static WgpuLibrary.WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WgpuLibrary.WGPURenderPipeline renderPipeline, int groupIndex) {
		return new WgpuLibrary.WGPUBindGroupLayout(wgpuRenderPipelineGetBindGroupLayout(Pointer.getPeer(renderPipeline), groupIndex));
	}
	@Ptr 
	protected native static long wgpuRenderPipelineGetBindGroupLayout(@Ptr long renderPipeline, int groupIndex);
	/**
	 * Original signature : <code>void wgpuRenderPipelineSetLabel(WGPURenderPipeline, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1684</i>
	 */
	public static void wgpuRenderPipelineSetLabel(WgpuLibrary.WGPURenderPipeline renderPipeline, Pointer<Byte > label) {
		wgpuRenderPipelineSetLabel(Pointer.getPeer(renderPipeline), Pointer.getPeer(label));
	}
	protected native static void wgpuRenderPipelineSetLabel(@Ptr long renderPipeline, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuRenderPipelineReference(WGPURenderPipeline)</code><br>
	 * <i>native declaration : webgpu.h:1685</i>
	 */
	public static void wgpuRenderPipelineReference(WgpuLibrary.WGPURenderPipeline renderPipeline) {
		wgpuRenderPipelineReference(Pointer.getPeer(renderPipeline));
	}
	protected native static void wgpuRenderPipelineReference(@Ptr long renderPipeline);
	/**
	 * Original signature : <code>void wgpuRenderPipelineRelease(WGPURenderPipeline)</code><br>
	 * <i>native declaration : webgpu.h:1686</i>
	 */
	public static void wgpuRenderPipelineRelease(WgpuLibrary.WGPURenderPipeline renderPipeline) {
		wgpuRenderPipelineRelease(Pointer.getPeer(renderPipeline));
	}
	protected native static void wgpuRenderPipelineRelease(@Ptr long renderPipeline);
	/**
	 * Methods of Sampler<br>
	 * Original signature : <code>void wgpuSamplerSetLabel(WGPUSampler, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1689</i>
	 */
	public static void wgpuSamplerSetLabel(WgpuLibrary.WGPUSampler sampler, Pointer<Byte > label) {
		wgpuSamplerSetLabel(Pointer.getPeer(sampler), Pointer.getPeer(label));
	}
	protected native static void wgpuSamplerSetLabel(@Ptr long sampler, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuSamplerReference(WGPUSampler)</code><br>
	 * <i>native declaration : webgpu.h:1690</i>
	 */
	public static void wgpuSamplerReference(WgpuLibrary.WGPUSampler sampler) {
		wgpuSamplerReference(Pointer.getPeer(sampler));
	}
	protected native static void wgpuSamplerReference(@Ptr long sampler);
	/**
	 * Original signature : <code>void wgpuSamplerRelease(WGPUSampler)</code><br>
	 * <i>native declaration : webgpu.h:1691</i>
	 */
	public static void wgpuSamplerRelease(WgpuLibrary.WGPUSampler sampler) {
		wgpuSamplerRelease(Pointer.getPeer(sampler));
	}
	protected native static void wgpuSamplerRelease(@Ptr long sampler);
	/**
	 * Methods of ShaderModule<br>
	 * Original signature : <code>void wgpuShaderModuleGetCompilationInfo(WGPUShaderModule, WGPUCompilationInfoCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:1694</i>
	 */
	public static void wgpuShaderModuleGetCompilationInfo(WgpuLibrary.WGPUShaderModule shaderModule, Pointer<WgpuLibrary.WGPUCompilationInfoCallback > callback, Pointer<? > userdata) {
		wgpuShaderModuleGetCompilationInfo(Pointer.getPeer(shaderModule), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuShaderModuleGetCompilationInfo(@Ptr long shaderModule, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>void wgpuShaderModuleSetLabel(WGPUShaderModule, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1695</i>
	 */
	public static void wgpuShaderModuleSetLabel(WgpuLibrary.WGPUShaderModule shaderModule, Pointer<Byte > label) {
		wgpuShaderModuleSetLabel(Pointer.getPeer(shaderModule), Pointer.getPeer(label));
	}
	protected native static void wgpuShaderModuleSetLabel(@Ptr long shaderModule, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuShaderModuleReference(WGPUShaderModule)</code><br>
	 * <i>native declaration : webgpu.h:1696</i>
	 */
	public static void wgpuShaderModuleReference(WgpuLibrary.WGPUShaderModule shaderModule) {
		wgpuShaderModuleReference(Pointer.getPeer(shaderModule));
	}
	protected native static void wgpuShaderModuleReference(@Ptr long shaderModule);
	/**
	 * Original signature : <code>void wgpuShaderModuleRelease(WGPUShaderModule)</code><br>
	 * <i>native declaration : webgpu.h:1697</i>
	 */
	public static void wgpuShaderModuleRelease(WgpuLibrary.WGPUShaderModule shaderModule) {
		wgpuShaderModuleRelease(Pointer.getPeer(shaderModule));
	}
	protected native static void wgpuShaderModuleRelease(@Ptr long shaderModule);
	/**
	 * Methods of Surface<br>
	 * Original signature : <code>void wgpuSurfaceConfigure(WGPUSurface, const WGPUSurfaceConfiguration*)</code><br>
	 * <i>native declaration : webgpu.h:1700</i>
	 */
	public static void wgpuSurfaceConfigure(WgpuLibrary.WGPUSurface surface, Pointer<WGPUSurfaceConfiguration > config) {
		wgpuSurfaceConfigure(Pointer.getPeer(surface), Pointer.getPeer(config));
	}
	protected native static void wgpuSurfaceConfigure(@Ptr long surface, @Ptr long config);
	/**
	 * Original signature : <code>void wgpuSurfaceGetCapabilities(WGPUSurface, WGPUAdapter, WGPUSurfaceCapabilities*)</code><br>
	 * <i>native declaration : webgpu.h:1701</i>
	 */
	public static void wgpuSurfaceGetCapabilities(WgpuLibrary.WGPUSurface surface, WgpuLibrary.WGPUAdapter adapter, Pointer<WGPUSurfaceCapabilities > capabilities) {
		wgpuSurfaceGetCapabilities(Pointer.getPeer(surface), Pointer.getPeer(adapter), Pointer.getPeer(capabilities));
	}
	protected native static void wgpuSurfaceGetCapabilities(@Ptr long surface, @Ptr long adapter, @Ptr long capabilities);
	/**
	 * Original signature : <code>void wgpuSurfaceGetCurrentTexture(WGPUSurface, WGPUSurfaceTexture*)</code><br>
	 * <i>native declaration : webgpu.h:1702</i>
	 */
	public static void wgpuSurfaceGetCurrentTexture(WgpuLibrary.WGPUSurface surface, Pointer<WGPUSurfaceTexture > surfaceTexture) {
		wgpuSurfaceGetCurrentTexture(Pointer.getPeer(surface), Pointer.getPeer(surfaceTexture));
	}
	protected native static void wgpuSurfaceGetCurrentTexture(@Ptr long surface, @Ptr long surfaceTexture);
	/**
	 * Original signature : <code>WGPUTextureFormat wgpuSurfaceGetPreferredFormat(WGPUSurface, WGPUAdapter)</code><br>
	 * <i>native declaration : webgpu.h:1703</i>
	 */
	public static IntValuedEnum<WgpuLibrary.WGPUTextureFormat > wgpuSurfaceGetPreferredFormat(WgpuLibrary.WGPUSurface surface, WgpuLibrary.WGPUAdapter adapter) {
		return FlagSet.fromValue(wgpuSurfaceGetPreferredFormat(Pointer.getPeer(surface), Pointer.getPeer(adapter)), WgpuLibrary.WGPUTextureFormat.class);
	}
	protected native static int wgpuSurfaceGetPreferredFormat(@Ptr long surface, @Ptr long adapter);
	/**
	 * Original signature : <code>void wgpuSurfacePresent(WGPUSurface)</code><br>
	 * <i>native declaration : webgpu.h:1704</i>
	 */
	public static void wgpuSurfacePresent(WgpuLibrary.WGPUSurface surface) {
		wgpuSurfacePresent(Pointer.getPeer(surface));
	}
	protected native static void wgpuSurfacePresent(@Ptr long surface);
	/**
	 * Original signature : <code>void wgpuSurfaceUnconfigure(WGPUSurface)</code><br>
	 * <i>native declaration : webgpu.h:1705</i>
	 */
	public static void wgpuSurfaceUnconfigure(WgpuLibrary.WGPUSurface surface) {
		wgpuSurfaceUnconfigure(Pointer.getPeer(surface));
	}
	protected native static void wgpuSurfaceUnconfigure(@Ptr long surface);
	/**
	 * Original signature : <code>void wgpuSurfaceReference(WGPUSurface)</code><br>
	 * <i>native declaration : webgpu.h:1706</i>
	 */
	public static void wgpuSurfaceReference(WgpuLibrary.WGPUSurface surface) {
		wgpuSurfaceReference(Pointer.getPeer(surface));
	}
	protected native static void wgpuSurfaceReference(@Ptr long surface);
	/**
	 * Original signature : <code>void wgpuSurfaceRelease(WGPUSurface)</code><br>
	 * <i>native declaration : webgpu.h:1707</i>
	 */
	public static void wgpuSurfaceRelease(WgpuLibrary.WGPUSurface surface) {
		wgpuSurfaceRelease(Pointer.getPeer(surface));
	}
	protected native static void wgpuSurfaceRelease(@Ptr long surface);
	/**
	 * Methods of SurfaceCapabilities<br>
	 * Original signature : <code>void wgpuSurfaceCapabilitiesFreeMembers(WGPUSurfaceCapabilities)</code><br>
	 * <i>native declaration : webgpu.h:1710</i>
	 */
	native public static void wgpuSurfaceCapabilitiesFreeMembers(WGPUSurfaceCapabilities capabilities);
	/**
	 * Methods of Texture<br>
	 * Original signature : <code>WGPUTextureView wgpuTextureCreateView(WGPUTexture, const WGPUTextureViewDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:1713</i>
	 */
	public static WgpuLibrary.WGPUTextureView wgpuTextureCreateView(WgpuLibrary.WGPUTexture texture, Pointer<WGPUTextureViewDescriptor > descriptor) {
		return new WgpuLibrary.WGPUTextureView(wgpuTextureCreateView(Pointer.getPeer(texture), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuTextureCreateView(@Ptr long texture, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuTextureDestroy(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:1714</i>
	 */
	public static void wgpuTextureDestroy(WgpuLibrary.WGPUTexture texture) {
		wgpuTextureDestroy(Pointer.getPeer(texture));
	}
	protected native static void wgpuTextureDestroy(@Ptr long texture);
	/**
	 * Original signature : <code>uint32_t wgpuTextureGetDepthOrArrayLayers(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:1715</i>
	 */
	public static int wgpuTextureGetDepthOrArrayLayers(WgpuLibrary.WGPUTexture texture) {
		return wgpuTextureGetDepthOrArrayLayers(Pointer.getPeer(texture));
	}
	protected native static int wgpuTextureGetDepthOrArrayLayers(@Ptr long texture);
	/**
	 * Original signature : <code>WGPUTextureDimension wgpuTextureGetDimension(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:1716</i>
	 */
	public static IntValuedEnum<WgpuLibrary.WGPUTextureDimension > wgpuTextureGetDimension(WgpuLibrary.WGPUTexture texture) {
		return FlagSet.fromValue(wgpuTextureGetDimension(Pointer.getPeer(texture)), WgpuLibrary.WGPUTextureDimension.class);
	}
	protected native static int wgpuTextureGetDimension(@Ptr long texture);
	/**
	 * Original signature : <code>WGPUTextureFormat wgpuTextureGetFormat(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:1717</i>
	 */
	public static IntValuedEnum<WgpuLibrary.WGPUTextureFormat > wgpuTextureGetFormat(WgpuLibrary.WGPUTexture texture) {
		return FlagSet.fromValue(wgpuTextureGetFormat(Pointer.getPeer(texture)), WgpuLibrary.WGPUTextureFormat.class);
	}
	protected native static int wgpuTextureGetFormat(@Ptr long texture);
	/**
	 * Original signature : <code>uint32_t wgpuTextureGetHeight(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:1718</i>
	 */
	public static int wgpuTextureGetHeight(WgpuLibrary.WGPUTexture texture) {
		return wgpuTextureGetHeight(Pointer.getPeer(texture));
	}
	protected native static int wgpuTextureGetHeight(@Ptr long texture);
	/**
	 * Original signature : <code>uint32_t wgpuTextureGetMipLevelCount(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:1719</i>
	 */
	public static int wgpuTextureGetMipLevelCount(WgpuLibrary.WGPUTexture texture) {
		return wgpuTextureGetMipLevelCount(Pointer.getPeer(texture));
	}
	protected native static int wgpuTextureGetMipLevelCount(@Ptr long texture);
	/**
	 * Original signature : <code>uint32_t wgpuTextureGetSampleCount(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:1720</i>
	 */
	public static int wgpuTextureGetSampleCount(WgpuLibrary.WGPUTexture texture) {
		return wgpuTextureGetSampleCount(Pointer.getPeer(texture));
	}
	protected native static int wgpuTextureGetSampleCount(@Ptr long texture);
	/**
	 * Original signature : <code>WGPUTextureUsageFlags wgpuTextureGetUsage(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:1721</i>
	 */
	public static int wgpuTextureGetUsage(WgpuLibrary.WGPUTexture texture) {
		return wgpuTextureGetUsage(Pointer.getPeer(texture));
	}
	protected native static int wgpuTextureGetUsage(@Ptr long texture);
	/**
	 * Original signature : <code>uint32_t wgpuTextureGetWidth(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:1722</i>
	 */
	public static int wgpuTextureGetWidth(WgpuLibrary.WGPUTexture texture) {
		return wgpuTextureGetWidth(Pointer.getPeer(texture));
	}
	protected native static int wgpuTextureGetWidth(@Ptr long texture);
	/**
	 * Original signature : <code>void wgpuTextureSetLabel(WGPUTexture, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1723</i>
	 */
	public static void wgpuTextureSetLabel(WgpuLibrary.WGPUTexture texture, Pointer<Byte > label) {
		wgpuTextureSetLabel(Pointer.getPeer(texture), Pointer.getPeer(label));
	}
	protected native static void wgpuTextureSetLabel(@Ptr long texture, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuTextureReference(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:1724</i>
	 */
	public static void wgpuTextureReference(WgpuLibrary.WGPUTexture texture) {
		wgpuTextureReference(Pointer.getPeer(texture));
	}
	protected native static void wgpuTextureReference(@Ptr long texture);
	/**
	 * Original signature : <code>void wgpuTextureRelease(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:1725</i>
	 */
	public static void wgpuTextureRelease(WgpuLibrary.WGPUTexture texture) {
		wgpuTextureRelease(Pointer.getPeer(texture));
	}
	protected native static void wgpuTextureRelease(@Ptr long texture);
	/**
	 * Methods of TextureView<br>
	 * Original signature : <code>void wgpuTextureViewSetLabel(WGPUTextureView, const char*)</code><br>
	 * <i>native declaration : webgpu.h:1728</i>
	 */
	public static void wgpuTextureViewSetLabel(WgpuLibrary.WGPUTextureView textureView, Pointer<Byte > label) {
		wgpuTextureViewSetLabel(Pointer.getPeer(textureView), Pointer.getPeer(label));
	}
	protected native static void wgpuTextureViewSetLabel(@Ptr long textureView, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuTextureViewReference(WGPUTextureView)</code><br>
	 * <i>native declaration : webgpu.h:1729</i>
	 */
	public static void wgpuTextureViewReference(WgpuLibrary.WGPUTextureView textureView) {
		wgpuTextureViewReference(Pointer.getPeer(textureView));
	}
	protected native static void wgpuTextureViewReference(@Ptr long textureView);
	/**
	 * Original signature : <code>void wgpuTextureViewRelease(WGPUTextureView)</code><br>
	 * <i>native declaration : webgpu.h:1730</i>
	 */
	public static void wgpuTextureViewRelease(WgpuLibrary.WGPUTextureView textureView) {
		wgpuTextureViewRelease(Pointer.getPeer(textureView));
	}
	protected native static void wgpuTextureViewRelease(@Ptr long textureView);
	/**
	 * Original signature : <code>void wgpuGenerateReport(WGPUInstance, WGPUGlobalReport*)</code><br>
	 * <i>native declaration : wgpu.h:231</i>
	 */
	public static void wgpuGenerateReport(WgpuLibrary.WGPUInstance instance, Pointer<WGPUGlobalReport > report) {
		wgpuGenerateReport(Pointer.getPeer(instance), Pointer.getPeer(report));
	}
	protected native static void wgpuGenerateReport(@Ptr long instance, @Ptr long report);
	/**
	 * Original signature : <code>size_t wgpuInstanceEnumerateAdapters(WGPUInstance, const WGPUInstanceEnumerateAdapterOptions*, WGPUAdapter*)</code><br>
	 * <i>native declaration : wgpu.h:232</i>
	 */
	@Ptr 
	public static long wgpuInstanceEnumerateAdapters(WgpuLibrary.WGPUInstance instance, Pointer<WGPUInstanceEnumerateAdapterOptions > options, Pointer<WgpuLibrary.WGPUAdapter > adapters) {
		return wgpuInstanceEnumerateAdapters(Pointer.getPeer(instance), Pointer.getPeer(options), Pointer.getPeer(adapters));
	}
	@Ptr 
	protected native static long wgpuInstanceEnumerateAdapters(@Ptr long instance, @Ptr long options, @Ptr long adapters);
	/**
	 * Original signature : <code>WGPUSubmissionIndex wgpuQueueSubmitForIndex(WGPUQueue, size_t, const WGPUCommandBuffer*)</code><br>
	 * <i>native declaration : wgpu.h:234</i>
	 */
	public static long wgpuQueueSubmitForIndex(WgpuLibrary.WGPUQueue queue, @Ptr long commandCount, Pointer<WgpuLibrary.WGPUCommandBuffer > commands) {
		return wgpuQueueSubmitForIndex(Pointer.getPeer(queue), commandCount, Pointer.getPeer(commands));
	}
	protected native static long wgpuQueueSubmitForIndex(@Ptr long queue, @Ptr long commandCount, @Ptr long commands);
	/**
	 * Returns true if the queue is empty, or false if there are more queue submissions still in flight.<br>
	 * Original signature : <code>WGPUBool wgpuDevicePoll(WGPUDevice, WGPUBool, const WGPUWrappedSubmissionIndex*)</code><br>
	 * <i>native declaration : wgpu.h:237</i>
	 */
	public static int wgpuDevicePoll(WgpuLibrary.WGPUDevice device, int wait$, Pointer<WGPUWrappedSubmissionIndex > wrappedSubmissionIndex) {
		return wgpuDevicePoll(Pointer.getPeer(device), wait$, Pointer.getPeer(wrappedSubmissionIndex));
	}
	protected native static int wgpuDevicePoll(@Ptr long device, int wait$, @Ptr long wrappedSubmissionIndex);
	/**
	 * Original signature : <code>void wgpuSetLogCallback(WGPULogCallback, void*)</code><br>
	 * <i>native declaration : wgpu.h:239</i>
	 */
	public static void wgpuSetLogCallback(Pointer<WgpuLibrary.WGPULogCallback > callback, Pointer<? > userdata) {
		wgpuSetLogCallback(Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuSetLogCallback(@Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>void wgpuSetLogLevel(WGPULogLevel)</code><br>
	 * <i>native declaration : wgpu.h:241</i>
	 */
	public static void wgpuSetLogLevel(IntValuedEnum<WgpuLibrary.WGPULogLevel > level) {
		wgpuSetLogLevel((int)level.value());
	}
	protected native static void wgpuSetLogLevel(int level);
	/**
	 * Original signature : <code>uint32_t wgpuGetVersion()</code><br>
	 * <i>native declaration : wgpu.h:243</i>
	 */
	native public static int wgpuGetVersion();
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetPushConstants(WGPURenderPassEncoder, WGPUShaderStageFlags, uint32_t, uint32_t, const void*)</code><br>
	 * <i>native declaration : wgpu.h:245</i>
	 */
	public static void wgpuRenderPassEncoderSetPushConstants(WgpuLibrary.WGPURenderPassEncoder encoder, int stages, int offset, int sizeBytes, Pointer<? > data) {
		wgpuRenderPassEncoderSetPushConstants(Pointer.getPeer(encoder), stages, offset, sizeBytes, Pointer.getPeer(data));
	}
	protected native static void wgpuRenderPassEncoderSetPushConstants(@Ptr long encoder, int stages, int offset, int sizeBytes, @Ptr long data);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderMultiDrawIndirect(WGPURenderPassEncoder, WGPUBuffer, uint64_t, uint32_t)</code><br>
	 * <i>native declaration : wgpu.h:247</i>
	 */
	public static void wgpuRenderPassEncoderMultiDrawIndirect(WgpuLibrary.WGPURenderPassEncoder encoder, WgpuLibrary.WGPUBuffer buffer, long offset, int count) {
		wgpuRenderPassEncoderMultiDrawIndirect(Pointer.getPeer(encoder), Pointer.getPeer(buffer), offset, count);
	}
	protected native static void wgpuRenderPassEncoderMultiDrawIndirect(@Ptr long encoder, @Ptr long buffer, long offset, int count);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderMultiDrawIndexedIndirect(WGPURenderPassEncoder, WGPUBuffer, uint64_t, uint32_t)</code><br>
	 * <i>native declaration : wgpu.h:248</i>
	 */
	public static void wgpuRenderPassEncoderMultiDrawIndexedIndirect(WgpuLibrary.WGPURenderPassEncoder encoder, WgpuLibrary.WGPUBuffer buffer, long offset, int count) {
		wgpuRenderPassEncoderMultiDrawIndexedIndirect(Pointer.getPeer(encoder), Pointer.getPeer(buffer), offset, count);
	}
	protected native static void wgpuRenderPassEncoderMultiDrawIndexedIndirect(@Ptr long encoder, @Ptr long buffer, long offset, int count);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderMultiDrawIndirectCount(WGPURenderPassEncoder, WGPUBuffer, uint64_t, WGPUBuffer, uint64_t, uint32_t)</code><br>
	 * <i>native declaration : wgpu.h:250</i>
	 */
	public static void wgpuRenderPassEncoderMultiDrawIndirectCount(WgpuLibrary.WGPURenderPassEncoder encoder, WgpuLibrary.WGPUBuffer buffer, long offset, WgpuLibrary.WGPUBuffer count_buffer, long count_buffer_offset, int max_count) {
		wgpuRenderPassEncoderMultiDrawIndirectCount(Pointer.getPeer(encoder), Pointer.getPeer(buffer), offset, Pointer.getPeer(count_buffer), count_buffer_offset, max_count);
	}
	protected native static void wgpuRenderPassEncoderMultiDrawIndirectCount(@Ptr long encoder, @Ptr long buffer, long offset, @Ptr long count_buffer, long count_buffer_offset, int max_count);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderMultiDrawIndexedIndirectCount(WGPURenderPassEncoder, WGPUBuffer, uint64_t, WGPUBuffer, uint64_t, uint32_t)</code><br>
	 * <i>native declaration : wgpu.h:251</i>
	 */
	public static void wgpuRenderPassEncoderMultiDrawIndexedIndirectCount(WgpuLibrary.WGPURenderPassEncoder encoder, WgpuLibrary.WGPUBuffer buffer, long offset, WgpuLibrary.WGPUBuffer count_buffer, long count_buffer_offset, int max_count) {
		wgpuRenderPassEncoderMultiDrawIndexedIndirectCount(Pointer.getPeer(encoder), Pointer.getPeer(buffer), offset, Pointer.getPeer(count_buffer), count_buffer_offset, max_count);
	}
	protected native static void wgpuRenderPassEncoderMultiDrawIndexedIndirectCount(@Ptr long encoder, @Ptr long buffer, long offset, @Ptr long count_buffer, long count_buffer_offset, int max_count);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderBeginPipelineStatisticsQuery(WGPUComputePassEncoder, WGPUQuerySet, uint32_t)</code><br>
	 * <i>native declaration : wgpu.h:253</i>
	 */
	public static void wgpuComputePassEncoderBeginPipelineStatisticsQuery(WgpuLibrary.WGPUComputePassEncoder computePassEncoder, WgpuLibrary.WGPUQuerySet querySet, int queryIndex) {
		wgpuComputePassEncoderBeginPipelineStatisticsQuery(Pointer.getPeer(computePassEncoder), Pointer.getPeer(querySet), queryIndex);
	}
	protected native static void wgpuComputePassEncoderBeginPipelineStatisticsQuery(@Ptr long computePassEncoder, @Ptr long querySet, int queryIndex);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderEndPipelineStatisticsQuery(WGPUComputePassEncoder)</code><br>
	 * <i>native declaration : wgpu.h:254</i>
	 */
	public static void wgpuComputePassEncoderEndPipelineStatisticsQuery(WgpuLibrary.WGPUComputePassEncoder computePassEncoder) {
		wgpuComputePassEncoderEndPipelineStatisticsQuery(Pointer.getPeer(computePassEncoder));
	}
	protected native static void wgpuComputePassEncoderEndPipelineStatisticsQuery(@Ptr long computePassEncoder);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderBeginPipelineStatisticsQuery(WGPURenderPassEncoder, WGPUQuerySet, uint32_t)</code><br>
	 * <i>native declaration : wgpu.h:255</i>
	 */
	public static void wgpuRenderPassEncoderBeginPipelineStatisticsQuery(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WgpuLibrary.WGPUQuerySet querySet, int queryIndex) {
		wgpuRenderPassEncoderBeginPipelineStatisticsQuery(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(querySet), queryIndex);
	}
	protected native static void wgpuRenderPassEncoderBeginPipelineStatisticsQuery(@Ptr long renderPassEncoder, @Ptr long querySet, int queryIndex);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderEndPipelineStatisticsQuery(WGPURenderPassEncoder)</code><br>
	 * <i>native declaration : wgpu.h:256</i>
	 */
	public static void wgpuRenderPassEncoderEndPipelineStatisticsQuery(WgpuLibrary.WGPURenderPassEncoder renderPassEncoder) {
		wgpuRenderPassEncoderEndPipelineStatisticsQuery(Pointer.getPeer(renderPassEncoder));
	}
	protected native static void wgpuRenderPassEncoderEndPipelineStatisticsQuery(@Ptr long renderPassEncoder);
	public static class WGPUPipelineLayout extends TypedPointer {
		public WGPUPipelineLayout(long address) {
			super(address);
		}
		public WGPUPipelineLayout(Pointer address) {
			super(address);
		}
	};
	public static class WGPUQueue extends TypedPointer {
		public WGPUQueue(long address) {
			super(address);
		}
		public WGPUQueue(Pointer address) {
			super(address);
		}
	};
	public static class WGPUInstance extends TypedPointer {
		public WGPUInstance(long address) {
			super(address);
		}
		public WGPUInstance(Pointer address) {
			super(address);
		}
	};
	public static class WGPUDevice extends TypedPointer {
		public WGPUDevice(long address) {
			super(address);
		}
		public WGPUDevice(Pointer address) {
			super(address);
		}
	};
	public static class WGPURenderBundle extends TypedPointer {
		public WGPURenderBundle(long address) {
			super(address);
		}
		public WGPURenderBundle(Pointer address) {
			super(address);
		}
	};
	public static class WGPUQuerySet extends TypedPointer {
		public WGPUQuerySet(long address) {
			super(address);
		}
		public WGPUQuerySet(Pointer address) {
			super(address);
		}
	};
	public static class WGPUComputePassEncoder extends TypedPointer {
		public WGPUComputePassEncoder(long address) {
			super(address);
		}
		public WGPUComputePassEncoder(Pointer address) {
			super(address);
		}
	};
	public static class WGPURenderPipeline extends TypedPointer {
		public WGPURenderPipeline(long address) {
			super(address);
		}
		public WGPURenderPipeline(Pointer address) {
			super(address);
		}
	};
	public static class WGPUSampler extends TypedPointer {
		public WGPUSampler(long address) {
			super(address);
		}
		public WGPUSampler(Pointer address) {
			super(address);
		}
	};
	public static class WGPUCommandBuffer extends TypedPointer {
		public WGPUCommandBuffer(long address) {
			super(address);
		}
		public WGPUCommandBuffer(Pointer address) {
			super(address);
		}
	};
	public static class WGPUComputePipeline extends TypedPointer {
		public WGPUComputePipeline(long address) {
			super(address);
		}
		public WGPUComputePipeline(Pointer address) {
			super(address);
		}
	};
	public static class WGPUTexture extends TypedPointer {
		public WGPUTexture(long address) {
			super(address);
		}
		public WGPUTexture(Pointer address) {
			super(address);
		}
	};
	public static class WGPURenderPassEncoder extends TypedPointer {
		public WGPURenderPassEncoder(long address) {
			super(address);
		}
		public WGPURenderPassEncoder(Pointer address) {
			super(address);
		}
	};
	public static class WGPUBuffer extends TypedPointer {
		public WGPUBuffer(long address) {
			super(address);
		}
		public WGPUBuffer(Pointer address) {
			super(address);
		}
	};
	public static class WGPUTextureView extends TypedPointer {
		public WGPUTextureView(long address) {
			super(address);
		}
		public WGPUTextureView(Pointer address) {
			super(address);
		}
	};
	public static class WGPUSurface extends TypedPointer {
		public WGPUSurface(long address) {
			super(address);
		}
		public WGPUSurface(Pointer address) {
			super(address);
		}
	};
	public static class WGPUAdapter extends TypedPointer {
		public WGPUAdapter(long address) {
			super(address);
		}
		public WGPUAdapter(Pointer address) {
			super(address);
		}
	};
	public static class WGPURenderBundleEncoder extends TypedPointer {
		public WGPURenderBundleEncoder(long address) {
			super(address);
		}
		public WGPURenderBundleEncoder(Pointer address) {
			super(address);
		}
	};
	public static class WGPUBindGroupLayout extends TypedPointer {
		public WGPUBindGroupLayout(long address) {
			super(address);
		}
		public WGPUBindGroupLayout(Pointer address) {
			super(address);
		}
	};
	public static class WGPUBindGroup extends TypedPointer {
		public WGPUBindGroup(long address) {
			super(address);
		}
		public WGPUBindGroup(Pointer address) {
			super(address);
		}
	};
	public static class WGPUCommandEncoder extends TypedPointer {
		public WGPUCommandEncoder(long address) {
			super(address);
		}
		public WGPUCommandEncoder(Pointer address) {
			super(address);
		}
	};
	public static class WGPUShaderModule extends TypedPointer {
		public WGPUShaderModule(long address) {
			super(address);
		}
		public WGPUShaderModule(Pointer address) {
			super(address);
		}
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUBufferImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUInstanceImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUComputePassEncoderImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPURenderPassEncoderImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUShaderModuleImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPURenderPipelineImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUTextureViewImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUBindGroupImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUDeviceImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUCommandBufferImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUSurfaceImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUPipelineLayoutImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUTextureImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUAdapterImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUQuerySetImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUComputePipelineImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUSamplerImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPURenderBundleImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUQueueImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUBindGroupLayoutImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUCommandEncoderImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPURenderBundleEncoderImpl {
		
	};
}
