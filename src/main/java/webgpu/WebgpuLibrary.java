package webgpu;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.TypedPointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>webgpu</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("webgpu") 
@Runtime(CRuntime.class) 
public class WebgpuLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUWGSLFeatureName implements IntValuedEnum<WGPUWGSLFeatureName > {
		WGPUWGSLFeatureName_ReadonlyAndReadwriteStorageTextures(1),
		WGPUWGSLFeatureName_Packed4x8IntegerDotProduct(2),
		WGPUWGSLFeatureName_UnrestrictedPointerParameters(3),
		WGPUWGSLFeatureName_PointerCompositeAccess(4),
		WGPUWGSLFeatureName_ChromiumTestingUnimplemented(327680),
		WGPUWGSLFeatureName_ChromiumTestingUnsafeExperimental(327681),
		WGPUWGSLFeatureName_ChromiumTestingExperimental(327682),
		WGPUWGSLFeatureName_ChromiumTestingShippedWithKillswitch(327683),
		WGPUWGSLFeatureName_ChromiumTestingShipped(327684),
		WGPUWGSLFeatureName_Force32(2147483647);
		WGPUWGSLFeatureName(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUWGSLFeatureName > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUWGSLFeatureName > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUAdapterType implements IntValuedEnum<WGPUAdapterType > {
		WGPUAdapterType_DiscreteGPU(1),
		WGPUAdapterType_IntegratedGPU(2),
		WGPUAdapterType_CPU(3),
		WGPUAdapterType_Unknown(4),
		WGPUAdapterType_Force32(2147483647);
		WGPUAdapterType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUAdapterType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUAdapterType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUAddressMode implements IntValuedEnum<WGPUAddressMode > {
		WGPUAddressMode_Undefined(0),
		WGPUAddressMode_ClampToEdge(1),
		WGPUAddressMode_Repeat(2),
		WGPUAddressMode_MirrorRepeat(3),
		WGPUAddressMode_Force32(2147483647);
		WGPUAddressMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUAddressMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUAddressMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUAlphaMode implements IntValuedEnum<WGPUAlphaMode > {
		WGPUAlphaMode_Opaque(1),
		WGPUAlphaMode_Premultiplied(2),
		WGPUAlphaMode_Unpremultiplied(3),
		WGPUAlphaMode_Force32(2147483647);
		WGPUAlphaMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUAlphaMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUAlphaMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUBackendType implements IntValuedEnum<WGPUBackendType > {
		WGPUBackendType_Undefined(0),
		WGPUBackendType_Null(1),
		WGPUBackendType_WebGPU(2),
		WGPUBackendType_D3D11(3),
		WGPUBackendType_D3D12(4),
		WGPUBackendType_Metal(5),
		WGPUBackendType_Vulkan(6),
		WGPUBackendType_OpenGL(7),
		WGPUBackendType_OpenGLES(8),
		WGPUBackendType_Force32(2147483647);
		WGPUBackendType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUBackendType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUBackendType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUBlendFactor implements IntValuedEnum<WGPUBlendFactor > {
		WGPUBlendFactor_Undefined(0),
		WGPUBlendFactor_Zero(1),
		WGPUBlendFactor_One(2),
		WGPUBlendFactor_Src(3),
		WGPUBlendFactor_OneMinusSrc(4),
		WGPUBlendFactor_SrcAlpha(5),
		WGPUBlendFactor_OneMinusSrcAlpha(6),
		WGPUBlendFactor_Dst(7),
		WGPUBlendFactor_OneMinusDst(8),
		WGPUBlendFactor_DstAlpha(9),
		WGPUBlendFactor_OneMinusDstAlpha(10),
		WGPUBlendFactor_SrcAlphaSaturated(11),
		WGPUBlendFactor_Constant(12),
		WGPUBlendFactor_OneMinusConstant(13),
		WGPUBlendFactor_Src1(14),
		WGPUBlendFactor_OneMinusSrc1(15),
		WGPUBlendFactor_Src1Alpha(16),
		WGPUBlendFactor_OneMinusSrc1Alpha(17),
		WGPUBlendFactor_Force32(2147483647);
		WGPUBlendFactor(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUBlendFactor > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUBlendFactor > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUBlendOperation implements IntValuedEnum<WGPUBlendOperation > {
		WGPUBlendOperation_Undefined(0),
		WGPUBlendOperation_Add(1),
		WGPUBlendOperation_Subtract(2),
		WGPUBlendOperation_ReverseSubtract(3),
		WGPUBlendOperation_Min(4),
		WGPUBlendOperation_Max(5),
		WGPUBlendOperation_Force32(2147483647);
		WGPUBlendOperation(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUBlendOperation > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUBlendOperation > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUBufferBindingType implements IntValuedEnum<WGPUBufferBindingType > {
		WGPUBufferBindingType_Undefined(0),
		WGPUBufferBindingType_Uniform(1),
		WGPUBufferBindingType_Storage(2),
		WGPUBufferBindingType_ReadOnlyStorage(3),
		WGPUBufferBindingType_Force32(2147483647);
		WGPUBufferBindingType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUBufferBindingType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUBufferBindingType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUBufferMapAsyncStatus implements IntValuedEnum<WGPUBufferMapAsyncStatus > {
		WGPUBufferMapAsyncStatus_Success(1),
		WGPUBufferMapAsyncStatus_InstanceDropped(2),
		WGPUBufferMapAsyncStatus_ValidationError(3),
		WGPUBufferMapAsyncStatus_Unknown(4),
		WGPUBufferMapAsyncStatus_DeviceLost(5),
		WGPUBufferMapAsyncStatus_DestroyedBeforeCallback(6),
		WGPUBufferMapAsyncStatus_UnmappedBeforeCallback(7),
		WGPUBufferMapAsyncStatus_MappingAlreadyPending(8),
		WGPUBufferMapAsyncStatus_OffsetOutOfRange(9),
		WGPUBufferMapAsyncStatus_SizeOutOfRange(10),
		WGPUBufferMapAsyncStatus_Force32(2147483647);
		WGPUBufferMapAsyncStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUBufferMapAsyncStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUBufferMapAsyncStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUBufferMapState implements IntValuedEnum<WGPUBufferMapState > {
		WGPUBufferMapState_Unmapped(1),
		WGPUBufferMapState_Pending(2),
		WGPUBufferMapState_Mapped(3),
		WGPUBufferMapState_Force32(2147483647);
		WGPUBufferMapState(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUBufferMapState > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUBufferMapState > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUCallbackMode implements IntValuedEnum<WGPUCallbackMode > {
		WGPUCallbackMode_WaitAnyOnly(1),
		WGPUCallbackMode_AllowProcessEvents(2),
		WGPUCallbackMode_AllowSpontaneous(3),
		WGPUCallbackMode_Force32(2147483647);
		WGPUCallbackMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUCallbackMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUCallbackMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUCompareFunction implements IntValuedEnum<WGPUCompareFunction > {
		WGPUCompareFunction_Undefined(0),
		WGPUCompareFunction_Never(1),
		WGPUCompareFunction_Less(2),
		WGPUCompareFunction_Equal(3),
		WGPUCompareFunction_LessEqual(4),
		WGPUCompareFunction_Greater(5),
		WGPUCompareFunction_NotEqual(6),
		WGPUCompareFunction_GreaterEqual(7),
		WGPUCompareFunction_Always(8),
		WGPUCompareFunction_Force32(2147483647);
		WGPUCompareFunction(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUCompareFunction > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUCompareFunction > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUCompilationInfoRequestStatus implements IntValuedEnum<WGPUCompilationInfoRequestStatus > {
		WGPUCompilationInfoRequestStatus_Success(1),
		WGPUCompilationInfoRequestStatus_InstanceDropped(2),
		WGPUCompilationInfoRequestStatus_Error(3),
		WGPUCompilationInfoRequestStatus_DeviceLost(4),
		WGPUCompilationInfoRequestStatus_Unknown(5),
		WGPUCompilationInfoRequestStatus_Force32(2147483647);
		WGPUCompilationInfoRequestStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUCompilationInfoRequestStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUCompilationInfoRequestStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUCompilationMessageType implements IntValuedEnum<WGPUCompilationMessageType > {
		WGPUCompilationMessageType_Error(1),
		WGPUCompilationMessageType_Warning(2),
		WGPUCompilationMessageType_Info(3),
		WGPUCompilationMessageType_Force32(2147483647);
		WGPUCompilationMessageType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUCompilationMessageType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUCompilationMessageType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUCompositeAlphaMode implements IntValuedEnum<WGPUCompositeAlphaMode > {
		WGPUCompositeAlphaMode_Auto(1),
		WGPUCompositeAlphaMode_Opaque(2),
		WGPUCompositeAlphaMode_Premultiplied(3),
		WGPUCompositeAlphaMode_Unpremultiplied(4),
		WGPUCompositeAlphaMode_Inherit(5),
		WGPUCompositeAlphaMode_Force32(2147483647);
		WGPUCompositeAlphaMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUCompositeAlphaMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUCompositeAlphaMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUCreatePipelineAsyncStatus implements IntValuedEnum<WGPUCreatePipelineAsyncStatus > {
		WGPUCreatePipelineAsyncStatus_Success(1),
		WGPUCreatePipelineAsyncStatus_InstanceDropped(2),
		WGPUCreatePipelineAsyncStatus_ValidationError(3),
		WGPUCreatePipelineAsyncStatus_InternalError(4),
		WGPUCreatePipelineAsyncStatus_DeviceLost(5),
		WGPUCreatePipelineAsyncStatus_DeviceDestroyed(6),
		WGPUCreatePipelineAsyncStatus_Unknown(7),
		WGPUCreatePipelineAsyncStatus_Force32(2147483647);
		WGPUCreatePipelineAsyncStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUCreatePipelineAsyncStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUCreatePipelineAsyncStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUCullMode implements IntValuedEnum<WGPUCullMode > {
		WGPUCullMode_Undefined(0),
		WGPUCullMode_None(1),
		WGPUCullMode_Front(2),
		WGPUCullMode_Back(3),
		WGPUCullMode_Force32(2147483647);
		WGPUCullMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUCullMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUCullMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUDeviceLostReason implements IntValuedEnum<WGPUDeviceLostReason > {
		WGPUDeviceLostReason_Unknown(1),
		WGPUDeviceLostReason_Destroyed(2),
		WGPUDeviceLostReason_InstanceDropped(3),
		WGPUDeviceLostReason_FailedCreation(4),
		WGPUDeviceLostReason_Force32(2147483647);
		WGPUDeviceLostReason(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUDeviceLostReason > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUDeviceLostReason > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUErrorFilter implements IntValuedEnum<WGPUErrorFilter > {
		WGPUErrorFilter_Validation(1),
		WGPUErrorFilter_OutOfMemory(2),
		WGPUErrorFilter_Internal(3),
		WGPUErrorFilter_Force32(2147483647);
		WGPUErrorFilter(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUErrorFilter > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUErrorFilter > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUErrorType implements IntValuedEnum<WGPUErrorType > {
		WGPUErrorType_NoError(1),
		WGPUErrorType_Validation(2),
		WGPUErrorType_OutOfMemory(3),
		WGPUErrorType_Internal(4),
		WGPUErrorType_Unknown(5),
		WGPUErrorType_DeviceLost(6),
		WGPUErrorType_Force32(2147483647);
		WGPUErrorType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUErrorType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUErrorType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUExternalTextureRotation implements IntValuedEnum<WGPUExternalTextureRotation > {
		WGPUExternalTextureRotation_Rotate0Degrees(1),
		WGPUExternalTextureRotation_Rotate90Degrees(2),
		WGPUExternalTextureRotation_Rotate180Degrees(3),
		WGPUExternalTextureRotation_Rotate270Degrees(4),
		WGPUExternalTextureRotation_Force32(2147483647);
		WGPUExternalTextureRotation(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUExternalTextureRotation > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUExternalTextureRotation > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUFeatureName implements IntValuedEnum<WGPUFeatureName > {
		WGPUFeatureName_DepthClipControl(1),
		WGPUFeatureName_Depth32FloatStencil8(2),
		WGPUFeatureName_TimestampQuery(3),
		WGPUFeatureName_TextureCompressionBC(4),
		WGPUFeatureName_TextureCompressionETC2(5),
		WGPUFeatureName_TextureCompressionASTC(6),
		WGPUFeatureName_IndirectFirstInstance(7),
		WGPUFeatureName_ShaderF16(8),
		WGPUFeatureName_RG11B10UfloatRenderable(9),
		WGPUFeatureName_BGRA8UnormStorage(10),
		WGPUFeatureName_Float32Filterable(11),
		WGPUFeatureName_Subgroups(12),
		WGPUFeatureName_SubgroupsF16(13),
		WGPUFeatureName_DawnInternalUsages(327680),
		WGPUFeatureName_DawnMultiPlanarFormats(327681),
		WGPUFeatureName_DawnNative(327682),
		WGPUFeatureName_ChromiumExperimentalTimestampQueryInsidePasses(327683),
		WGPUFeatureName_ImplicitDeviceSynchronization(327684),
		WGPUFeatureName_SurfaceCapabilities(327685),
		WGPUFeatureName_TransientAttachments(327686),
		WGPUFeatureName_MSAARenderToSingleSampled(327687),
		WGPUFeatureName_DualSourceBlending(327688),
		WGPUFeatureName_D3D11MultithreadProtected(327689),
		WGPUFeatureName_ANGLETextureSharing(327690),
		WGPUFeatureName_ChromiumExperimentalSubgroups(327691),
		WGPUFeatureName_ChromiumExperimentalSubgroupUniformControlFlow(327692),
		WGPUFeatureName_PixelLocalStorageCoherent(327693),
		WGPUFeatureName_PixelLocalStorageNonCoherent(327694),
		WGPUFeatureName_Unorm16TextureFormats(327695),
		WGPUFeatureName_Snorm16TextureFormats(327696),
		WGPUFeatureName_MultiPlanarFormatExtendedUsages(327697),
		WGPUFeatureName_MultiPlanarFormatP010(327698),
		WGPUFeatureName_HostMappedPointer(327699),
		WGPUFeatureName_MultiPlanarRenderTargets(327700),
		WGPUFeatureName_MultiPlanarFormatNv12a(327701),
		WGPUFeatureName_FramebufferFetch(327702),
		WGPUFeatureName_BufferMapExtendedUsages(327703),
		WGPUFeatureName_AdapterPropertiesMemoryHeaps(327704),
		WGPUFeatureName_AdapterPropertiesD3D(327705),
		WGPUFeatureName_AdapterPropertiesVk(327706),
		WGPUFeatureName_R8UnormStorage(327707),
		WGPUFeatureName_FormatCapabilities(327708),
		WGPUFeatureName_DrmFormatCapabilities(327709),
		WGPUFeatureName_Norm16TextureFormats(327710),
		WGPUFeatureName_MultiPlanarFormatNv16(327711),
		WGPUFeatureName_MultiPlanarFormatNv24(327712),
		WGPUFeatureName_MultiPlanarFormatP210(327713),
		WGPUFeatureName_MultiPlanarFormatP410(327714),
		WGPUFeatureName_SharedTextureMemoryVkDedicatedAllocation(327715),
		WGPUFeatureName_SharedTextureMemoryAHardwareBuffer(327716),
		WGPUFeatureName_SharedTextureMemoryDmaBuf(327717),
		WGPUFeatureName_SharedTextureMemoryOpaqueFD(327718),
		WGPUFeatureName_SharedTextureMemoryZirconHandle(327719),
		WGPUFeatureName_SharedTextureMemoryDXGISharedHandle(327720),
		WGPUFeatureName_SharedTextureMemoryD3D11Texture2D(327721),
		WGPUFeatureName_SharedTextureMemoryIOSurface(327722),
		WGPUFeatureName_SharedTextureMemoryEGLImage(327723),
		WGPUFeatureName_SharedFenceVkSemaphoreOpaqueFD(327724),
		WGPUFeatureName_SharedFenceVkSemaphoreSyncFD(327725),
		WGPUFeatureName_SharedFenceVkSemaphoreZirconHandle(327726),
		WGPUFeatureName_SharedFenceDXGISharedHandle(327727),
		WGPUFeatureName_SharedFenceMTLSharedEvent(327728),
		WGPUFeatureName_SharedBufferMemoryD3D12Resource(327729),
		WGPUFeatureName_StaticSamplers(327730),
		WGPUFeatureName_YCbCrVulkanSamplers(327731),
		WGPUFeatureName_ShaderModuleCompilationOptions(327732),
		WGPUFeatureName_DawnLoadResolveTexture(327733),
		WGPUFeatureName_DawnPartialLoadResolveTexture(327734),
		WGPUFeatureName_MultiDrawIndirect(327735),
		WGPUFeatureName_Force32(2147483647);
		WGPUFeatureName(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUFeatureName > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUFeatureName > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUFilterMode implements IntValuedEnum<WGPUFilterMode > {
		WGPUFilterMode_Undefined(0),
		WGPUFilterMode_Nearest(1),
		WGPUFilterMode_Linear(2),
		WGPUFilterMode_Force32(2147483647);
		WGPUFilterMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUFilterMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUFilterMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUFrontFace implements IntValuedEnum<WGPUFrontFace > {
		WGPUFrontFace_Undefined(0),
		WGPUFrontFace_CCW(1),
		WGPUFrontFace_CW(2),
		WGPUFrontFace_Force32(2147483647);
		WGPUFrontFace(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUFrontFace > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUFrontFace > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUIndexFormat implements IntValuedEnum<WGPUIndexFormat > {
		WGPUIndexFormat_Undefined(0),
		WGPUIndexFormat_Uint16(1),
		WGPUIndexFormat_Uint32(2),
		WGPUIndexFormat_Force32(2147483647);
		WGPUIndexFormat(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUIndexFormat > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUIndexFormat > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPULoadOp implements IntValuedEnum<WGPULoadOp > {
		WGPULoadOp_Undefined(0),
		WGPULoadOp_Clear(1),
		WGPULoadOp_Load(2),
		WGPULoadOp_ExpandResolveTexture(327683),
		WGPULoadOp_Force32(2147483647);
		WGPULoadOp(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPULoadOp > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPULoadOp > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPULoggingType implements IntValuedEnum<WGPULoggingType > {
		WGPULoggingType_Verbose(1),
		WGPULoggingType_Info(2),
		WGPULoggingType_Warning(3),
		WGPULoggingType_Error(4),
		WGPULoggingType_Force32(2147483647);
		WGPULoggingType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPULoggingType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPULoggingType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUMapAsyncStatus implements IntValuedEnum<WGPUMapAsyncStatus > {
		WGPUMapAsyncStatus_Success(1),
		WGPUMapAsyncStatus_InstanceDropped(2),
		WGPUMapAsyncStatus_Error(3),
		WGPUMapAsyncStatus_Aborted(4),
		WGPUMapAsyncStatus_Unknown(5),
		WGPUMapAsyncStatus_Force32(2147483647);
		WGPUMapAsyncStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUMapAsyncStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUMapAsyncStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUMipmapFilterMode implements IntValuedEnum<WGPUMipmapFilterMode > {
		WGPUMipmapFilterMode_Undefined(0),
		WGPUMipmapFilterMode_Nearest(1),
		WGPUMipmapFilterMode_Linear(2),
		WGPUMipmapFilterMode_Force32(2147483647);
		WGPUMipmapFilterMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUMipmapFilterMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUMipmapFilterMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUPopErrorScopeStatus implements IntValuedEnum<WGPUPopErrorScopeStatus > {
		WGPUPopErrorScopeStatus_Success(1),
		WGPUPopErrorScopeStatus_InstanceDropped(2),
		WGPUPopErrorScopeStatus_Force32(2147483647);
		WGPUPopErrorScopeStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUPopErrorScopeStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUPopErrorScopeStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUPowerPreference implements IntValuedEnum<WGPUPowerPreference > {
		WGPUPowerPreference_Undefined(0),
		WGPUPowerPreference_LowPower(1),
		WGPUPowerPreference_HighPerformance(2),
		WGPUPowerPreference_Force32(2147483647);
		WGPUPowerPreference(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUPowerPreference > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUPowerPreference > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUPresentMode implements IntValuedEnum<WGPUPresentMode > {
		WGPUPresentMode_Fifo(1),
		WGPUPresentMode_FifoRelaxed(2),
		WGPUPresentMode_Immediate(3),
		WGPUPresentMode_Mailbox(4),
		WGPUPresentMode_Force32(2147483647);
		WGPUPresentMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUPresentMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUPresentMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUPrimitiveTopology implements IntValuedEnum<WGPUPrimitiveTopology > {
		WGPUPrimitiveTopology_Undefined(0),
		WGPUPrimitiveTopology_PointList(1),
		WGPUPrimitiveTopology_LineList(2),
		WGPUPrimitiveTopology_LineStrip(3),
		WGPUPrimitiveTopology_TriangleList(4),
		WGPUPrimitiveTopology_TriangleStrip(5),
		WGPUPrimitiveTopology_Force32(2147483647);
		WGPUPrimitiveTopology(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUPrimitiveTopology > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUPrimitiveTopology > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUQueryType implements IntValuedEnum<WGPUQueryType > {
		WGPUQueryType_Occlusion(1),
		WGPUQueryType_Timestamp(2),
		WGPUQueryType_Force32(2147483647);
		WGPUQueryType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUQueryType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUQueryType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUQueueWorkDoneStatus implements IntValuedEnum<WGPUQueueWorkDoneStatus > {
		WGPUQueueWorkDoneStatus_Success(1),
		WGPUQueueWorkDoneStatus_InstanceDropped(2),
		WGPUQueueWorkDoneStatus_Error(3),
		WGPUQueueWorkDoneStatus_Unknown(4),
		WGPUQueueWorkDoneStatus_DeviceLost(5),
		WGPUQueueWorkDoneStatus_Force32(2147483647);
		WGPUQueueWorkDoneStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUQueueWorkDoneStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUQueueWorkDoneStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPURequestAdapterStatus implements IntValuedEnum<WGPURequestAdapterStatus > {
		WGPURequestAdapterStatus_Success(1),
		WGPURequestAdapterStatus_InstanceDropped(2),
		WGPURequestAdapterStatus_Unavailable(3),
		WGPURequestAdapterStatus_Error(4),
		WGPURequestAdapterStatus_Unknown(5),
		WGPURequestAdapterStatus_Force32(2147483647);
		WGPURequestAdapterStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPURequestAdapterStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPURequestAdapterStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPURequestDeviceStatus implements IntValuedEnum<WGPURequestDeviceStatus > {
		WGPURequestDeviceStatus_Success(1),
		WGPURequestDeviceStatus_InstanceDropped(2),
		WGPURequestDeviceStatus_Error(3),
		WGPURequestDeviceStatus_Unknown(4),
		WGPURequestDeviceStatus_Force32(2147483647);
		WGPURequestDeviceStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPURequestDeviceStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPURequestDeviceStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUSType implements IntValuedEnum<WGPUSType > {
		WGPUSType_ShaderModuleSPIRVDescriptor(1),
		WGPUSType_ShaderModuleWGSLDescriptor(2),
		WGPUSType_PrimitiveDepthClipControl(3),
		WGPUSType_RenderPassDescriptorMaxDrawCount(4),
		WGPUSType_RenderPassDescriptorExpandResolveRect(5),
		WGPUSType_TextureBindingViewDimensionDescriptor(131072),
		WGPUSType_SurfaceDescriptorFromCanvasHTMLSelector(262144),
		WGPUSType_SurfaceDescriptorFromMetalLayer(65536),
		WGPUSType_SurfaceDescriptorFromWindowsHWND(65537),
		WGPUSType_SurfaceDescriptorFromXlibWindow(65538),
		WGPUSType_SurfaceDescriptorFromWaylandSurface(65539),
		WGPUSType_SurfaceDescriptorFromAndroidNativeWindow(65540),
		WGPUSType_SurfaceDescriptorFromXcbWindow(65541),
		WGPUSType_SurfaceDescriptorFromWindowsCoreWindow(327680),
		WGPUSType_ExternalTextureBindingEntry(327681),
		WGPUSType_ExternalTextureBindingLayout(327682),
		WGPUSType_SurfaceDescriptorFromWindowsSwapChainPanel(327683),
		WGPUSType_DepthStencilStateDepthWriteDefinedDawn(327684),
		WGPUSType_DawnTextureInternalUsageDescriptor(327685),
		WGPUSType_DawnEncoderInternalUsageDescriptor(327686),
		WGPUSType_DawnInstanceDescriptor(327687),
		WGPUSType_DawnCacheDeviceDescriptor(327688),
		WGPUSType_DawnAdapterPropertiesPowerPreference(327689),
		WGPUSType_DawnBufferDescriptorErrorInfoFromWireClient(327690),
		WGPUSType_DawnTogglesDescriptor(327691),
		WGPUSType_DawnShaderModuleSPIRVOptionsDescriptor(327692),
		WGPUSType_RequestAdapterOptionsLUID(327693),
		WGPUSType_RequestAdapterOptionsGetGLProc(327694),
		WGPUSType_RequestAdapterOptionsD3D11Device(327695),
		WGPUSType_DawnRenderPassColorAttachmentRenderToSingleSampled(327696),
		WGPUSType_RenderPassPixelLocalStorage(327697),
		WGPUSType_PipelineLayoutPixelLocalStorage(327698),
		WGPUSType_BufferHostMappedPointer(327699),
		WGPUSType_DawnExperimentalSubgroupLimits(327700),
		WGPUSType_AdapterPropertiesMemoryHeaps(327701),
		WGPUSType_AdapterPropertiesD3D(327702),
		WGPUSType_AdapterPropertiesVk(327703),
		WGPUSType_DawnComputePipelineFullSubgroups(327704),
		WGPUSType_DawnWireWGSLControl(327705),
		WGPUSType_DawnWGSLBlocklist(327706),
		WGPUSType_DrmFormatCapabilities(327707),
		WGPUSType_ShaderModuleCompilationOptions(327708),
		WGPUSType_ColorTargetStateExpandResolveTextureDawn(327709),
		WGPUSType_SharedTextureMemoryVkDedicatedAllocationDescriptor(327710),
		WGPUSType_SharedTextureMemoryAHardwareBufferDescriptor(327711),
		WGPUSType_SharedTextureMemoryDmaBufDescriptor(327712),
		WGPUSType_SharedTextureMemoryOpaqueFDDescriptor(327713),
		WGPUSType_SharedTextureMemoryZirconHandleDescriptor(327714),
		WGPUSType_SharedTextureMemoryDXGISharedHandleDescriptor(327715),
		WGPUSType_SharedTextureMemoryD3D11Texture2DDescriptor(327716),
		WGPUSType_SharedTextureMemoryIOSurfaceDescriptor(327717),
		WGPUSType_SharedTextureMemoryEGLImageDescriptor(327718),
		WGPUSType_SharedTextureMemoryInitializedBeginState(327719),
		WGPUSType_SharedTextureMemoryInitializedEndState(327720),
		WGPUSType_SharedTextureMemoryVkImageLayoutBeginState(327721),
		WGPUSType_SharedTextureMemoryVkImageLayoutEndState(327722),
		WGPUSType_SharedTextureMemoryD3DSwapchainBeginState(327723),
		WGPUSType_SharedFenceVkSemaphoreOpaqueFDDescriptor(327724),
		WGPUSType_SharedFenceVkSemaphoreOpaqueFDExportInfo(327725),
		WGPUSType_SharedFenceVkSemaphoreSyncFDDescriptor(327726),
		WGPUSType_SharedFenceVkSemaphoreSyncFDExportInfo(327727),
		WGPUSType_SharedFenceVkSemaphoreZirconHandleDescriptor(327728),
		WGPUSType_SharedFenceVkSemaphoreZirconHandleExportInfo(327729),
		WGPUSType_SharedFenceDXGISharedHandleDescriptor(327730),
		WGPUSType_SharedFenceDXGISharedHandleExportInfo(327731),
		WGPUSType_SharedFenceMTLSharedEventDescriptor(327732),
		WGPUSType_SharedFenceMTLSharedEventExportInfo(327733),
		WGPUSType_SharedBufferMemoryD3D12ResourceDescriptor(327734),
		WGPUSType_StaticSamplerBindingLayout(327735),
		WGPUSType_YCbCrVkDescriptor(327736),
		WGPUSType_SharedTextureMemoryAHardwareBufferProperties(327737),
		WGPUSType_AHardwareBufferProperties(327738),
		WGPUSType_Force32(2147483647);
		WGPUSType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUSType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUSType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUSamplerBindingType implements IntValuedEnum<WGPUSamplerBindingType > {
		WGPUSamplerBindingType_Undefined(0),
		WGPUSamplerBindingType_Filtering(1),
		WGPUSamplerBindingType_NonFiltering(2),
		WGPUSamplerBindingType_Comparison(3),
		WGPUSamplerBindingType_Force32(2147483647);
		WGPUSamplerBindingType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUSamplerBindingType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUSamplerBindingType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUSharedFenceType implements IntValuedEnum<WGPUSharedFenceType > {
		WGPUSharedFenceType_VkSemaphoreOpaqueFD(1),
		WGPUSharedFenceType_VkSemaphoreSyncFD(2),
		WGPUSharedFenceType_VkSemaphoreZirconHandle(3),
		WGPUSharedFenceType_DXGISharedHandle(4),
		WGPUSharedFenceType_MTLSharedEvent(5),
		WGPUSharedFenceType_Force32(2147483647);
		WGPUSharedFenceType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUSharedFenceType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUSharedFenceType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUStatus implements IntValuedEnum<WGPUStatus > {
		WGPUStatus_Success(1),
		WGPUStatus_Error(2),
		WGPUStatus_Force32(2147483647);
		WGPUStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUStencilOperation implements IntValuedEnum<WGPUStencilOperation > {
		WGPUStencilOperation_Undefined(0),
		WGPUStencilOperation_Keep(1),
		WGPUStencilOperation_Zero(2),
		WGPUStencilOperation_Replace(3),
		WGPUStencilOperation_Invert(4),
		WGPUStencilOperation_IncrementClamp(5),
		WGPUStencilOperation_DecrementClamp(6),
		WGPUStencilOperation_IncrementWrap(7),
		WGPUStencilOperation_DecrementWrap(8),
		WGPUStencilOperation_Force32(2147483647);
		WGPUStencilOperation(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUStencilOperation > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUStencilOperation > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUStorageTextureAccess implements IntValuedEnum<WGPUStorageTextureAccess > {
		WGPUStorageTextureAccess_Undefined(0),
		WGPUStorageTextureAccess_WriteOnly(1),
		WGPUStorageTextureAccess_ReadOnly(2),
		WGPUStorageTextureAccess_ReadWrite(3),
		WGPUStorageTextureAccess_Force32(2147483647);
		WGPUStorageTextureAccess(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUStorageTextureAccess > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUStorageTextureAccess > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUStoreOp implements IntValuedEnum<WGPUStoreOp > {
		WGPUStoreOp_Undefined(0),
		WGPUStoreOp_Store(1),
		WGPUStoreOp_Discard(2),
		WGPUStoreOp_Force32(2147483647);
		WGPUStoreOp(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUStoreOp > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUStoreOp > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUSurfaceGetCurrentTextureStatus implements IntValuedEnum<WGPUSurfaceGetCurrentTextureStatus > {
		WGPUSurfaceGetCurrentTextureStatus_Success(1),
		WGPUSurfaceGetCurrentTextureStatus_Timeout(2),
		WGPUSurfaceGetCurrentTextureStatus_Outdated(3),
		WGPUSurfaceGetCurrentTextureStatus_Lost(4),
		WGPUSurfaceGetCurrentTextureStatus_OutOfMemory(5),
		WGPUSurfaceGetCurrentTextureStatus_DeviceLost(6),
		WGPUSurfaceGetCurrentTextureStatus_Error(7),
		WGPUSurfaceGetCurrentTextureStatus_Force32(2147483647);
		WGPUSurfaceGetCurrentTextureStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUSurfaceGetCurrentTextureStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUSurfaceGetCurrentTextureStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUTextureAspect implements IntValuedEnum<WGPUTextureAspect > {
		WGPUTextureAspect_Undefined(0),
		WGPUTextureAspect_All(1),
		WGPUTextureAspect_StencilOnly(2),
		WGPUTextureAspect_DepthOnly(3),
		WGPUTextureAspect_Plane0Only(327680),
		WGPUTextureAspect_Plane1Only(327681),
		WGPUTextureAspect_Plane2Only(327682),
		WGPUTextureAspect_Force32(2147483647);
		WGPUTextureAspect(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUTextureAspect > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUTextureAspect > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUTextureDimension implements IntValuedEnum<WGPUTextureDimension > {
		WGPUTextureDimension_Undefined(0),
		WGPUTextureDimension_1D(1),
		WGPUTextureDimension_2D(2),
		WGPUTextureDimension_3D(3),
		WGPUTextureDimension_Force32(2147483647);
		WGPUTextureDimension(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUTextureDimension > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUTextureDimension > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUTextureFormat implements IntValuedEnum<WGPUTextureFormat > {
		WGPUTextureFormat_Undefined(0),
		WGPUTextureFormat_R8Unorm(1),
		WGPUTextureFormat_R8Snorm(2),
		WGPUTextureFormat_R8Uint(3),
		WGPUTextureFormat_R8Sint(4),
		WGPUTextureFormat_R16Uint(5),
		WGPUTextureFormat_R16Sint(6),
		WGPUTextureFormat_R16Float(7),
		WGPUTextureFormat_RG8Unorm(8),
		WGPUTextureFormat_RG8Snorm(9),
		WGPUTextureFormat_RG8Uint(10),
		WGPUTextureFormat_RG8Sint(11),
		WGPUTextureFormat_R32Float(12),
		WGPUTextureFormat_R32Uint(13),
		WGPUTextureFormat_R32Sint(14),
		WGPUTextureFormat_RG16Uint(15),
		WGPUTextureFormat_RG16Sint(16),
		WGPUTextureFormat_RG16Float(17),
		WGPUTextureFormat_RGBA8Unorm(18),
		WGPUTextureFormat_RGBA8UnormSrgb(19),
		WGPUTextureFormat_RGBA8Snorm(20),
		WGPUTextureFormat_RGBA8Uint(21),
		WGPUTextureFormat_RGBA8Sint(22),
		WGPUTextureFormat_BGRA8Unorm(23),
		WGPUTextureFormat_BGRA8UnormSrgb(24),
		WGPUTextureFormat_RGB10A2Uint(25),
		WGPUTextureFormat_RGB10A2Unorm(26),
		WGPUTextureFormat_RG11B10Ufloat(27),
		WGPUTextureFormat_RGB9E5Ufloat(28),
		WGPUTextureFormat_RG32Float(29),
		WGPUTextureFormat_RG32Uint(30),
		WGPUTextureFormat_RG32Sint(31),
		WGPUTextureFormat_RGBA16Uint(32),
		WGPUTextureFormat_RGBA16Sint(33),
		WGPUTextureFormat_RGBA16Float(34),
		WGPUTextureFormat_RGBA32Float(35),
		WGPUTextureFormat_RGBA32Uint(36),
		WGPUTextureFormat_RGBA32Sint(37),
		WGPUTextureFormat_Stencil8(38),
		WGPUTextureFormat_Depth16Unorm(39),
		WGPUTextureFormat_Depth24Plus(40),
		WGPUTextureFormat_Depth24PlusStencil8(41),
		WGPUTextureFormat_Depth32Float(42),
		WGPUTextureFormat_Depth32FloatStencil8(43),
		WGPUTextureFormat_BC1RGBAUnorm(44),
		WGPUTextureFormat_BC1RGBAUnormSrgb(45),
		WGPUTextureFormat_BC2RGBAUnorm(46),
		WGPUTextureFormat_BC2RGBAUnormSrgb(47),
		WGPUTextureFormat_BC3RGBAUnorm(48),
		WGPUTextureFormat_BC3RGBAUnormSrgb(49),
		WGPUTextureFormat_BC4RUnorm(50),
		WGPUTextureFormat_BC4RSnorm(51),
		WGPUTextureFormat_BC5RGUnorm(52),
		WGPUTextureFormat_BC5RGSnorm(53),
		WGPUTextureFormat_BC6HRGBUfloat(54),
		WGPUTextureFormat_BC6HRGBFloat(55),
		WGPUTextureFormat_BC7RGBAUnorm(56),
		WGPUTextureFormat_BC7RGBAUnormSrgb(57),
		WGPUTextureFormat_ETC2RGB8Unorm(58),
		WGPUTextureFormat_ETC2RGB8UnormSrgb(59),
		WGPUTextureFormat_ETC2RGB8A1Unorm(60),
		WGPUTextureFormat_ETC2RGB8A1UnormSrgb(61),
		WGPUTextureFormat_ETC2RGBA8Unorm(62),
		WGPUTextureFormat_ETC2RGBA8UnormSrgb(63),
		WGPUTextureFormat_EACR11Unorm(64),
		WGPUTextureFormat_EACR11Snorm(65),
		WGPUTextureFormat_EACRG11Unorm(66),
		WGPUTextureFormat_EACRG11Snorm(67),
		WGPUTextureFormat_ASTC4x4Unorm(68),
		WGPUTextureFormat_ASTC4x4UnormSrgb(69),
		WGPUTextureFormat_ASTC5x4Unorm(70),
		WGPUTextureFormat_ASTC5x4UnormSrgb(71),
		WGPUTextureFormat_ASTC5x5Unorm(72),
		WGPUTextureFormat_ASTC5x5UnormSrgb(73),
		WGPUTextureFormat_ASTC6x5Unorm(74),
		WGPUTextureFormat_ASTC6x5UnormSrgb(75),
		WGPUTextureFormat_ASTC6x6Unorm(76),
		WGPUTextureFormat_ASTC6x6UnormSrgb(77),
		WGPUTextureFormat_ASTC8x5Unorm(78),
		WGPUTextureFormat_ASTC8x5UnormSrgb(79),
		WGPUTextureFormat_ASTC8x6Unorm(80),
		WGPUTextureFormat_ASTC8x6UnormSrgb(81),
		WGPUTextureFormat_ASTC8x8Unorm(82),
		WGPUTextureFormat_ASTC8x8UnormSrgb(83),
		WGPUTextureFormat_ASTC10x5Unorm(84),
		WGPUTextureFormat_ASTC10x5UnormSrgb(85),
		WGPUTextureFormat_ASTC10x6Unorm(86),
		WGPUTextureFormat_ASTC10x6UnormSrgb(87),
		WGPUTextureFormat_ASTC10x8Unorm(88),
		WGPUTextureFormat_ASTC10x8UnormSrgb(89),
		WGPUTextureFormat_ASTC10x10Unorm(90),
		WGPUTextureFormat_ASTC10x10UnormSrgb(91),
		WGPUTextureFormat_ASTC12x10Unorm(92),
		WGPUTextureFormat_ASTC12x10UnormSrgb(93),
		WGPUTextureFormat_ASTC12x12Unorm(94),
		WGPUTextureFormat_ASTC12x12UnormSrgb(95),
		WGPUTextureFormat_R16Unorm(327680),
		WGPUTextureFormat_RG16Unorm(327681),
		WGPUTextureFormat_RGBA16Unorm(327682),
		WGPUTextureFormat_R16Snorm(327683),
		WGPUTextureFormat_RG16Snorm(327684),
		WGPUTextureFormat_RGBA16Snorm(327685),
		WGPUTextureFormat_R8BG8Biplanar420Unorm(327686),
		WGPUTextureFormat_R10X6BG10X6Biplanar420Unorm(327687),
		WGPUTextureFormat_R8BG8A8Triplanar420Unorm(327688),
		WGPUTextureFormat_R8BG8Biplanar422Unorm(327689),
		WGPUTextureFormat_R8BG8Biplanar444Unorm(327690),
		WGPUTextureFormat_R10X6BG10X6Biplanar422Unorm(327691),
		WGPUTextureFormat_R10X6BG10X6Biplanar444Unorm(327692),
		WGPUTextureFormat_External(327693),
		WGPUTextureFormat_Force32(2147483647);
		WGPUTextureFormat(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUTextureFormat > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUTextureFormat > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUTextureSampleType implements IntValuedEnum<WGPUTextureSampleType > {
		WGPUTextureSampleType_Undefined(0),
		WGPUTextureSampleType_Float(1),
		WGPUTextureSampleType_UnfilterableFloat(2),
		WGPUTextureSampleType_Depth(3),
		WGPUTextureSampleType_Sint(4),
		WGPUTextureSampleType_Uint(5),
		WGPUTextureSampleType_Force32(2147483647);
		WGPUTextureSampleType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUTextureSampleType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUTextureSampleType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUTextureViewDimension implements IntValuedEnum<WGPUTextureViewDimension > {
		WGPUTextureViewDimension_Undefined(0),
		WGPUTextureViewDimension_1D(1),
		WGPUTextureViewDimension_2D(2),
		WGPUTextureViewDimension_2DArray(3),
		WGPUTextureViewDimension_Cube(4),
		WGPUTextureViewDimension_CubeArray(5),
		WGPUTextureViewDimension_3D(6),
		WGPUTextureViewDimension_Force32(2147483647);
		WGPUTextureViewDimension(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUTextureViewDimension > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUTextureViewDimension > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUVertexFormat implements IntValuedEnum<WGPUVertexFormat > {
		WGPUVertexFormat_Uint8x2(1),
		WGPUVertexFormat_Uint8x4(2),
		WGPUVertexFormat_Sint8x2(3),
		WGPUVertexFormat_Sint8x4(4),
		WGPUVertexFormat_Unorm8x2(5),
		WGPUVertexFormat_Unorm8x4(6),
		WGPUVertexFormat_Snorm8x2(7),
		WGPUVertexFormat_Snorm8x4(8),
		WGPUVertexFormat_Uint16x2(9),
		WGPUVertexFormat_Uint16x4(10),
		WGPUVertexFormat_Sint16x2(11),
		WGPUVertexFormat_Sint16x4(12),
		WGPUVertexFormat_Unorm16x2(13),
		WGPUVertexFormat_Unorm16x4(14),
		WGPUVertexFormat_Snorm16x2(15),
		WGPUVertexFormat_Snorm16x4(16),
		WGPUVertexFormat_Float16x2(17),
		WGPUVertexFormat_Float16x4(18),
		WGPUVertexFormat_Float32(19),
		WGPUVertexFormat_Float32x2(20),
		WGPUVertexFormat_Float32x3(21),
		WGPUVertexFormat_Float32x4(22),
		WGPUVertexFormat_Uint32(23),
		WGPUVertexFormat_Uint32x2(24),
		WGPUVertexFormat_Uint32x3(25),
		WGPUVertexFormat_Uint32x4(26),
		WGPUVertexFormat_Sint32(27),
		WGPUVertexFormat_Sint32x2(28),
		WGPUVertexFormat_Sint32x3(29),
		WGPUVertexFormat_Sint32x4(30),
		WGPUVertexFormat_Unorm10_10_10_2(31),
		WGPUVertexFormat_Force32(2147483647);
		WGPUVertexFormat(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUVertexFormat > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUVertexFormat > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUVertexStepMode implements IntValuedEnum<WGPUVertexStepMode > {
		WGPUVertexStepMode_Undefined(0),
		WGPUVertexStepMode_VertexBufferNotUsed(1),
		WGPUVertexStepMode_Vertex(2),
		WGPUVertexStepMode_Instance(3),
		WGPUVertexStepMode_Force32(2147483647);
		WGPUVertexStepMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUVertexStepMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUVertexStepMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public enum WGPUWaitStatus implements IntValuedEnum<WGPUWaitStatus > {
		WGPUWaitStatus_Success(1),
		WGPUWaitStatus_TimedOut(2),
		WGPUWaitStatus_UnsupportedTimeout(3),
		WGPUWaitStatus_UnsupportedCount(4),
		WGPUWaitStatus_UnsupportedMixedSources(5),
		WGPUWaitStatus_Unknown(6),
		WGPUWaitStatus_Force32(2147483647);
		WGPUWaitStatus(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<WGPUWaitStatus > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<WGPUWaitStatus > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public static final long WGPUBufferUsage_None = 0;
	public static final long WGPUBufferUsage_MapRead = 1;
	public static final long WGPUBufferUsage_MapWrite = 2;
	public static final long WGPUBufferUsage_CopySrc = 4;
	public static final long WGPUBufferUsage_CopyDst = 8;
	public static final long WGPUBufferUsage_Index = 16;
	public static final long WGPUBufferUsage_Vertex = 32;
	public static final long WGPUBufferUsage_Uniform = 64;
	public static final long WGPUBufferUsage_Storage = 128;
	public static final long WGPUBufferUsage_Indirect = 256;
	public static final long WGPUBufferUsage_QueryResolve = 512;
	public static final long WGPUColorWriteMask_None = 0;
	public static final long WGPUColorWriteMask_Red = 1;
	public static final long WGPUColorWriteMask_Green = 2;
	public static final long WGPUColorWriteMask_Blue = 4;
	public static final long WGPUColorWriteMask_Alpha = 8;
	public static final long WGPUColorWriteMask_All = 15;
	public static final long WGPUHeapProperty_DeviceLocal = 1;
	public static final long WGPUHeapProperty_HostVisible = 2;
	public static final long WGPUHeapProperty_HostCoherent = 4;
	public static final long WGPUHeapProperty_HostUncached = 8;
	public static final long WGPUHeapProperty_HostCached = 16;
	public static final long WGPUMapMode_None = 0;
	public static final long WGPUMapMode_Read = 1;
	public static final long WGPUMapMode_Write = 2;
	public static final long WGPUShaderStage_None = 0;
	public static final long WGPUShaderStage_Vertex = 1;
	public static final long WGPUShaderStage_Fragment = 2;
	public static final long WGPUShaderStage_Compute = 4;
	public static final long WGPUTextureUsage_None = 0;
	public static final long WGPUTextureUsage_CopySrc = 1;
	public static final long WGPUTextureUsage_CopyDst = 2;
	public static final long WGPUTextureUsage_TextureBinding = 4;
	public static final long WGPUTextureUsage_StorageBinding = 8;
	public static final long WGPUTextureUsage_RenderAttachment = 16;
	public static final long WGPUTextureUsage_TransientAttachment = 32;
	public static final long WGPUTextureUsage_StorageAttachment = 64;
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, 1, 1 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, 1, 1 }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, { {  }, 1, 1 }, {  }, {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, { {  }, 1, 1 }, {  }, {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : {  }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * {  }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { 0, 0, 0 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { 0, 0, 0 }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { 0, 0 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { 0, 0 }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, 0, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, 0, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, 0, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, 0, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, 0, {  }, 0, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, 0, {  }, 0, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, 0, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, 0, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, 1 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, 1 }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, 50000000 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, 50000000 }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  }, {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  }, {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { {  }, {  } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : webgpu.h:0</i><br>
	 * { {  }, {  } }
	 */
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUBufferMapCallback extends Callback<WGPUBufferMapCallback > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUBufferMapAsyncStatus > status, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUCallback extends Callback<WGPUCallback > {
		abstract public void apply(Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUCompilationInfoCallback extends Callback<WGPUCompilationInfoCallback > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUCompilationInfoRequestStatus > status, Pointer<WGPUCompilationInfo > compilationInfo, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUCreateComputePipelineAsyncCallback extends Callback<WGPUCreateComputePipelineAsyncCallback > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUCreatePipelineAsyncStatus > status, WebgpuLibrary.WGPUComputePipeline pipeline, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUCreateRenderPipelineAsyncCallback extends Callback<WGPUCreateRenderPipelineAsyncCallback > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUCreatePipelineAsyncStatus > status, WebgpuLibrary.WGPURenderPipeline pipeline, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUDawnLoadCacheDataFunction extends Callback<WGPUDawnLoadCacheDataFunction > {
		@Ptr 
		abstract public long apply(Pointer<? > key, @Ptr long keySize, Pointer<? > value, @Ptr long valueSize, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUDawnStoreCacheDataFunction extends Callback<WGPUDawnStoreCacheDataFunction > {
		abstract public void apply(Pointer<? > key, @Ptr long keySize, Pointer<? > value, @Ptr long valueSize, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUDeviceLostCallback extends Callback<WGPUDeviceLostCallback > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUDeviceLostReason > reason, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUDeviceLostCallbackNew extends Callback<WGPUDeviceLostCallbackNew > {
		abstract public void apply(Pointer<WebgpuLibrary.WGPUDevice > device, IntValuedEnum<WebgpuLibrary.WGPUDeviceLostReason > reason, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUErrorCallback extends Callback<WGPUErrorCallback > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUErrorType > type, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPULoggingCallback extends Callback<WGPULoggingCallback > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPULoggingType > type, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUPopErrorScopeCallback extends Callback<WGPUPopErrorScopeCallback > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUPopErrorScopeStatus > status, IntValuedEnum<WebgpuLibrary.WGPUErrorType > type, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProc extends Callback<WGPUProc > {
		abstract public void apply();
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUQueueWorkDoneCallback extends Callback<WGPUQueueWorkDoneCallback > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUQueueWorkDoneStatus > status, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPURequestAdapterCallback extends Callback<WGPURequestAdapterCallback > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPURequestAdapterStatus > status, WebgpuLibrary.WGPUAdapter adapter, Pointer<Byte > message, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPURequestDeviceCallback extends Callback<WGPURequestDeviceCallback > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPURequestDeviceStatus > status, WebgpuLibrary.WGPUDevice device, Pointer<Byte > message, Pointer<? > userdata);
	};
	/**
	 * Callback function pointers<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Callback function pointers<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUBufferMapCallback2 extends Callback<WGPUBufferMapCallback2 > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUMapAsyncStatus > status, Pointer<Byte > message, Pointer<? > userdata1, Pointer<? > userdata2);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUCompilationInfoCallback2 extends Callback<WGPUCompilationInfoCallback2 > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUCompilationInfoRequestStatus > status, Pointer<WGPUCompilationInfo > compilationInfo, Pointer<? > userdata1, Pointer<? > userdata2);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUCreateComputePipelineAsyncCallback2 extends Callback<WGPUCreateComputePipelineAsyncCallback2 > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUCreatePipelineAsyncStatus > status, WebgpuLibrary.WGPUComputePipeline pipeline, Pointer<Byte > message, Pointer<? > userdata1, Pointer<? > userdata2);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUCreateRenderPipelineAsyncCallback2 extends Callback<WGPUCreateRenderPipelineAsyncCallback2 > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUCreatePipelineAsyncStatus > status, WebgpuLibrary.WGPURenderPipeline pipeline, Pointer<Byte > message, Pointer<? > userdata1, Pointer<? > userdata2);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUDeviceLostCallback2 extends Callback<WGPUDeviceLostCallback2 > {
		abstract public void apply(Pointer<WebgpuLibrary.WGPUDevice > device, IntValuedEnum<WebgpuLibrary.WGPUDeviceLostReason > reason, Pointer<Byte > message, Pointer<? > userdata1, Pointer<? > userdata2);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUPopErrorScopeCallback2 extends Callback<WGPUPopErrorScopeCallback2 > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUPopErrorScopeStatus > status, IntValuedEnum<WebgpuLibrary.WGPUErrorType > type, Pointer<Byte > message, Pointer<? > userdata1, Pointer<? > userdata2);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUQueueWorkDoneCallback2 extends Callback<WGPUQueueWorkDoneCallback2 > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPUQueueWorkDoneStatus > status, Pointer<? > userdata1, Pointer<? > userdata2);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPURequestAdapterCallback2 extends Callback<WGPURequestAdapterCallback2 > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPURequestAdapterStatus > status, WebgpuLibrary.WGPUAdapter adapter, Pointer<Byte > message, Pointer<? > userdata1, Pointer<? > userdata2);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPURequestDeviceCallback2 extends Callback<WGPURequestDeviceCallback2 > {
		abstract public void apply(IntValuedEnum<WebgpuLibrary.WGPURequestDeviceStatus > status, WebgpuLibrary.WGPUDevice device, Pointer<Byte > message, Pointer<? > userdata1, Pointer<? > userdata2);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUUncapturedErrorCallback extends Callback<WGPUUncapturedErrorCallback > {
		abstract public void apply(Pointer<WebgpuLibrary.WGPUDevice > device, IntValuedEnum<WebgpuLibrary.WGPUErrorType > type, Pointer<Byte > message, Pointer<? > userdata1, Pointer<? > userdata2);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterInfoFreeMembers extends Callback<WGPUProcAdapterInfoFreeMembers > {
		abstract public void apply(WGPUAdapterInfo value);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterPropertiesFreeMembers extends Callback<WGPUProcAdapterPropertiesFreeMembers > {
		abstract public void apply(WGPUAdapterProperties value);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterPropertiesMemoryHeapsFreeMembers extends Callback<WGPUProcAdapterPropertiesMemoryHeapsFreeMembers > {
		abstract public void apply(WGPUAdapterPropertiesMemoryHeaps value);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCreateInstance extends Callback<WGPUProcCreateInstance > {
		abstract public WebgpuLibrary.WGPUInstance apply(Pointer<WGPUInstanceDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDrmFormatCapabilitiesFreeMembers extends Callback<WGPUProcDrmFormatCapabilitiesFreeMembers > {
		abstract public void apply(WGPUDrmFormatCapabilities value);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcGetInstanceFeatures extends Callback<WGPUProcGetInstanceFeatures > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(Pointer<WGPUInstanceFeatures > features);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcGetProcAddress extends Callback<WGPUProcGetProcAddress > {
		abstract public Pointer<WebgpuLibrary.WGPUProc > apply(WebgpuLibrary.WGPUDevice device, Pointer<Byte > procName);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcGetProcAddress2 extends Callback<WGPUProcGetProcAddress2 > {
		abstract public Pointer<WebgpuLibrary.WGPUProc > apply(WebgpuLibrary.WGPUDevice device, WGPUStringView procName);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedBufferMemoryEndAccessStateFreeMembers extends Callback<WGPUProcSharedBufferMemoryEndAccessStateFreeMembers > {
		abstract public void apply(WGPUSharedBufferMemoryEndAccessState value);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedTextureMemoryEndAccessStateFreeMembers extends Callback<WGPUProcSharedTextureMemoryEndAccessStateFreeMembers > {
		abstract public void apply(WGPUSharedTextureMemoryEndAccessState value);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceCapabilitiesFreeMembers extends Callback<WGPUProcSurfaceCapabilitiesFreeMembers > {
		abstract public void apply(WGPUSurfaceCapabilities value);
	};
	/**
	 * Procs of Adapter<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Adapter<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcAdapterCreateDevice extends Callback<WGPUProcAdapterCreateDevice > {
		abstract public WebgpuLibrary.WGPUDevice apply(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUDeviceDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterEnumerateFeatures extends Callback<WGPUProcAdapterEnumerateFeatures > {
		@Ptr 
		abstract public long apply(WebgpuLibrary.WGPUAdapter adapter, Pointer<IntValuedEnum<WebgpuLibrary.WGPUFeatureName > > features);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterGetFormatCapabilities extends Callback<WGPUProcAdapterGetFormatCapabilities > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(WebgpuLibrary.WGPUAdapter adapter, IntValuedEnum<WebgpuLibrary.WGPUTextureFormat > format, Pointer<WGPUFormatCapabilities > capabilities);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterGetInfo extends Callback<WGPUProcAdapterGetInfo > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUAdapterInfo > info);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterGetInstance extends Callback<WGPUProcAdapterGetInstance > {
		abstract public WebgpuLibrary.WGPUInstance apply(WebgpuLibrary.WGPUAdapter adapter);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterGetLimits extends Callback<WGPUProcAdapterGetLimits > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUSupportedLimits > limits);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterGetProperties extends Callback<WGPUProcAdapterGetProperties > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUAdapterProperties > properties);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterHasFeature extends Callback<WGPUProcAdapterHasFeature > {
		abstract public int apply(WebgpuLibrary.WGPUAdapter adapter, IntValuedEnum<WebgpuLibrary.WGPUFeatureName > feature);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterRequestDevice extends Callback<WGPUProcAdapterRequestDevice > {
		abstract public void apply(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUDeviceDescriptor > descriptor, Pointer<WebgpuLibrary.WGPURequestDeviceCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterRequestDevice2 extends Callback<WGPUProcAdapterRequestDevice2 > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUDeviceDescriptor > options, WGPURequestDeviceCallbackInfo2 callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterRequestDeviceF extends Callback<WGPUProcAdapterRequestDeviceF > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUDeviceDescriptor > options, WGPURequestDeviceCallbackInfo callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterAddRef extends Callback<WGPUProcAdapterAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUAdapter adapter);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcAdapterRelease extends Callback<WGPUProcAdapterRelease > {
		abstract public void apply(WebgpuLibrary.WGPUAdapter adapter);
	};
	/**
	 * Procs of BindGroup<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of BindGroup<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcBindGroupSetLabel extends Callback<WGPUProcBindGroupSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUBindGroup bindGroup, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBindGroupSetLabel2 extends Callback<WGPUProcBindGroupSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUBindGroup bindGroup, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBindGroupAddRef extends Callback<WGPUProcBindGroupAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUBindGroup bindGroup);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBindGroupRelease extends Callback<WGPUProcBindGroupRelease > {
		abstract public void apply(WebgpuLibrary.WGPUBindGroup bindGroup);
	};
	/**
	 * Procs of BindGroupLayout<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of BindGroupLayout<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcBindGroupLayoutSetLabel extends Callback<WGPUProcBindGroupLayoutSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUBindGroupLayout bindGroupLayout, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBindGroupLayoutSetLabel2 extends Callback<WGPUProcBindGroupLayoutSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUBindGroupLayout bindGroupLayout, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBindGroupLayoutAddRef extends Callback<WGPUProcBindGroupLayoutAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUBindGroupLayout bindGroupLayout);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBindGroupLayoutRelease extends Callback<WGPUProcBindGroupLayoutRelease > {
		abstract public void apply(WebgpuLibrary.WGPUBindGroupLayout bindGroupLayout);
	};
	/**
	 * Procs of Buffer<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Buffer<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcBufferDestroy extends Callback<WGPUProcBufferDestroy > {
		abstract public void apply(WebgpuLibrary.WGPUBuffer buffer);
	};
	/// <i>native declaration : webgpu.h:3547</i>
	/// <i>native declaration : webgpu.h:3547</i>
	public static abstract class WGPUProcBufferGetConstMappedRange extends Callback<WGPUProcBufferGetConstMappedRange > {
		abstract public Pointer<? > apply(WebgpuLibrary.WGPUBuffer buffer, @Ptr long offset, @Ptr long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferGetMapState extends Callback<WGPUProcBufferGetMapState > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUBufferMapState > apply(WebgpuLibrary.WGPUBuffer buffer);
	};
	/// <i>native declaration : webgpu.h:3549</i>
	/// <i>native declaration : webgpu.h:3549</i>
	public static abstract class WGPUProcBufferGetMappedRange extends Callback<WGPUProcBufferGetMappedRange > {
		abstract public Pointer<? > apply(WebgpuLibrary.WGPUBuffer buffer, @Ptr long offset, @Ptr long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferGetSize extends Callback<WGPUProcBufferGetSize > {
		abstract public long apply(WebgpuLibrary.WGPUBuffer buffer);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferGetUsage extends Callback<WGPUProcBufferGetUsage > {
		abstract public long apply(WebgpuLibrary.WGPUBuffer buffer);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferMapAsync extends Callback<WGPUProcBufferMapAsync > {
		abstract public void apply(WebgpuLibrary.WGPUBuffer buffer, long mode, @Ptr long offset, @Ptr long size, Pointer<WebgpuLibrary.WGPUBufferMapCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferMapAsync2 extends Callback<WGPUProcBufferMapAsync2 > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUBuffer buffer, long mode, @Ptr long offset, @Ptr long size, WGPUBufferMapCallbackInfo2 callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferMapAsyncF extends Callback<WGPUProcBufferMapAsyncF > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUBuffer buffer, long mode, @Ptr long offset, @Ptr long size, WGPUBufferMapCallbackInfo callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferSetLabel extends Callback<WGPUProcBufferSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUBuffer buffer, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferSetLabel2 extends Callback<WGPUProcBufferSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUBuffer buffer, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferUnmap extends Callback<WGPUProcBufferUnmap > {
		abstract public void apply(WebgpuLibrary.WGPUBuffer buffer);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferAddRef extends Callback<WGPUProcBufferAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUBuffer buffer);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcBufferRelease extends Callback<WGPUProcBufferRelease > {
		abstract public void apply(WebgpuLibrary.WGPUBuffer buffer);
	};
	/**
	 * Procs of CommandBuffer<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of CommandBuffer<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcCommandBufferSetLabel extends Callback<WGPUProcCommandBufferSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUCommandBuffer commandBuffer, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandBufferSetLabel2 extends Callback<WGPUProcCommandBufferSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUCommandBuffer commandBuffer, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandBufferAddRef extends Callback<WGPUProcCommandBufferAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUCommandBuffer commandBuffer);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandBufferRelease extends Callback<WGPUProcCommandBufferRelease > {
		abstract public void apply(WebgpuLibrary.WGPUCommandBuffer commandBuffer);
	};
	/**
	 * Procs of CommandEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of CommandEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcCommandEncoderBeginComputePass extends Callback<WGPUProcCommandEncoderBeginComputePass > {
		abstract public WebgpuLibrary.WGPUComputePassEncoder apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUComputePassDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderBeginRenderPass extends Callback<WGPUProcCommandEncoderBeginRenderPass > {
		abstract public WebgpuLibrary.WGPURenderPassEncoder apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPURenderPassDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderClearBuffer extends Callback<WGPUProcCommandEncoderClearBuffer > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WebgpuLibrary.WGPUBuffer buffer, long offset, long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderCopyBufferToBuffer extends Callback<WGPUProcCommandEncoderCopyBufferToBuffer > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WebgpuLibrary.WGPUBuffer source, long sourceOffset, WebgpuLibrary.WGPUBuffer destination, long destinationOffset, long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderCopyBufferToTexture extends Callback<WGPUProcCommandEncoderCopyBufferToTexture > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUImageCopyBuffer > source, Pointer<WGPUImageCopyTexture > destination, Pointer<WGPUExtent3D > copySize);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderCopyTextureToBuffer extends Callback<WGPUProcCommandEncoderCopyTextureToBuffer > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUImageCopyTexture > source, Pointer<WGPUImageCopyBuffer > destination, Pointer<WGPUExtent3D > copySize);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderCopyTextureToTexture extends Callback<WGPUProcCommandEncoderCopyTextureToTexture > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUImageCopyTexture > source, Pointer<WGPUImageCopyTexture > destination, Pointer<WGPUExtent3D > copySize);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderFinish extends Callback<WGPUProcCommandEncoderFinish > {
		abstract public WebgpuLibrary.WGPUCommandBuffer apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUCommandBufferDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderInjectValidationError extends Callback<WGPUProcCommandEncoderInjectValidationError > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > message);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderInjectValidationError2 extends Callback<WGPUProcCommandEncoderInjectValidationError2 > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WGPUStringView message);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderInsertDebugMarker extends Callback<WGPUProcCommandEncoderInsertDebugMarker > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > markerLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderInsertDebugMarker2 extends Callback<WGPUProcCommandEncoderInsertDebugMarker2 > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderPopDebugGroup extends Callback<WGPUProcCommandEncoderPopDebugGroup > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderPushDebugGroup extends Callback<WGPUProcCommandEncoderPushDebugGroup > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > groupLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderPushDebugGroup2 extends Callback<WGPUProcCommandEncoderPushDebugGroup2 > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderResolveQuerySet extends Callback<WGPUProcCommandEncoderResolveQuerySet > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WebgpuLibrary.WGPUQuerySet querySet, int firstQuery, int queryCount, WebgpuLibrary.WGPUBuffer destination, long destinationOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderSetLabel extends Callback<WGPUProcCommandEncoderSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderSetLabel2 extends Callback<WGPUProcCommandEncoderSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderWriteBuffer extends Callback<WGPUProcCommandEncoderWriteBuffer > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WebgpuLibrary.WGPUBuffer buffer, long bufferOffset, Pointer<Byte > data, long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderWriteTimestamp extends Callback<WGPUProcCommandEncoderWriteTimestamp > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WebgpuLibrary.WGPUQuerySet querySet, int queryIndex);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderAddRef extends Callback<WGPUProcCommandEncoderAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcCommandEncoderRelease extends Callback<WGPUProcCommandEncoderRelease > {
		abstract public void apply(WebgpuLibrary.WGPUCommandEncoder commandEncoder);
	};
	/**
	 * Procs of ComputePassEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of ComputePassEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcComputePassEncoderDispatchWorkgroups extends Callback<WGPUProcComputePassEncoderDispatchWorkgroups > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, int workgroupCountX, int workgroupCountY, int workgroupCountZ);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderDispatchWorkgroupsIndirect extends Callback<WGPUProcComputePassEncoderDispatchWorkgroupsIndirect > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderEnd extends Callback<WGPUProcComputePassEncoderEnd > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderInsertDebugMarker extends Callback<WGPUProcComputePassEncoderInsertDebugMarker > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, Pointer<Byte > markerLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderInsertDebugMarker2 extends Callback<WGPUProcComputePassEncoderInsertDebugMarker2 > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderPopDebugGroup extends Callback<WGPUProcComputePassEncoderPopDebugGroup > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderPushDebugGroup extends Callback<WGPUProcComputePassEncoderPushDebugGroup > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, Pointer<Byte > groupLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderPushDebugGroup2 extends Callback<WGPUProcComputePassEncoderPushDebugGroup2 > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderSetBindGroup extends Callback<WGPUProcComputePassEncoderSetBindGroup > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, int groupIndex, WebgpuLibrary.WGPUBindGroup group, @Ptr long dynamicOffsetCount, Pointer<Integer > dynamicOffsets);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderSetLabel extends Callback<WGPUProcComputePassEncoderSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderSetLabel2 extends Callback<WGPUProcComputePassEncoderSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderSetPipeline extends Callback<WGPUProcComputePassEncoderSetPipeline > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, WebgpuLibrary.WGPUComputePipeline pipeline);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderWriteTimestamp extends Callback<WGPUProcComputePassEncoderWriteTimestamp > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, WebgpuLibrary.WGPUQuerySet querySet, int queryIndex);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderAddRef extends Callback<WGPUProcComputePassEncoderAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePassEncoderRelease extends Callback<WGPUProcComputePassEncoderRelease > {
		abstract public void apply(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder);
	};
	/**
	 * Procs of ComputePipeline<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of ComputePipeline<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcComputePipelineGetBindGroupLayout extends Callback<WGPUProcComputePipelineGetBindGroupLayout > {
		abstract public WebgpuLibrary.WGPUBindGroupLayout apply(WebgpuLibrary.WGPUComputePipeline computePipeline, int groupIndex);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePipelineSetLabel extends Callback<WGPUProcComputePipelineSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUComputePipeline computePipeline, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePipelineSetLabel2 extends Callback<WGPUProcComputePipelineSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUComputePipeline computePipeline, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePipelineAddRef extends Callback<WGPUProcComputePipelineAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUComputePipeline computePipeline);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcComputePipelineRelease extends Callback<WGPUProcComputePipelineRelease > {
		abstract public void apply(WebgpuLibrary.WGPUComputePipeline computePipeline);
	};
	/**
	 * Procs of Device<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Device<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcDeviceCreateBindGroup extends Callback<WGPUProcDeviceCreateBindGroup > {
		abstract public WebgpuLibrary.WGPUBindGroup apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUBindGroupDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateBindGroupLayout extends Callback<WGPUProcDeviceCreateBindGroupLayout > {
		abstract public WebgpuLibrary.WGPUBindGroupLayout apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUBindGroupLayoutDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateBuffer extends Callback<WGPUProcDeviceCreateBuffer > {
		abstract public WebgpuLibrary.WGPUBuffer apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUBufferDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateCommandEncoder extends Callback<WGPUProcDeviceCreateCommandEncoder > {
		abstract public WebgpuLibrary.WGPUCommandEncoder apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUCommandEncoderDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateComputePipeline extends Callback<WGPUProcDeviceCreateComputePipeline > {
		abstract public WebgpuLibrary.WGPUComputePipeline apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUComputePipelineDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateComputePipelineAsync extends Callback<WGPUProcDeviceCreateComputePipelineAsync > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUComputePipelineDescriptor > descriptor, Pointer<WebgpuLibrary.WGPUCreateComputePipelineAsyncCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateComputePipelineAsync2 extends Callback<WGPUProcDeviceCreateComputePipelineAsync2 > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUComputePipelineDescriptor > descriptor, WGPUCreateComputePipelineAsyncCallbackInfo2 callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateComputePipelineAsyncF extends Callback<WGPUProcDeviceCreateComputePipelineAsyncF > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUComputePipelineDescriptor > descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateErrorBuffer extends Callback<WGPUProcDeviceCreateErrorBuffer > {
		abstract public WebgpuLibrary.WGPUBuffer apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUBufferDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateErrorExternalTexture extends Callback<WGPUProcDeviceCreateErrorExternalTexture > {
		abstract public WebgpuLibrary.WGPUExternalTexture apply(WebgpuLibrary.WGPUDevice device);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateErrorShaderModule extends Callback<WGPUProcDeviceCreateErrorShaderModule > {
		abstract public WebgpuLibrary.WGPUShaderModule apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUShaderModuleDescriptor > descriptor, Pointer<Byte > errorMessage);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateErrorShaderModule2 extends Callback<WGPUProcDeviceCreateErrorShaderModule2 > {
		abstract public WebgpuLibrary.WGPUShaderModule apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUShaderModuleDescriptor > descriptor, WGPUStringView errorMessage);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateErrorTexture extends Callback<WGPUProcDeviceCreateErrorTexture > {
		abstract public WebgpuLibrary.WGPUTexture apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUTextureDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateExternalTexture extends Callback<WGPUProcDeviceCreateExternalTexture > {
		abstract public WebgpuLibrary.WGPUExternalTexture apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUExternalTextureDescriptor > externalTextureDescriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreatePipelineLayout extends Callback<WGPUProcDeviceCreatePipelineLayout > {
		abstract public WebgpuLibrary.WGPUPipelineLayout apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUPipelineLayoutDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateQuerySet extends Callback<WGPUProcDeviceCreateQuerySet > {
		abstract public WebgpuLibrary.WGPUQuerySet apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUQuerySetDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateRenderBundleEncoder extends Callback<WGPUProcDeviceCreateRenderBundleEncoder > {
		abstract public WebgpuLibrary.WGPURenderBundleEncoder apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPURenderBundleEncoderDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateRenderPipeline extends Callback<WGPUProcDeviceCreateRenderPipeline > {
		abstract public WebgpuLibrary.WGPURenderPipeline apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPURenderPipelineDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateRenderPipelineAsync extends Callback<WGPUProcDeviceCreateRenderPipelineAsync > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPURenderPipelineDescriptor > descriptor, Pointer<WebgpuLibrary.WGPUCreateRenderPipelineAsyncCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateRenderPipelineAsync2 extends Callback<WGPUProcDeviceCreateRenderPipelineAsync2 > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPURenderPipelineDescriptor > descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo2 callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateRenderPipelineAsyncF extends Callback<WGPUProcDeviceCreateRenderPipelineAsyncF > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPURenderPipelineDescriptor > descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateSampler extends Callback<WGPUProcDeviceCreateSampler > {
		abstract public WebgpuLibrary.WGPUSampler apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUSamplerDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateShaderModule extends Callback<WGPUProcDeviceCreateShaderModule > {
		abstract public WebgpuLibrary.WGPUShaderModule apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUShaderModuleDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateSwapChain extends Callback<WGPUProcDeviceCreateSwapChain > {
		abstract public WebgpuLibrary.WGPUSwapChain apply(WebgpuLibrary.WGPUDevice device, WebgpuLibrary.WGPUSurface surface, Pointer<WGPUSwapChainDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceCreateTexture extends Callback<WGPUProcDeviceCreateTexture > {
		abstract public WebgpuLibrary.WGPUTexture apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUTextureDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceDestroy extends Callback<WGPUProcDeviceDestroy > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceEnumerateFeatures extends Callback<WGPUProcDeviceEnumerateFeatures > {
		@Ptr 
		abstract public long apply(WebgpuLibrary.WGPUDevice device, Pointer<IntValuedEnum<WebgpuLibrary.WGPUFeatureName > > features);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceForceLoss extends Callback<WGPUProcDeviceForceLoss > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, IntValuedEnum<WebgpuLibrary.WGPUDeviceLostReason > type, Pointer<Byte > message);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceForceLoss2 extends Callback<WGPUProcDeviceForceLoss2 > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, IntValuedEnum<WebgpuLibrary.WGPUDeviceLostReason > type, WGPUStringView message);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceGetAHardwareBufferProperties extends Callback<WGPUProcDeviceGetAHardwareBufferProperties > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(WebgpuLibrary.WGPUDevice device, Pointer<? > handle, Pointer<WGPUAHardwareBufferProperties > properties);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceGetAdapter extends Callback<WGPUProcDeviceGetAdapter > {
		abstract public WebgpuLibrary.WGPUAdapter apply(WebgpuLibrary.WGPUDevice device);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceGetLimits extends Callback<WGPUProcDeviceGetLimits > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUSupportedLimits > limits);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceGetQueue extends Callback<WGPUProcDeviceGetQueue > {
		abstract public WebgpuLibrary.WGPUQueue apply(WebgpuLibrary.WGPUDevice device);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceGetSupportedSurfaceUsage extends Callback<WGPUProcDeviceGetSupportedSurfaceUsage > {
		abstract public long apply(WebgpuLibrary.WGPUDevice device, WebgpuLibrary.WGPUSurface surface);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceHasFeature extends Callback<WGPUProcDeviceHasFeature > {
		abstract public int apply(WebgpuLibrary.WGPUDevice device, IntValuedEnum<WebgpuLibrary.WGPUFeatureName > feature);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceImportSharedBufferMemory extends Callback<WGPUProcDeviceImportSharedBufferMemory > {
		abstract public WebgpuLibrary.WGPUSharedBufferMemory apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUSharedBufferMemoryDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceImportSharedFence extends Callback<WGPUProcDeviceImportSharedFence > {
		abstract public WebgpuLibrary.WGPUSharedFence apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUSharedFenceDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceImportSharedTextureMemory extends Callback<WGPUProcDeviceImportSharedTextureMemory > {
		abstract public WebgpuLibrary.WGPUSharedTextureMemory apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUSharedTextureMemoryDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceInjectError extends Callback<WGPUProcDeviceInjectError > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, IntValuedEnum<WebgpuLibrary.WGPUErrorType > type, Pointer<Byte > message);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceInjectError2 extends Callback<WGPUProcDeviceInjectError2 > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, IntValuedEnum<WebgpuLibrary.WGPUErrorType > type, WGPUStringView message);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDevicePopErrorScope extends Callback<WGPUProcDevicePopErrorScope > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, Pointer<WebgpuLibrary.WGPUErrorCallback > oldCallback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDevicePopErrorScope2 extends Callback<WGPUProcDevicePopErrorScope2 > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUDevice device, WGPUPopErrorScopeCallbackInfo2 callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDevicePopErrorScopeF extends Callback<WGPUProcDevicePopErrorScopeF > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUDevice device, WGPUPopErrorScopeCallbackInfo callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDevicePushErrorScope extends Callback<WGPUProcDevicePushErrorScope > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, IntValuedEnum<WebgpuLibrary.WGPUErrorFilter > filter);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceSetDeviceLostCallback extends Callback<WGPUProcDeviceSetDeviceLostCallback > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, Pointer<WebgpuLibrary.WGPUDeviceLostCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceSetLabel extends Callback<WGPUProcDeviceSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceSetLabel2 extends Callback<WGPUProcDeviceSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceSetLoggingCallback extends Callback<WGPUProcDeviceSetLoggingCallback > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, Pointer<WebgpuLibrary.WGPULoggingCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceSetUncapturedErrorCallback extends Callback<WGPUProcDeviceSetUncapturedErrorCallback > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, Pointer<WebgpuLibrary.WGPUErrorCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceTick extends Callback<WGPUProcDeviceTick > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceValidateTextureDescriptor extends Callback<WGPUProcDeviceValidateTextureDescriptor > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device, Pointer<WGPUTextureDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceAddRef extends Callback<WGPUProcDeviceAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcDeviceRelease extends Callback<WGPUProcDeviceRelease > {
		abstract public void apply(WebgpuLibrary.WGPUDevice device);
	};
	/**
	 * Procs of ExternalTexture<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of ExternalTexture<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcExternalTextureDestroy extends Callback<WGPUProcExternalTextureDestroy > {
		abstract public void apply(WebgpuLibrary.WGPUExternalTexture externalTexture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcExternalTextureExpire extends Callback<WGPUProcExternalTextureExpire > {
		abstract public void apply(WebgpuLibrary.WGPUExternalTexture externalTexture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcExternalTextureRefresh extends Callback<WGPUProcExternalTextureRefresh > {
		abstract public void apply(WebgpuLibrary.WGPUExternalTexture externalTexture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcExternalTextureSetLabel extends Callback<WGPUProcExternalTextureSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUExternalTexture externalTexture, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcExternalTextureSetLabel2 extends Callback<WGPUProcExternalTextureSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUExternalTexture externalTexture, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcExternalTextureAddRef extends Callback<WGPUProcExternalTextureAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUExternalTexture externalTexture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcExternalTextureRelease extends Callback<WGPUProcExternalTextureRelease > {
		abstract public void apply(WebgpuLibrary.WGPUExternalTexture externalTexture);
	};
	/**
	 * Procs of Instance<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Instance<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcInstanceCreateSurface extends Callback<WGPUProcInstanceCreateSurface > {
		abstract public WebgpuLibrary.WGPUSurface apply(WebgpuLibrary.WGPUInstance instance, Pointer<WGPUSurfaceDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcInstanceEnumerateWGSLLanguageFeatures extends Callback<WGPUProcInstanceEnumerateWGSLLanguageFeatures > {
		@Ptr 
		abstract public long apply(WebgpuLibrary.WGPUInstance instance, Pointer<IntValuedEnum<WebgpuLibrary.WGPUWGSLFeatureName > > features);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcInstanceHasWGSLLanguageFeature extends Callback<WGPUProcInstanceHasWGSLLanguageFeature > {
		abstract public int apply(WebgpuLibrary.WGPUInstance instance, IntValuedEnum<WebgpuLibrary.WGPUWGSLFeatureName > feature);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcInstanceProcessEvents extends Callback<WGPUProcInstanceProcessEvents > {
		abstract public void apply(WebgpuLibrary.WGPUInstance instance);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcInstanceRequestAdapter extends Callback<WGPUProcInstanceRequestAdapter > {
		abstract public void apply(WebgpuLibrary.WGPUInstance instance, Pointer<WGPURequestAdapterOptions > options, Pointer<WebgpuLibrary.WGPURequestAdapterCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcInstanceRequestAdapter2 extends Callback<WGPUProcInstanceRequestAdapter2 > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUInstance instance, Pointer<WGPURequestAdapterOptions > options, WGPURequestAdapterCallbackInfo2 callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcInstanceRequestAdapterF extends Callback<WGPUProcInstanceRequestAdapterF > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUInstance instance, Pointer<WGPURequestAdapterOptions > options, WGPURequestAdapterCallbackInfo callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcInstanceWaitAny extends Callback<WGPUProcInstanceWaitAny > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUWaitStatus > apply(WebgpuLibrary.WGPUInstance instance, @Ptr long futureCount, Pointer<WGPUFutureWaitInfo > futures, long timeoutNS);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcInstanceAddRef extends Callback<WGPUProcInstanceAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUInstance instance);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcInstanceRelease extends Callback<WGPUProcInstanceRelease > {
		abstract public void apply(WebgpuLibrary.WGPUInstance instance);
	};
	/**
	 * Procs of PipelineLayout<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of PipelineLayout<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcPipelineLayoutSetLabel extends Callback<WGPUProcPipelineLayoutSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUPipelineLayout pipelineLayout, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcPipelineLayoutSetLabel2 extends Callback<WGPUProcPipelineLayoutSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUPipelineLayout pipelineLayout, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcPipelineLayoutAddRef extends Callback<WGPUProcPipelineLayoutAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUPipelineLayout pipelineLayout);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcPipelineLayoutRelease extends Callback<WGPUProcPipelineLayoutRelease > {
		abstract public void apply(WebgpuLibrary.WGPUPipelineLayout pipelineLayout);
	};
	/**
	 * Procs of QuerySet<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of QuerySet<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcQuerySetDestroy extends Callback<WGPUProcQuerySetDestroy > {
		abstract public void apply(WebgpuLibrary.WGPUQuerySet querySet);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQuerySetGetCount extends Callback<WGPUProcQuerySetGetCount > {
		abstract public int apply(WebgpuLibrary.WGPUQuerySet querySet);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQuerySetGetType extends Callback<WGPUProcQuerySetGetType > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUQueryType > apply(WebgpuLibrary.WGPUQuerySet querySet);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQuerySetSetLabel extends Callback<WGPUProcQuerySetSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUQuerySet querySet, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQuerySetSetLabel2 extends Callback<WGPUProcQuerySetSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUQuerySet querySet, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQuerySetAddRef extends Callback<WGPUProcQuerySetAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUQuerySet querySet);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQuerySetRelease extends Callback<WGPUProcQuerySetRelease > {
		abstract public void apply(WebgpuLibrary.WGPUQuerySet querySet);
	};
	/**
	 * Procs of Queue<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Queue<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcQueueCopyExternalTextureForBrowser extends Callback<WGPUProcQueueCopyExternalTextureForBrowser > {
		abstract public void apply(WebgpuLibrary.WGPUQueue queue, Pointer<WGPUImageCopyExternalTexture > source, Pointer<WGPUImageCopyTexture > destination, Pointer<WGPUExtent3D > copySize, Pointer<WGPUCopyTextureForBrowserOptions > options);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueCopyTextureForBrowser extends Callback<WGPUProcQueueCopyTextureForBrowser > {
		abstract public void apply(WebgpuLibrary.WGPUQueue queue, Pointer<WGPUImageCopyTexture > source, Pointer<WGPUImageCopyTexture > destination, Pointer<WGPUExtent3D > copySize, Pointer<WGPUCopyTextureForBrowserOptions > options);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueOnSubmittedWorkDone extends Callback<WGPUProcQueueOnSubmittedWorkDone > {
		abstract public void apply(WebgpuLibrary.WGPUQueue queue, Pointer<WebgpuLibrary.WGPUQueueWorkDoneCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueOnSubmittedWorkDone2 extends Callback<WGPUProcQueueOnSubmittedWorkDone2 > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo2 callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueOnSubmittedWorkDoneF extends Callback<WGPUProcQueueOnSubmittedWorkDoneF > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueSetLabel extends Callback<WGPUProcQueueSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUQueue queue, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueSetLabel2 extends Callback<WGPUProcQueueSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUQueue queue, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueSubmit extends Callback<WGPUProcQueueSubmit > {
		abstract public void apply(WebgpuLibrary.WGPUQueue queue, @Ptr long commandCount, Pointer<WebgpuLibrary.WGPUCommandBuffer > commands);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueWriteBuffer extends Callback<WGPUProcQueueWriteBuffer > {
		abstract public void apply(WebgpuLibrary.WGPUQueue queue, WebgpuLibrary.WGPUBuffer buffer, long bufferOffset, Pointer<? > data, @Ptr long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueWriteTexture extends Callback<WGPUProcQueueWriteTexture > {
		abstract public void apply(WebgpuLibrary.WGPUQueue queue, Pointer<WGPUImageCopyTexture > destination, Pointer<? > data, @Ptr long dataSize, Pointer<WGPUTextureDataLayout > dataLayout, Pointer<WGPUExtent3D > writeSize);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueAddRef extends Callback<WGPUProcQueueAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUQueue queue);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcQueueRelease extends Callback<WGPUProcQueueRelease > {
		abstract public void apply(WebgpuLibrary.WGPUQueue queue);
	};
	/**
	 * Procs of RenderBundle<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of RenderBundle<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcRenderBundleSetLabel extends Callback<WGPUProcRenderBundleSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundle renderBundle, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleSetLabel2 extends Callback<WGPUProcRenderBundleSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundle renderBundle, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleAddRef extends Callback<WGPUProcRenderBundleAddRef > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundle renderBundle);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleRelease extends Callback<WGPUProcRenderBundleRelease > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundle renderBundle);
	};
	/**
	 * Procs of RenderBundleEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of RenderBundleEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcRenderBundleEncoderDraw extends Callback<WGPUProcRenderBundleEncoderDraw > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int vertexCount, int instanceCount, int firstVertex, int firstInstance);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderDrawIndexed extends Callback<WGPUProcRenderBundleEncoderDrawIndexed > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderDrawIndexedIndirect extends Callback<WGPUProcRenderBundleEncoderDrawIndexedIndirect > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderDrawIndirect extends Callback<WGPUProcRenderBundleEncoderDrawIndirect > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderFinish extends Callback<WGPUProcRenderBundleEncoderFinish > {
		abstract public WebgpuLibrary.WGPURenderBundle apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<WGPURenderBundleDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderInsertDebugMarker extends Callback<WGPUProcRenderBundleEncoderInsertDebugMarker > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<Byte > markerLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderInsertDebugMarker2 extends Callback<WGPUProcRenderBundleEncoderInsertDebugMarker2 > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderPopDebugGroup extends Callback<WGPUProcRenderBundleEncoderPopDebugGroup > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderPushDebugGroup extends Callback<WGPUProcRenderBundleEncoderPushDebugGroup > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<Byte > groupLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderPushDebugGroup2 extends Callback<WGPUProcRenderBundleEncoderPushDebugGroup2 > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderSetBindGroup extends Callback<WGPUProcRenderBundleEncoderSetBindGroup > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int groupIndex, WebgpuLibrary.WGPUBindGroup group, @Ptr long dynamicOffsetCount, Pointer<Integer > dynamicOffsets);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderSetIndexBuffer extends Callback<WGPUProcRenderBundleEncoderSetIndexBuffer > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WebgpuLibrary.WGPUBuffer buffer, IntValuedEnum<WebgpuLibrary.WGPUIndexFormat > format, long offset, long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderSetLabel extends Callback<WGPUProcRenderBundleEncoderSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderSetLabel2 extends Callback<WGPUProcRenderBundleEncoderSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderSetPipeline extends Callback<WGPUProcRenderBundleEncoderSetPipeline > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WebgpuLibrary.WGPURenderPipeline pipeline);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderSetVertexBuffer extends Callback<WGPUProcRenderBundleEncoderSetVertexBuffer > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int slot, WebgpuLibrary.WGPUBuffer buffer, long offset, long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderAddRef extends Callback<WGPUProcRenderBundleEncoderAddRef > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderBundleEncoderRelease extends Callback<WGPUProcRenderBundleEncoderRelease > {
		abstract public void apply(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder);
	};
	/**
	 * Procs of RenderPassEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of RenderPassEncoder<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcRenderPassEncoderBeginOcclusionQuery extends Callback<WGPUProcRenderPassEncoderBeginOcclusionQuery > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int queryIndex);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderDraw extends Callback<WGPUProcRenderPassEncoderDraw > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int vertexCount, int instanceCount, int firstVertex, int firstInstance);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderDrawIndexed extends Callback<WGPUProcRenderPassEncoderDrawIndexed > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderDrawIndexedIndirect extends Callback<WGPUProcRenderPassEncoderDrawIndexedIndirect > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderDrawIndirect extends Callback<WGPUProcRenderPassEncoderDrawIndirect > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderEnd extends Callback<WGPUProcRenderPassEncoderEnd > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderEndOcclusionQuery extends Callback<WGPUProcRenderPassEncoderEndOcclusionQuery > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderExecuteBundles extends Callback<WGPUProcRenderPassEncoderExecuteBundles > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, @Ptr long bundleCount, Pointer<WebgpuLibrary.WGPURenderBundle > bundles);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderInsertDebugMarker extends Callback<WGPUProcRenderPassEncoderInsertDebugMarker > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<Byte > markerLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderInsertDebugMarker2 extends Callback<WGPUProcRenderPassEncoderInsertDebugMarker2 > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WGPUStringView markerLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderMultiDrawIndexedIndirect extends Callback<WGPUProcRenderPassEncoderMultiDrawIndexedIndirect > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset, int maxDrawCount, WebgpuLibrary.WGPUBuffer drawCountBuffer, long drawCountBufferOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderMultiDrawIndirect extends Callback<WGPUProcRenderPassEncoderMultiDrawIndirect > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset, int maxDrawCount, WebgpuLibrary.WGPUBuffer drawCountBuffer, long drawCountBufferOffset);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderPixelLocalStorageBarrier extends Callback<WGPUProcRenderPassEncoderPixelLocalStorageBarrier > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderPopDebugGroup extends Callback<WGPUProcRenderPassEncoderPopDebugGroup > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderPushDebugGroup extends Callback<WGPUProcRenderPassEncoderPushDebugGroup > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<Byte > groupLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderPushDebugGroup2 extends Callback<WGPUProcRenderPassEncoderPushDebugGroup2 > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WGPUStringView groupLabel);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetBindGroup extends Callback<WGPUProcRenderPassEncoderSetBindGroup > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int groupIndex, WebgpuLibrary.WGPUBindGroup group, @Ptr long dynamicOffsetCount, Pointer<Integer > dynamicOffsets);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetBlendConstant extends Callback<WGPUProcRenderPassEncoderSetBlendConstant > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<WGPUColor > color);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetIndexBuffer extends Callback<WGPUProcRenderPassEncoderSetIndexBuffer > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPUBuffer buffer, IntValuedEnum<WebgpuLibrary.WGPUIndexFormat > format, long offset, long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetLabel extends Callback<WGPUProcRenderPassEncoderSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetLabel2 extends Callback<WGPUProcRenderPassEncoderSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetPipeline extends Callback<WGPUProcRenderPassEncoderSetPipeline > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPURenderPipeline pipeline);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetScissorRect extends Callback<WGPUProcRenderPassEncoderSetScissorRect > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int x, int y, int width, int height);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetStencilReference extends Callback<WGPUProcRenderPassEncoderSetStencilReference > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int reference);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetVertexBuffer extends Callback<WGPUProcRenderPassEncoderSetVertexBuffer > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int slot, WebgpuLibrary.WGPUBuffer buffer, long offset, long size);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderSetViewport extends Callback<WGPUProcRenderPassEncoderSetViewport > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderWriteTimestamp extends Callback<WGPUProcRenderPassEncoderWriteTimestamp > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPUQuerySet querySet, int queryIndex);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderAddRef extends Callback<WGPUProcRenderPassEncoderAddRef > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPassEncoderRelease extends Callback<WGPUProcRenderPassEncoderRelease > {
		abstract public void apply(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder);
	};
	/**
	 * Procs of RenderPipeline<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of RenderPipeline<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcRenderPipelineGetBindGroupLayout extends Callback<WGPUProcRenderPipelineGetBindGroupLayout > {
		abstract public WebgpuLibrary.WGPUBindGroupLayout apply(WebgpuLibrary.WGPURenderPipeline renderPipeline, int groupIndex);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPipelineSetLabel extends Callback<WGPUProcRenderPipelineSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPURenderPipeline renderPipeline, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPipelineSetLabel2 extends Callback<WGPUProcRenderPipelineSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPURenderPipeline renderPipeline, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPipelineAddRef extends Callback<WGPUProcRenderPipelineAddRef > {
		abstract public void apply(WebgpuLibrary.WGPURenderPipeline renderPipeline);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcRenderPipelineRelease extends Callback<WGPUProcRenderPipelineRelease > {
		abstract public void apply(WebgpuLibrary.WGPURenderPipeline renderPipeline);
	};
	/**
	 * Procs of Sampler<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Sampler<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcSamplerSetLabel extends Callback<WGPUProcSamplerSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUSampler sampler, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSamplerSetLabel2 extends Callback<WGPUProcSamplerSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUSampler sampler, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSamplerAddRef extends Callback<WGPUProcSamplerAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUSampler sampler);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSamplerRelease extends Callback<WGPUProcSamplerRelease > {
		abstract public void apply(WebgpuLibrary.WGPUSampler sampler);
	};
	/**
	 * Procs of ShaderModule<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of ShaderModule<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcShaderModuleGetCompilationInfo extends Callback<WGPUProcShaderModuleGetCompilationInfo > {
		abstract public void apply(WebgpuLibrary.WGPUShaderModule shaderModule, Pointer<WebgpuLibrary.WGPUCompilationInfoCallback > callback, Pointer<? > userdata);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcShaderModuleGetCompilationInfo2 extends Callback<WGPUProcShaderModuleGetCompilationInfo2 > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo2 callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcShaderModuleGetCompilationInfoF extends Callback<WGPUProcShaderModuleGetCompilationInfoF > {
		abstract public WGPUFuture apply(WebgpuLibrary.WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcShaderModuleSetLabel extends Callback<WGPUProcShaderModuleSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUShaderModule shaderModule, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcShaderModuleSetLabel2 extends Callback<WGPUProcShaderModuleSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUShaderModule shaderModule, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcShaderModuleAddRef extends Callback<WGPUProcShaderModuleAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUShaderModule shaderModule);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcShaderModuleRelease extends Callback<WGPUProcShaderModuleRelease > {
		abstract public void apply(WebgpuLibrary.WGPUShaderModule shaderModule);
	};
	/**
	 * Procs of SharedBufferMemory<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of SharedBufferMemory<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcSharedBufferMemoryBeginAccess extends Callback<WGPUProcSharedBufferMemoryBeginAccess > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory, WebgpuLibrary.WGPUBuffer buffer, Pointer<WGPUSharedBufferMemoryBeginAccessDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedBufferMemoryCreateBuffer extends Callback<WGPUProcSharedBufferMemoryCreateBuffer > {
		abstract public WebgpuLibrary.WGPUBuffer apply(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory, Pointer<WGPUBufferDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedBufferMemoryEndAccess extends Callback<WGPUProcSharedBufferMemoryEndAccess > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory, WebgpuLibrary.WGPUBuffer buffer, Pointer<WGPUSharedBufferMemoryEndAccessState > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedBufferMemoryGetProperties extends Callback<WGPUProcSharedBufferMemoryGetProperties > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory, Pointer<WGPUSharedBufferMemoryProperties > properties);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedBufferMemoryIsDeviceLost extends Callback<WGPUProcSharedBufferMemoryIsDeviceLost > {
		abstract public int apply(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedBufferMemorySetLabel extends Callback<WGPUProcSharedBufferMemorySetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedBufferMemorySetLabel2 extends Callback<WGPUProcSharedBufferMemorySetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedBufferMemoryAddRef extends Callback<WGPUProcSharedBufferMemoryAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedBufferMemoryRelease extends Callback<WGPUProcSharedBufferMemoryRelease > {
		abstract public void apply(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory);
	};
	/**
	 * Procs of SharedFence<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of SharedFence<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcSharedFenceExportInfo extends Callback<WGPUProcSharedFenceExportInfo > {
		abstract public void apply(WebgpuLibrary.WGPUSharedFence sharedFence, Pointer<WGPUSharedFenceExportInfo > info);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedFenceAddRef extends Callback<WGPUProcSharedFenceAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUSharedFence sharedFence);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedFenceRelease extends Callback<WGPUProcSharedFenceRelease > {
		abstract public void apply(WebgpuLibrary.WGPUSharedFence sharedFence);
	};
	/**
	 * Procs of SharedTextureMemory<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of SharedTextureMemory<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcSharedTextureMemoryBeginAccess extends Callback<WGPUProcSharedTextureMemoryBeginAccess > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory, WebgpuLibrary.WGPUTexture texture, Pointer<WGPUSharedTextureMemoryBeginAccessDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedTextureMemoryCreateTexture extends Callback<WGPUProcSharedTextureMemoryCreateTexture > {
		abstract public WebgpuLibrary.WGPUTexture apply(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory, Pointer<WGPUTextureDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedTextureMemoryEndAccess extends Callback<WGPUProcSharedTextureMemoryEndAccess > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory, WebgpuLibrary.WGPUTexture texture, Pointer<WGPUSharedTextureMemoryEndAccessState > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedTextureMemoryGetProperties extends Callback<WGPUProcSharedTextureMemoryGetProperties > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory, Pointer<WGPUSharedTextureMemoryProperties > properties);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedTextureMemoryIsDeviceLost extends Callback<WGPUProcSharedTextureMemoryIsDeviceLost > {
		abstract public int apply(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedTextureMemorySetLabel extends Callback<WGPUProcSharedTextureMemorySetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedTextureMemorySetLabel2 extends Callback<WGPUProcSharedTextureMemorySetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedTextureMemoryAddRef extends Callback<WGPUProcSharedTextureMemoryAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSharedTextureMemoryRelease extends Callback<WGPUProcSharedTextureMemoryRelease > {
		abstract public void apply(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory);
	};
	/**
	 * Procs of Surface<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Surface<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcSurfaceConfigure extends Callback<WGPUProcSurfaceConfigure > {
		abstract public void apply(WebgpuLibrary.WGPUSurface surface, Pointer<WGPUSurfaceConfiguration > config);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceGetCapabilities extends Callback<WGPUProcSurfaceGetCapabilities > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUStatus > apply(WebgpuLibrary.WGPUSurface surface, WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUSurfaceCapabilities > capabilities);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceGetCurrentTexture extends Callback<WGPUProcSurfaceGetCurrentTexture > {
		abstract public void apply(WebgpuLibrary.WGPUSurface surface, Pointer<WGPUSurfaceTexture > surfaceTexture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceGetPreferredFormat extends Callback<WGPUProcSurfaceGetPreferredFormat > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUTextureFormat > apply(WebgpuLibrary.WGPUSurface surface, WebgpuLibrary.WGPUAdapter adapter);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfacePresent extends Callback<WGPUProcSurfacePresent > {
		abstract public void apply(WebgpuLibrary.WGPUSurface surface);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceSetLabel extends Callback<WGPUProcSurfaceSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUSurface surface, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceSetLabel2 extends Callback<WGPUProcSurfaceSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUSurface surface, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceUnconfigure extends Callback<WGPUProcSurfaceUnconfigure > {
		abstract public void apply(WebgpuLibrary.WGPUSurface surface);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceAddRef extends Callback<WGPUProcSurfaceAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUSurface surface);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSurfaceRelease extends Callback<WGPUProcSurfaceRelease > {
		abstract public void apply(WebgpuLibrary.WGPUSurface surface);
	};
	/**
	 * Procs of SwapChain<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of SwapChain<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcSwapChainGetCurrentTexture extends Callback<WGPUProcSwapChainGetCurrentTexture > {
		abstract public WebgpuLibrary.WGPUTexture apply(WebgpuLibrary.WGPUSwapChain swapChain);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSwapChainGetCurrentTextureView extends Callback<WGPUProcSwapChainGetCurrentTextureView > {
		abstract public WebgpuLibrary.WGPUTextureView apply(WebgpuLibrary.WGPUSwapChain swapChain);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSwapChainPresent extends Callback<WGPUProcSwapChainPresent > {
		abstract public void apply(WebgpuLibrary.WGPUSwapChain swapChain);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSwapChainAddRef extends Callback<WGPUProcSwapChainAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUSwapChain swapChain);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcSwapChainRelease extends Callback<WGPUProcSwapChainRelease > {
		abstract public void apply(WebgpuLibrary.WGPUSwapChain swapChain);
	};
	/**
	 * Procs of Texture<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of Texture<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcTextureCreateErrorView extends Callback<WGPUProcTextureCreateErrorView > {
		abstract public WebgpuLibrary.WGPUTextureView apply(WebgpuLibrary.WGPUTexture texture, Pointer<WGPUTextureViewDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureCreateView extends Callback<WGPUProcTextureCreateView > {
		abstract public WebgpuLibrary.WGPUTextureView apply(WebgpuLibrary.WGPUTexture texture, Pointer<WGPUTextureViewDescriptor > descriptor);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureDestroy extends Callback<WGPUProcTextureDestroy > {
		abstract public void apply(WebgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetDepthOrArrayLayers extends Callback<WGPUProcTextureGetDepthOrArrayLayers > {
		abstract public int apply(WebgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetDimension extends Callback<WGPUProcTextureGetDimension > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUTextureDimension > apply(WebgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetFormat extends Callback<WGPUProcTextureGetFormat > {
		abstract public IntValuedEnum<WebgpuLibrary.WGPUTextureFormat > apply(WebgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetHeight extends Callback<WGPUProcTextureGetHeight > {
		abstract public int apply(WebgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetMipLevelCount extends Callback<WGPUProcTextureGetMipLevelCount > {
		abstract public int apply(WebgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetSampleCount extends Callback<WGPUProcTextureGetSampleCount > {
		abstract public int apply(WebgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetUsage extends Callback<WGPUProcTextureGetUsage > {
		abstract public long apply(WebgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureGetWidth extends Callback<WGPUProcTextureGetWidth > {
		abstract public int apply(WebgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureSetLabel extends Callback<WGPUProcTextureSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUTexture texture, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureSetLabel2 extends Callback<WGPUProcTextureSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUTexture texture, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureAddRef extends Callback<WGPUProcTextureAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUTexture texture);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureRelease extends Callback<WGPUProcTextureRelease > {
		abstract public void apply(WebgpuLibrary.WGPUTexture texture);
	};
	/**
	 * Procs of TextureView<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	/**
	 * Procs of TextureView<br>
	 * <i>native declaration : webgpu.h</i>
	 */
	public static abstract class WGPUProcTextureViewSetLabel extends Callback<WGPUProcTextureViewSetLabel > {
		abstract public void apply(WebgpuLibrary.WGPUTextureView textureView, Pointer<Byte > label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureViewSetLabel2 extends Callback<WGPUProcTextureViewSetLabel2 > {
		abstract public void apply(WebgpuLibrary.WGPUTextureView textureView, WGPUStringView label);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureViewAddRef extends Callback<WGPUProcTextureViewAddRef > {
		abstract public void apply(WebgpuLibrary.WGPUTextureView textureView);
	};
	/// <i>native declaration : webgpu.h</i>
	/// <i>native declaration : webgpu.h</i>
	public static abstract class WGPUProcTextureViewRelease extends Callback<WGPUProcTextureViewRelease > {
		abstract public void apply(WebgpuLibrary.WGPUTextureView textureView);
	};
	/**
	 * Original signature : <code>void wgpuAdapterInfoFreeMembers(WGPUAdapterInfo)</code><br>
	 * <i>native declaration : webgpu.h:3873</i>
	 */
	native public static void wgpuAdapterInfoFreeMembers(WGPUAdapterInfo value);
	/**
	 * Original signature : <code>void wgpuAdapterPropertiesFreeMembers(WGPUAdapterProperties)</code><br>
	 * <i>native declaration : webgpu.h:3874</i>
	 */
	native public static void wgpuAdapterPropertiesFreeMembers(WGPUAdapterProperties value);
	/**
	 * Original signature : <code>void wgpuAdapterPropertiesMemoryHeapsFreeMembers(WGPUAdapterPropertiesMemoryHeaps)</code><br>
	 * <i>native declaration : webgpu.h:3875</i>
	 */
	native public static void wgpuAdapterPropertiesMemoryHeapsFreeMembers(WGPUAdapterPropertiesMemoryHeaps value);
	/**
	 * Original signature : <code>WGPUInstance wgpuCreateInstance(const WGPUInstanceDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3876</i>
	 */
	public static WebgpuLibrary.WGPUInstance wgpuCreateInstance(Pointer<WGPUInstanceDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUInstance(wgpuCreateInstance(Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuCreateInstance(@Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuDrmFormatCapabilitiesFreeMembers(WGPUDrmFormatCapabilities)</code><br>
	 * <i>native declaration : webgpu.h:3877</i>
	 */
	native public static void wgpuDrmFormatCapabilitiesFreeMembers(WGPUDrmFormatCapabilities value);
	/**
	 * Original signature : <code>WGPUStatus wgpuGetInstanceFeatures(WGPUInstanceFeatures*)</code><br>
	 * <i>native declaration : webgpu.h:3878</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuGetInstanceFeatures(Pointer<WGPUInstanceFeatures > features) {
		return FlagSet.fromValue(wgpuGetInstanceFeatures(Pointer.getPeer(features)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuGetInstanceFeatures(@Ptr long features);
	/**
	 * Original signature : <code>WGPUProc wgpuGetProcAddress(WGPUDevice, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3879</i>
	 */
	public static Pointer<WebgpuLibrary.WGPUProc > wgpuGetProcAddress(WebgpuLibrary.WGPUDevice device, Pointer<Byte > procName) {
		return (Pointer<WGPUProc>) Pointer.pointerToAddress(wgpuGetProcAddress(Pointer.getPeer(device), Pointer.getPeer(procName)));
	}
	@Ptr 
	protected native static long wgpuGetProcAddress(@Ptr long device, @Ptr long procName);
	/**
	 * Original signature : <code>WGPUProc wgpuGetProcAddress2(WGPUDevice, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3880</i>
	 */
	public static Pointer<WebgpuLibrary.WGPUProc > wgpuGetProcAddress2(WebgpuLibrary.WGPUDevice device, WGPUStringView procName) {
		return (Pointer<WGPUProc>) Pointer.pointerToAddress(wgpuGetProcAddress2(Pointer.getPeer(device), procName));
	}
	@Ptr 
	protected native static long wgpuGetProcAddress2(@Ptr long device, WGPUStringView procName);
	/**
	 * Original signature : <code>void wgpuSharedBufferMemoryEndAccessStateFreeMembers(WGPUSharedBufferMemoryEndAccessState)</code><br>
	 * <i>native declaration : webgpu.h:3881</i>
	 */
	native public static void wgpuSharedBufferMemoryEndAccessStateFreeMembers(WGPUSharedBufferMemoryEndAccessState value);
	/**
	 * Original signature : <code>void wgpuSharedTextureMemoryEndAccessStateFreeMembers(WGPUSharedTextureMemoryEndAccessState)</code><br>
	 * <i>native declaration : webgpu.h:3882</i>
	 */
	native public static void wgpuSharedTextureMemoryEndAccessStateFreeMembers(WGPUSharedTextureMemoryEndAccessState value);
	/**
	 * Original signature : <code>void wgpuSurfaceCapabilitiesFreeMembers(WGPUSurfaceCapabilities)</code><br>
	 * <i>native declaration : webgpu.h:3883</i>
	 */
	native public static void wgpuSurfaceCapabilitiesFreeMembers(WGPUSurfaceCapabilities value);
	/**
	 * Methods of Adapter<br>
	 * Original signature : <code>WGPUDevice wgpuAdapterCreateDevice(WGPUAdapter, const WGPUDeviceDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3886</i>
	 */
	public static WebgpuLibrary.WGPUDevice wgpuAdapterCreateDevice(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUDeviceDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUDevice(wgpuAdapterCreateDevice(Pointer.getPeer(adapter), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuAdapterCreateDevice(@Ptr long adapter, @Ptr long descriptor);
	/**
	 * Original signature : <code>size_t wgpuAdapterEnumerateFeatures(WGPUAdapter, WGPUFeatureName*)</code><br>
	 * <i>native declaration : webgpu.h:3887</i>
	 */
	@Ptr 
	public static long wgpuAdapterEnumerateFeatures(WebgpuLibrary.WGPUAdapter adapter, Pointer<IntValuedEnum<WebgpuLibrary.WGPUFeatureName > > features) {
		return wgpuAdapterEnumerateFeatures(Pointer.getPeer(adapter), Pointer.getPeer(features));
	}
	@Ptr 
	protected native static long wgpuAdapterEnumerateFeatures(@Ptr long adapter, @Ptr long features);
	/**
	 * Original signature : <code>WGPUStatus wgpuAdapterGetFormatCapabilities(WGPUAdapter, WGPUTextureFormat, WGPUFormatCapabilities*)</code><br>
	 * <i>native declaration : webgpu.h:3888</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuAdapterGetFormatCapabilities(WebgpuLibrary.WGPUAdapter adapter, IntValuedEnum<WebgpuLibrary.WGPUTextureFormat > format, Pointer<WGPUFormatCapabilities > capabilities) {
		return FlagSet.fromValue(wgpuAdapterGetFormatCapabilities(Pointer.getPeer(adapter), (int)format.value(), Pointer.getPeer(capabilities)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuAdapterGetFormatCapabilities(@Ptr long adapter, int format, @Ptr long capabilities);
	/**
	 * Original signature : <code>WGPUStatus wgpuAdapterGetInfo(WGPUAdapter, WGPUAdapterInfo*)</code><br>
	 * <i>native declaration : webgpu.h:3889</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuAdapterGetInfo(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUAdapterInfo > info) {
		return FlagSet.fromValue(wgpuAdapterGetInfo(Pointer.getPeer(adapter), Pointer.getPeer(info)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuAdapterGetInfo(@Ptr long adapter, @Ptr long info);
	/**
	 * Original signature : <code>WGPUInstance wgpuAdapterGetInstance(WGPUAdapter)</code><br>
	 * <i>native declaration : webgpu.h:3890</i>
	 */
	public static WebgpuLibrary.WGPUInstance wgpuAdapterGetInstance(WebgpuLibrary.WGPUAdapter adapter) {
		return new WebgpuLibrary.WGPUInstance(wgpuAdapterGetInstance(Pointer.getPeer(adapter)));
	}
	@Ptr 
	protected native static long wgpuAdapterGetInstance(@Ptr long adapter);
	/**
	 * Original signature : <code>WGPUStatus wgpuAdapterGetLimits(WGPUAdapter, WGPUSupportedLimits*)</code><br>
	 * <i>native declaration : webgpu.h:3891</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuAdapterGetLimits(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUSupportedLimits > limits) {
		return FlagSet.fromValue(wgpuAdapterGetLimits(Pointer.getPeer(adapter), Pointer.getPeer(limits)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuAdapterGetLimits(@Ptr long adapter, @Ptr long limits);
	/**
	 * Original signature : <code>WGPUStatus wgpuAdapterGetProperties(WGPUAdapter, WGPUAdapterProperties*)</code><br>
	 * <i>native declaration : webgpu.h:3892</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuAdapterGetProperties(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUAdapterProperties > properties) {
		return FlagSet.fromValue(wgpuAdapterGetProperties(Pointer.getPeer(adapter), Pointer.getPeer(properties)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuAdapterGetProperties(@Ptr long adapter, @Ptr long properties);
	/**
	 * Original signature : <code>WGPUBool wgpuAdapterHasFeature(WGPUAdapter, WGPUFeatureName)</code><br>
	 * <i>native declaration : webgpu.h:3893</i>
	 */
	public static int wgpuAdapterHasFeature(WebgpuLibrary.WGPUAdapter adapter, IntValuedEnum<WebgpuLibrary.WGPUFeatureName > feature) {
		return wgpuAdapterHasFeature(Pointer.getPeer(adapter), (int)feature.value());
	}
	protected native static int wgpuAdapterHasFeature(@Ptr long adapter, int feature);
	/**
	 * Original signature : <code>void wgpuAdapterRequestDevice(WGPUAdapter, const WGPUDeviceDescriptor*, WGPURequestDeviceCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:3894</i>
	 */
	public static void wgpuAdapterRequestDevice(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUDeviceDescriptor > descriptor, Pointer<WebgpuLibrary.WGPURequestDeviceCallback > callback, Pointer<? > userdata) {
		wgpuAdapterRequestDevice(Pointer.getPeer(adapter), Pointer.getPeer(descriptor), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuAdapterRequestDevice(@Ptr long adapter, @Ptr long descriptor, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>WGPUFuture wgpuAdapterRequestDevice2(WGPUAdapter, const WGPUDeviceDescriptor*, WGPURequestDeviceCallbackInfo2)</code><br>
	 * <i>native declaration : webgpu.h:3895</i>
	 */
	public static WGPUFuture wgpuAdapterRequestDevice2(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUDeviceDescriptor > options, WGPURequestDeviceCallbackInfo2 callbackInfo) {
		return wgpuAdapterRequestDevice2(Pointer.getPeer(adapter), Pointer.getPeer(options), callbackInfo);
	}
	protected native static WGPUFuture wgpuAdapterRequestDevice2(@Ptr long adapter, @Ptr long options, WGPURequestDeviceCallbackInfo2 callbackInfo);
	/**
	 * Original signature : <code>WGPUFuture wgpuAdapterRequestDeviceF(WGPUAdapter, const WGPUDeviceDescriptor*, WGPURequestDeviceCallbackInfo)</code><br>
	 * <i>native declaration : webgpu.h:3896</i>
	 */
	public static WGPUFuture wgpuAdapterRequestDeviceF(WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUDeviceDescriptor > options, WGPURequestDeviceCallbackInfo callbackInfo) {
		return wgpuAdapterRequestDeviceF(Pointer.getPeer(adapter), Pointer.getPeer(options), callbackInfo);
	}
	protected native static WGPUFuture wgpuAdapterRequestDeviceF(@Ptr long adapter, @Ptr long options, WGPURequestDeviceCallbackInfo callbackInfo);
	/**
	 * Original signature : <code>void wgpuAdapterAddRef(WGPUAdapter)</code><br>
	 * <i>native declaration : webgpu.h:3897</i>
	 */
	public static void wgpuAdapterAddRef(WebgpuLibrary.WGPUAdapter adapter) {
		wgpuAdapterAddRef(Pointer.getPeer(adapter));
	}
	protected native static void wgpuAdapterAddRef(@Ptr long adapter);
	/**
	 * Original signature : <code>void wgpuAdapterRelease(WGPUAdapter)</code><br>
	 * <i>native declaration : webgpu.h:3898</i>
	 */
	public static void wgpuAdapterRelease(WebgpuLibrary.WGPUAdapter adapter) {
		wgpuAdapterRelease(Pointer.getPeer(adapter));
	}
	protected native static void wgpuAdapterRelease(@Ptr long adapter);
	/**
	 * Methods of BindGroup<br>
	 * Original signature : <code>void wgpuBindGroupSetLabel(WGPUBindGroup, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3901</i>
	 */
	public static void wgpuBindGroupSetLabel(WebgpuLibrary.WGPUBindGroup bindGroup, Pointer<Byte > label) {
		wgpuBindGroupSetLabel(Pointer.getPeer(bindGroup), Pointer.getPeer(label));
	}
	protected native static void wgpuBindGroupSetLabel(@Ptr long bindGroup, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuBindGroupSetLabel2(WGPUBindGroup, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3902</i>
	 */
	public static void wgpuBindGroupSetLabel2(WebgpuLibrary.WGPUBindGroup bindGroup, WGPUStringView label) {
		wgpuBindGroupSetLabel2(Pointer.getPeer(bindGroup), label);
	}
	protected native static void wgpuBindGroupSetLabel2(@Ptr long bindGroup, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuBindGroupAddRef(WGPUBindGroup)</code><br>
	 * <i>native declaration : webgpu.h:3903</i>
	 */
	public static void wgpuBindGroupAddRef(WebgpuLibrary.WGPUBindGroup bindGroup) {
		wgpuBindGroupAddRef(Pointer.getPeer(bindGroup));
	}
	protected native static void wgpuBindGroupAddRef(@Ptr long bindGroup);
	/**
	 * Original signature : <code>void wgpuBindGroupRelease(WGPUBindGroup)</code><br>
	 * <i>native declaration : webgpu.h:3904</i>
	 */
	public static void wgpuBindGroupRelease(WebgpuLibrary.WGPUBindGroup bindGroup) {
		wgpuBindGroupRelease(Pointer.getPeer(bindGroup));
	}
	protected native static void wgpuBindGroupRelease(@Ptr long bindGroup);
	/**
	 * Methods of BindGroupLayout<br>
	 * Original signature : <code>void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3907</i>
	 */
	public static void wgpuBindGroupLayoutSetLabel(WebgpuLibrary.WGPUBindGroupLayout bindGroupLayout, Pointer<Byte > label) {
		wgpuBindGroupLayoutSetLabel(Pointer.getPeer(bindGroupLayout), Pointer.getPeer(label));
	}
	protected native static void wgpuBindGroupLayoutSetLabel(@Ptr long bindGroupLayout, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuBindGroupLayoutSetLabel2(WGPUBindGroupLayout, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3908</i>
	 */
	public static void wgpuBindGroupLayoutSetLabel2(WebgpuLibrary.WGPUBindGroupLayout bindGroupLayout, WGPUStringView label) {
		wgpuBindGroupLayoutSetLabel2(Pointer.getPeer(bindGroupLayout), label);
	}
	protected native static void wgpuBindGroupLayoutSetLabel2(@Ptr long bindGroupLayout, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuBindGroupLayoutAddRef(WGPUBindGroupLayout)</code><br>
	 * <i>native declaration : webgpu.h:3909</i>
	 */
	public static void wgpuBindGroupLayoutAddRef(WebgpuLibrary.WGPUBindGroupLayout bindGroupLayout) {
		wgpuBindGroupLayoutAddRef(Pointer.getPeer(bindGroupLayout));
	}
	protected native static void wgpuBindGroupLayoutAddRef(@Ptr long bindGroupLayout);
	/**
	 * Original signature : <code>void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout)</code><br>
	 * <i>native declaration : webgpu.h:3910</i>
	 */
	public static void wgpuBindGroupLayoutRelease(WebgpuLibrary.WGPUBindGroupLayout bindGroupLayout) {
		wgpuBindGroupLayoutRelease(Pointer.getPeer(bindGroupLayout));
	}
	protected native static void wgpuBindGroupLayoutRelease(@Ptr long bindGroupLayout);
	/**
	 * Methods of Buffer<br>
	 * Original signature : <code>void wgpuBufferDestroy(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:3913</i>
	 */
	public static void wgpuBufferDestroy(WebgpuLibrary.WGPUBuffer buffer) {
		wgpuBufferDestroy(Pointer.getPeer(buffer));
	}
	protected native static void wgpuBufferDestroy(@Ptr long buffer);
	/**
	 * Original signature : <code>const void* wgpuBufferGetConstMappedRange(WGPUBuffer, size_t, size_t)</code><br>
	 * <i>native declaration : webgpu.h:3914</i>
	 */
	public static Pointer<? > wgpuBufferGetConstMappedRange(WebgpuLibrary.WGPUBuffer buffer, @Ptr long offset, @Ptr long size) {
		return Pointer.pointerToAddress(wgpuBufferGetConstMappedRange(Pointer.getPeer(buffer), offset, size));
	}
	@Ptr 
	protected native static long wgpuBufferGetConstMappedRange(@Ptr long buffer, @Ptr long offset, @Ptr long size);
	/**
	 * Original signature : <code>WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:3915</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUBufferMapState > wgpuBufferGetMapState(WebgpuLibrary.WGPUBuffer buffer) {
		return FlagSet.fromValue(wgpuBufferGetMapState(Pointer.getPeer(buffer)), WebgpuLibrary.WGPUBufferMapState.class);
	}
	protected native static int wgpuBufferGetMapState(@Ptr long buffer);
	/**
	 * Original signature : <code>void* wgpuBufferGetMappedRange(WGPUBuffer, size_t, size_t)</code><br>
	 * <i>native declaration : webgpu.h:3916</i>
	 */
	public static Pointer<? > wgpuBufferGetMappedRange(WebgpuLibrary.WGPUBuffer buffer, @Ptr long offset, @Ptr long size) {
		return Pointer.pointerToAddress(wgpuBufferGetMappedRange(Pointer.getPeer(buffer), offset, size));
	}
	@Ptr 
	protected native static long wgpuBufferGetMappedRange(@Ptr long buffer, @Ptr long offset, @Ptr long size);
	/**
	 * Original signature : <code>uint64_t wgpuBufferGetSize(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:3917</i>
	 */
	public static long wgpuBufferGetSize(WebgpuLibrary.WGPUBuffer buffer) {
		return wgpuBufferGetSize(Pointer.getPeer(buffer));
	}
	protected native static long wgpuBufferGetSize(@Ptr long buffer);
	/**
	 * Original signature : <code>WGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:3918</i>
	 */
	public static long wgpuBufferGetUsage(WebgpuLibrary.WGPUBuffer buffer) {
		return wgpuBufferGetUsage(Pointer.getPeer(buffer));
	}
	protected native static long wgpuBufferGetUsage(@Ptr long buffer);
	/**
	 * Original signature : <code>void wgpuBufferMapAsync(WGPUBuffer, WGPUMapMode, size_t, size_t, WGPUBufferMapCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:3919</i>
	 */
	public static void wgpuBufferMapAsync(WebgpuLibrary.WGPUBuffer buffer, long mode, @Ptr long offset, @Ptr long size, Pointer<WebgpuLibrary.WGPUBufferMapCallback > callback, Pointer<? > userdata) {
		wgpuBufferMapAsync(Pointer.getPeer(buffer), mode, offset, size, Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuBufferMapAsync(@Ptr long buffer, long mode, @Ptr long offset, @Ptr long size, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>WGPUFuture wgpuBufferMapAsync2(WGPUBuffer, WGPUMapMode, size_t, size_t, WGPUBufferMapCallbackInfo2)</code><br>
	 * <i>native declaration : webgpu.h:3920</i>
	 */
	public static WGPUFuture wgpuBufferMapAsync2(WebgpuLibrary.WGPUBuffer buffer, long mode, @Ptr long offset, @Ptr long size, WGPUBufferMapCallbackInfo2 callbackInfo) {
		return wgpuBufferMapAsync2(Pointer.getPeer(buffer), mode, offset, size, callbackInfo);
	}
	protected native static WGPUFuture wgpuBufferMapAsync2(@Ptr long buffer, long mode, @Ptr long offset, @Ptr long size, WGPUBufferMapCallbackInfo2 callbackInfo);
	/**
	 * Original signature : <code>WGPUFuture wgpuBufferMapAsyncF(WGPUBuffer, WGPUMapMode, size_t, size_t, WGPUBufferMapCallbackInfo)</code><br>
	 * <i>native declaration : webgpu.h:3921</i>
	 */
	public static WGPUFuture wgpuBufferMapAsyncF(WebgpuLibrary.WGPUBuffer buffer, long mode, @Ptr long offset, @Ptr long size, WGPUBufferMapCallbackInfo callbackInfo) {
		return wgpuBufferMapAsyncF(Pointer.getPeer(buffer), mode, offset, size, callbackInfo);
	}
	protected native static WGPUFuture wgpuBufferMapAsyncF(@Ptr long buffer, long mode, @Ptr long offset, @Ptr long size, WGPUBufferMapCallbackInfo callbackInfo);
	/**
	 * Original signature : <code>void wgpuBufferSetLabel(WGPUBuffer, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3922</i>
	 */
	public static void wgpuBufferSetLabel(WebgpuLibrary.WGPUBuffer buffer, Pointer<Byte > label) {
		wgpuBufferSetLabel(Pointer.getPeer(buffer), Pointer.getPeer(label));
	}
	protected native static void wgpuBufferSetLabel(@Ptr long buffer, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuBufferSetLabel2(WGPUBuffer, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3923</i>
	 */
	public static void wgpuBufferSetLabel2(WebgpuLibrary.WGPUBuffer buffer, WGPUStringView label) {
		wgpuBufferSetLabel2(Pointer.getPeer(buffer), label);
	}
	protected native static void wgpuBufferSetLabel2(@Ptr long buffer, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuBufferUnmap(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:3924</i>
	 */
	public static void wgpuBufferUnmap(WebgpuLibrary.WGPUBuffer buffer) {
		wgpuBufferUnmap(Pointer.getPeer(buffer));
	}
	protected native static void wgpuBufferUnmap(@Ptr long buffer);
	/**
	 * Original signature : <code>void wgpuBufferAddRef(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:3925</i>
	 */
	public static void wgpuBufferAddRef(WebgpuLibrary.WGPUBuffer buffer) {
		wgpuBufferAddRef(Pointer.getPeer(buffer));
	}
	protected native static void wgpuBufferAddRef(@Ptr long buffer);
	/**
	 * Original signature : <code>void wgpuBufferRelease(WGPUBuffer)</code><br>
	 * <i>native declaration : webgpu.h:3926</i>
	 */
	public static void wgpuBufferRelease(WebgpuLibrary.WGPUBuffer buffer) {
		wgpuBufferRelease(Pointer.getPeer(buffer));
	}
	protected native static void wgpuBufferRelease(@Ptr long buffer);
	/**
	 * Methods of CommandBuffer<br>
	 * Original signature : <code>void wgpuCommandBufferSetLabel(WGPUCommandBuffer, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3929</i>
	 */
	public static void wgpuCommandBufferSetLabel(WebgpuLibrary.WGPUCommandBuffer commandBuffer, Pointer<Byte > label) {
		wgpuCommandBufferSetLabel(Pointer.getPeer(commandBuffer), Pointer.getPeer(label));
	}
	protected native static void wgpuCommandBufferSetLabel(@Ptr long commandBuffer, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuCommandBufferSetLabel2(WGPUCommandBuffer, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3930</i>
	 */
	public static void wgpuCommandBufferSetLabel2(WebgpuLibrary.WGPUCommandBuffer commandBuffer, WGPUStringView label) {
		wgpuCommandBufferSetLabel2(Pointer.getPeer(commandBuffer), label);
	}
	protected native static void wgpuCommandBufferSetLabel2(@Ptr long commandBuffer, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuCommandBufferAddRef(WGPUCommandBuffer)</code><br>
	 * <i>native declaration : webgpu.h:3931</i>
	 */
	public static void wgpuCommandBufferAddRef(WebgpuLibrary.WGPUCommandBuffer commandBuffer) {
		wgpuCommandBufferAddRef(Pointer.getPeer(commandBuffer));
	}
	protected native static void wgpuCommandBufferAddRef(@Ptr long commandBuffer);
	/**
	 * Original signature : <code>void wgpuCommandBufferRelease(WGPUCommandBuffer)</code><br>
	 * <i>native declaration : webgpu.h:3932</i>
	 */
	public static void wgpuCommandBufferRelease(WebgpuLibrary.WGPUCommandBuffer commandBuffer) {
		wgpuCommandBufferRelease(Pointer.getPeer(commandBuffer));
	}
	protected native static void wgpuCommandBufferRelease(@Ptr long commandBuffer);
	/**
	 * Methods of CommandEncoder<br>
	 * Original signature : <code>WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder, const WGPUComputePassDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3935</i>
	 */
	public static WebgpuLibrary.WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUComputePassDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUComputePassEncoder(wgpuCommandEncoderBeginComputePass(Pointer.getPeer(commandEncoder), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuCommandEncoderBeginComputePass(@Ptr long commandEncoder, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder, const WGPURenderPassDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3936</i>
	 */
	public static WebgpuLibrary.WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPURenderPassDescriptor > descriptor) {
		return new WebgpuLibrary.WGPURenderPassEncoder(wgpuCommandEncoderBeginRenderPass(Pointer.getPeer(commandEncoder), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuCommandEncoderBeginRenderPass(@Ptr long commandEncoder, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder, WGPUBuffer, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:3937</i>
	 */
	public static void wgpuCommandEncoderClearBuffer(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WebgpuLibrary.WGPUBuffer buffer, long offset, long size) {
		wgpuCommandEncoderClearBuffer(Pointer.getPeer(commandEncoder), Pointer.getPeer(buffer), offset, size);
	}
	protected native static void wgpuCommandEncoderClearBuffer(@Ptr long commandEncoder, @Ptr long buffer, long offset, long size);
	/**
	 * Original signature : <code>void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder, WGPUBuffer, uint64_t, WGPUBuffer, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:3938</i>
	 */
	public static void wgpuCommandEncoderCopyBufferToBuffer(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WebgpuLibrary.WGPUBuffer source, long sourceOffset, WebgpuLibrary.WGPUBuffer destination, long destinationOffset, long size) {
		wgpuCommandEncoderCopyBufferToBuffer(Pointer.getPeer(commandEncoder), Pointer.getPeer(source), sourceOffset, Pointer.getPeer(destination), destinationOffset, size);
	}
	protected native static void wgpuCommandEncoderCopyBufferToBuffer(@Ptr long commandEncoder, @Ptr long source, long sourceOffset, @Ptr long destination, long destinationOffset, long size);
	/**
	 * Original signature : <code>void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder, const WGPUImageCopyBuffer*, const WGPUImageCopyTexture*, const WGPUExtent3D*)</code><br>
	 * <i>native declaration : webgpu.h:3939</i>
	 */
	public static void wgpuCommandEncoderCopyBufferToTexture(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUImageCopyBuffer > source, Pointer<WGPUImageCopyTexture > destination, Pointer<WGPUExtent3D > copySize) {
		wgpuCommandEncoderCopyBufferToTexture(Pointer.getPeer(commandEncoder), Pointer.getPeer(source), Pointer.getPeer(destination), Pointer.getPeer(copySize));
	}
	protected native static void wgpuCommandEncoderCopyBufferToTexture(@Ptr long commandEncoder, @Ptr long source, @Ptr long destination, @Ptr long copySize);
	/**
	 * Original signature : <code>void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder, const WGPUImageCopyTexture*, const WGPUImageCopyBuffer*, const WGPUExtent3D*)</code><br>
	 * <i>native declaration : webgpu.h:3940</i>
	 */
	public static void wgpuCommandEncoderCopyTextureToBuffer(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUImageCopyTexture > source, Pointer<WGPUImageCopyBuffer > destination, Pointer<WGPUExtent3D > copySize) {
		wgpuCommandEncoderCopyTextureToBuffer(Pointer.getPeer(commandEncoder), Pointer.getPeer(source), Pointer.getPeer(destination), Pointer.getPeer(copySize));
	}
	protected native static void wgpuCommandEncoderCopyTextureToBuffer(@Ptr long commandEncoder, @Ptr long source, @Ptr long destination, @Ptr long copySize);
	/**
	 * Original signature : <code>void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder, const WGPUImageCopyTexture*, const WGPUImageCopyTexture*, const WGPUExtent3D*)</code><br>
	 * <i>native declaration : webgpu.h:3941</i>
	 */
	public static void wgpuCommandEncoderCopyTextureToTexture(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUImageCopyTexture > source, Pointer<WGPUImageCopyTexture > destination, Pointer<WGPUExtent3D > copySize) {
		wgpuCommandEncoderCopyTextureToTexture(Pointer.getPeer(commandEncoder), Pointer.getPeer(source), Pointer.getPeer(destination), Pointer.getPeer(copySize));
	}
	protected native static void wgpuCommandEncoderCopyTextureToTexture(@Ptr long commandEncoder, @Ptr long source, @Ptr long destination, @Ptr long copySize);
	/**
	 * Original signature : <code>WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder, const WGPUCommandBufferDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3942</i>
	 */
	public static WebgpuLibrary.WGPUCommandBuffer wgpuCommandEncoderFinish(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<WGPUCommandBufferDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUCommandBuffer(wgpuCommandEncoderFinish(Pointer.getPeer(commandEncoder), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuCommandEncoderFinish(@Ptr long commandEncoder, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuCommandEncoderInjectValidationError(WGPUCommandEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3943</i>
	 */
	public static void wgpuCommandEncoderInjectValidationError(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > message) {
		wgpuCommandEncoderInjectValidationError(Pointer.getPeer(commandEncoder), Pointer.getPeer(message));
	}
	protected native static void wgpuCommandEncoderInjectValidationError(@Ptr long commandEncoder, @Ptr long message);
	/**
	 * Original signature : <code>void wgpuCommandEncoderInjectValidationError2(WGPUCommandEncoder, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3944</i>
	 */
	public static void wgpuCommandEncoderInjectValidationError2(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WGPUStringView message) {
		wgpuCommandEncoderInjectValidationError2(Pointer.getPeer(commandEncoder), message);
	}
	protected native static void wgpuCommandEncoderInjectValidationError2(@Ptr long commandEncoder, WGPUStringView message);
	/**
	 * Original signature : <code>void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3945</i>
	 */
	public static void wgpuCommandEncoderInsertDebugMarker(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > markerLabel) {
		wgpuCommandEncoderInsertDebugMarker(Pointer.getPeer(commandEncoder), Pointer.getPeer(markerLabel));
	}
	protected native static void wgpuCommandEncoderInsertDebugMarker(@Ptr long commandEncoder, @Ptr long markerLabel);
	/**
	 * Original signature : <code>void wgpuCommandEncoderInsertDebugMarker2(WGPUCommandEncoder, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3946</i>
	 */
	public static void wgpuCommandEncoderInsertDebugMarker2(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel) {
		wgpuCommandEncoderInsertDebugMarker2(Pointer.getPeer(commandEncoder), markerLabel);
	}
	protected native static void wgpuCommandEncoderInsertDebugMarker2(@Ptr long commandEncoder, WGPUStringView markerLabel);
	/**
	 * Original signature : <code>void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder)</code><br>
	 * <i>native declaration : webgpu.h:3947</i>
	 */
	public static void wgpuCommandEncoderPopDebugGroup(WebgpuLibrary.WGPUCommandEncoder commandEncoder) {
		wgpuCommandEncoderPopDebugGroup(Pointer.getPeer(commandEncoder));
	}
	protected native static void wgpuCommandEncoderPopDebugGroup(@Ptr long commandEncoder);
	/**
	 * Original signature : <code>void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3948</i>
	 */
	public static void wgpuCommandEncoderPushDebugGroup(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > groupLabel) {
		wgpuCommandEncoderPushDebugGroup(Pointer.getPeer(commandEncoder), Pointer.getPeer(groupLabel));
	}
	protected native static void wgpuCommandEncoderPushDebugGroup(@Ptr long commandEncoder, @Ptr long groupLabel);
	/**
	 * Original signature : <code>void wgpuCommandEncoderPushDebugGroup2(WGPUCommandEncoder, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3949</i>
	 */
	public static void wgpuCommandEncoderPushDebugGroup2(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel) {
		wgpuCommandEncoderPushDebugGroup2(Pointer.getPeer(commandEncoder), groupLabel);
	}
	protected native static void wgpuCommandEncoderPushDebugGroup2(@Ptr long commandEncoder, WGPUStringView groupLabel);
	/**
	 * Original signature : <code>void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder, WGPUQuerySet, uint32_t, uint32_t, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:3950</i>
	 */
	public static void wgpuCommandEncoderResolveQuerySet(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WebgpuLibrary.WGPUQuerySet querySet, int firstQuery, int queryCount, WebgpuLibrary.WGPUBuffer destination, long destinationOffset) {
		wgpuCommandEncoderResolveQuerySet(Pointer.getPeer(commandEncoder), Pointer.getPeer(querySet), firstQuery, queryCount, Pointer.getPeer(destination), destinationOffset);
	}
	protected native static void wgpuCommandEncoderResolveQuerySet(@Ptr long commandEncoder, @Ptr long querySet, int firstQuery, int queryCount, @Ptr long destination, long destinationOffset);
	/**
	 * Original signature : <code>void wgpuCommandEncoderSetLabel(WGPUCommandEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3951</i>
	 */
	public static void wgpuCommandEncoderSetLabel(WebgpuLibrary.WGPUCommandEncoder commandEncoder, Pointer<Byte > label) {
		wgpuCommandEncoderSetLabel(Pointer.getPeer(commandEncoder), Pointer.getPeer(label));
	}
	protected native static void wgpuCommandEncoderSetLabel(@Ptr long commandEncoder, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuCommandEncoderSetLabel2(WGPUCommandEncoder, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3952</i>
	 */
	public static void wgpuCommandEncoderSetLabel2(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WGPUStringView label) {
		wgpuCommandEncoderSetLabel2(Pointer.getPeer(commandEncoder), label);
	}
	protected native static void wgpuCommandEncoderSetLabel2(@Ptr long commandEncoder, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuCommandEncoderWriteBuffer(WGPUCommandEncoder, WGPUBuffer, uint64_t, const uint8_t*, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:3953</i>
	 */
	public static void wgpuCommandEncoderWriteBuffer(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WebgpuLibrary.WGPUBuffer buffer, long bufferOffset, Pointer<Byte > data, long size) {
		wgpuCommandEncoderWriteBuffer(Pointer.getPeer(commandEncoder), Pointer.getPeer(buffer), bufferOffset, Pointer.getPeer(data), size);
	}
	protected native static void wgpuCommandEncoderWriteBuffer(@Ptr long commandEncoder, @Ptr long buffer, long bufferOffset, @Ptr long data, long size);
	/**
	 * Original signature : <code>void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder, WGPUQuerySet, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:3954</i>
	 */
	public static void wgpuCommandEncoderWriteTimestamp(WebgpuLibrary.WGPUCommandEncoder commandEncoder, WebgpuLibrary.WGPUQuerySet querySet, int queryIndex) {
		wgpuCommandEncoderWriteTimestamp(Pointer.getPeer(commandEncoder), Pointer.getPeer(querySet), queryIndex);
	}
	protected native static void wgpuCommandEncoderWriteTimestamp(@Ptr long commandEncoder, @Ptr long querySet, int queryIndex);
	/**
	 * Original signature : <code>void wgpuCommandEncoderAddRef(WGPUCommandEncoder)</code><br>
	 * <i>native declaration : webgpu.h:3955</i>
	 */
	public static void wgpuCommandEncoderAddRef(WebgpuLibrary.WGPUCommandEncoder commandEncoder) {
		wgpuCommandEncoderAddRef(Pointer.getPeer(commandEncoder));
	}
	protected native static void wgpuCommandEncoderAddRef(@Ptr long commandEncoder);
	/**
	 * Original signature : <code>void wgpuCommandEncoderRelease(WGPUCommandEncoder)</code><br>
	 * <i>native declaration : webgpu.h:3956</i>
	 */
	public static void wgpuCommandEncoderRelease(WebgpuLibrary.WGPUCommandEncoder commandEncoder) {
		wgpuCommandEncoderRelease(Pointer.getPeer(commandEncoder));
	}
	protected native static void wgpuCommandEncoderRelease(@Ptr long commandEncoder);
	/**
	 * Methods of ComputePassEncoder<br>
	 * Original signature : <code>void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder, uint32_t, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:3959</i>
	 */
	public static void wgpuComputePassEncoderDispatchWorkgroups(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, int workgroupCountX, int workgroupCountY, int workgroupCountZ) {
		wgpuComputePassEncoderDispatchWorkgroups(Pointer.getPeer(computePassEncoder), workgroupCountX, workgroupCountY, workgroupCountZ);
	}
	protected native static void wgpuComputePassEncoderDispatchWorkgroups(@Ptr long computePassEncoder, int workgroupCountX, int workgroupCountY, int workgroupCountZ);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:3960</i>
	 */
	public static void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset) {
		wgpuComputePassEncoderDispatchWorkgroupsIndirect(Pointer.getPeer(computePassEncoder), Pointer.getPeer(indirectBuffer), indirectOffset);
	}
	protected native static void wgpuComputePassEncoderDispatchWorkgroupsIndirect(@Ptr long computePassEncoder, @Ptr long indirectBuffer, long indirectOffset);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderEnd(WGPUComputePassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:3961</i>
	 */
	public static void wgpuComputePassEncoderEnd(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder) {
		wgpuComputePassEncoderEnd(Pointer.getPeer(computePassEncoder));
	}
	protected native static void wgpuComputePassEncoderEnd(@Ptr long computePassEncoder);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3962</i>
	 */
	public static void wgpuComputePassEncoderInsertDebugMarker(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, Pointer<Byte > markerLabel) {
		wgpuComputePassEncoderInsertDebugMarker(Pointer.getPeer(computePassEncoder), Pointer.getPeer(markerLabel));
	}
	protected native static void wgpuComputePassEncoderInsertDebugMarker(@Ptr long computePassEncoder, @Ptr long markerLabel);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderInsertDebugMarker2(WGPUComputePassEncoder, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3963</i>
	 */
	public static void wgpuComputePassEncoderInsertDebugMarker2(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel) {
		wgpuComputePassEncoderInsertDebugMarker2(Pointer.getPeer(computePassEncoder), markerLabel);
	}
	protected native static void wgpuComputePassEncoderInsertDebugMarker2(@Ptr long computePassEncoder, WGPUStringView markerLabel);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:3964</i>
	 */
	public static void wgpuComputePassEncoderPopDebugGroup(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder) {
		wgpuComputePassEncoderPopDebugGroup(Pointer.getPeer(computePassEncoder));
	}
	protected native static void wgpuComputePassEncoderPopDebugGroup(@Ptr long computePassEncoder);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3965</i>
	 */
	public static void wgpuComputePassEncoderPushDebugGroup(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, Pointer<Byte > groupLabel) {
		wgpuComputePassEncoderPushDebugGroup(Pointer.getPeer(computePassEncoder), Pointer.getPeer(groupLabel));
	}
	protected native static void wgpuComputePassEncoderPushDebugGroup(@Ptr long computePassEncoder, @Ptr long groupLabel);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderPushDebugGroup2(WGPUComputePassEncoder, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3966</i>
	 */
	public static void wgpuComputePassEncoderPushDebugGroup2(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel) {
		wgpuComputePassEncoderPushDebugGroup2(Pointer.getPeer(computePassEncoder), groupLabel);
	}
	protected native static void wgpuComputePassEncoderPushDebugGroup2(@Ptr long computePassEncoder, WGPUStringView groupLabel);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder, uint32_t, WGPUBindGroup, size_t, const uint32_t*)</code><br>
	 * <i>native declaration : webgpu.h:3967</i>
	 */
	public static void wgpuComputePassEncoderSetBindGroup(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, int groupIndex, WebgpuLibrary.WGPUBindGroup group, @Ptr long dynamicOffsetCount, Pointer<Integer > dynamicOffsets) {
		wgpuComputePassEncoderSetBindGroup(Pointer.getPeer(computePassEncoder), groupIndex, Pointer.getPeer(group), dynamicOffsetCount, Pointer.getPeer(dynamicOffsets));
	}
	protected native static void wgpuComputePassEncoderSetBindGroup(@Ptr long computePassEncoder, int groupIndex, @Ptr long group, @Ptr long dynamicOffsetCount, @Ptr long dynamicOffsets);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3968</i>
	 */
	public static void wgpuComputePassEncoderSetLabel(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, Pointer<Byte > label) {
		wgpuComputePassEncoderSetLabel(Pointer.getPeer(computePassEncoder), Pointer.getPeer(label));
	}
	protected native static void wgpuComputePassEncoderSetLabel(@Ptr long computePassEncoder, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderSetLabel2(WGPUComputePassEncoder, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3969</i>
	 */
	public static void wgpuComputePassEncoderSetLabel2(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, WGPUStringView label) {
		wgpuComputePassEncoderSetLabel2(Pointer.getPeer(computePassEncoder), label);
	}
	protected native static void wgpuComputePassEncoderSetLabel2(@Ptr long computePassEncoder, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder, WGPUComputePipeline)</code><br>
	 * <i>native declaration : webgpu.h:3970</i>
	 */
	public static void wgpuComputePassEncoderSetPipeline(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, WebgpuLibrary.WGPUComputePipeline pipeline) {
		wgpuComputePassEncoderSetPipeline(Pointer.getPeer(computePassEncoder), Pointer.getPeer(pipeline));
	}
	protected native static void wgpuComputePassEncoderSetPipeline(@Ptr long computePassEncoder, @Ptr long pipeline);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderWriteTimestamp(WGPUComputePassEncoder, WGPUQuerySet, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:3971</i>
	 */
	public static void wgpuComputePassEncoderWriteTimestamp(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder, WebgpuLibrary.WGPUQuerySet querySet, int queryIndex) {
		wgpuComputePassEncoderWriteTimestamp(Pointer.getPeer(computePassEncoder), Pointer.getPeer(querySet), queryIndex);
	}
	protected native static void wgpuComputePassEncoderWriteTimestamp(@Ptr long computePassEncoder, @Ptr long querySet, int queryIndex);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderAddRef(WGPUComputePassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:3972</i>
	 */
	public static void wgpuComputePassEncoderAddRef(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder) {
		wgpuComputePassEncoderAddRef(Pointer.getPeer(computePassEncoder));
	}
	protected native static void wgpuComputePassEncoderAddRef(@Ptr long computePassEncoder);
	/**
	 * Original signature : <code>void wgpuComputePassEncoderRelease(WGPUComputePassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:3973</i>
	 */
	public static void wgpuComputePassEncoderRelease(WebgpuLibrary.WGPUComputePassEncoder computePassEncoder) {
		wgpuComputePassEncoderRelease(Pointer.getPeer(computePassEncoder));
	}
	protected native static void wgpuComputePassEncoderRelease(@Ptr long computePassEncoder);
	/**
	 * Methods of ComputePipeline<br>
	 * Original signature : <code>WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:3976</i>
	 */
	public static WebgpuLibrary.WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WebgpuLibrary.WGPUComputePipeline computePipeline, int groupIndex) {
		return new WebgpuLibrary.WGPUBindGroupLayout(wgpuComputePipelineGetBindGroupLayout(Pointer.getPeer(computePipeline), groupIndex));
	}
	@Ptr 
	protected native static long wgpuComputePipelineGetBindGroupLayout(@Ptr long computePipeline, int groupIndex);
	/**
	 * Original signature : <code>void wgpuComputePipelineSetLabel(WGPUComputePipeline, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3977</i>
	 */
	public static void wgpuComputePipelineSetLabel(WebgpuLibrary.WGPUComputePipeline computePipeline, Pointer<Byte > label) {
		wgpuComputePipelineSetLabel(Pointer.getPeer(computePipeline), Pointer.getPeer(label));
	}
	protected native static void wgpuComputePipelineSetLabel(@Ptr long computePipeline, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuComputePipelineSetLabel2(WGPUComputePipeline, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3978</i>
	 */
	public static void wgpuComputePipelineSetLabel2(WebgpuLibrary.WGPUComputePipeline computePipeline, WGPUStringView label) {
		wgpuComputePipelineSetLabel2(Pointer.getPeer(computePipeline), label);
	}
	protected native static void wgpuComputePipelineSetLabel2(@Ptr long computePipeline, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuComputePipelineAddRef(WGPUComputePipeline)</code><br>
	 * <i>native declaration : webgpu.h:3979</i>
	 */
	public static void wgpuComputePipelineAddRef(WebgpuLibrary.WGPUComputePipeline computePipeline) {
		wgpuComputePipelineAddRef(Pointer.getPeer(computePipeline));
	}
	protected native static void wgpuComputePipelineAddRef(@Ptr long computePipeline);
	/**
	 * Original signature : <code>void wgpuComputePipelineRelease(WGPUComputePipeline)</code><br>
	 * <i>native declaration : webgpu.h:3980</i>
	 */
	public static void wgpuComputePipelineRelease(WebgpuLibrary.WGPUComputePipeline computePipeline) {
		wgpuComputePipelineRelease(Pointer.getPeer(computePipeline));
	}
	protected native static void wgpuComputePipelineRelease(@Ptr long computePipeline);
	/**
	 * Methods of Device<br>
	 * Original signature : <code>WGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice, const WGPUBindGroupDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3983</i>
	 */
	public static WebgpuLibrary.WGPUBindGroup wgpuDeviceCreateBindGroup(WebgpuLibrary.WGPUDevice device, Pointer<WGPUBindGroupDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUBindGroup(wgpuDeviceCreateBindGroup(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateBindGroup(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice, const WGPUBindGroupLayoutDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3984</i>
	 */
	public static WebgpuLibrary.WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WebgpuLibrary.WGPUDevice device, Pointer<WGPUBindGroupLayoutDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUBindGroupLayout(wgpuDeviceCreateBindGroupLayout(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateBindGroupLayout(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice, const WGPUBufferDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3985</i>
	 */
	public static WebgpuLibrary.WGPUBuffer wgpuDeviceCreateBuffer(WebgpuLibrary.WGPUDevice device, Pointer<WGPUBufferDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUBuffer(wgpuDeviceCreateBuffer(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateBuffer(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice, const WGPUCommandEncoderDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3986</i>
	 */
	public static WebgpuLibrary.WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WebgpuLibrary.WGPUDevice device, Pointer<WGPUCommandEncoderDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUCommandEncoder(wgpuDeviceCreateCommandEncoder(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateCommandEncoder(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice, const WGPUComputePipelineDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3987</i>
	 */
	public static WebgpuLibrary.WGPUComputePipeline wgpuDeviceCreateComputePipeline(WebgpuLibrary.WGPUDevice device, Pointer<WGPUComputePipelineDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUComputePipeline(wgpuDeviceCreateComputePipeline(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateComputePipeline(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuDeviceCreateComputePipelineAsync(WGPUDevice, const WGPUComputePipelineDescriptor*, WGPUCreateComputePipelineAsyncCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:3988</i>
	 */
	public static void wgpuDeviceCreateComputePipelineAsync(WebgpuLibrary.WGPUDevice device, Pointer<WGPUComputePipelineDescriptor > descriptor, Pointer<WebgpuLibrary.WGPUCreateComputePipelineAsyncCallback > callback, Pointer<? > userdata) {
		wgpuDeviceCreateComputePipelineAsync(Pointer.getPeer(device), Pointer.getPeer(descriptor), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuDeviceCreateComputePipelineAsync(@Ptr long device, @Ptr long descriptor, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>WGPUFuture wgpuDeviceCreateComputePipelineAsync2(WGPUDevice, const WGPUComputePipelineDescriptor*, WGPUCreateComputePipelineAsyncCallbackInfo2)</code><br>
	 * <i>native declaration : webgpu.h:3989</i>
	 */
	public static WGPUFuture wgpuDeviceCreateComputePipelineAsync2(WebgpuLibrary.WGPUDevice device, Pointer<WGPUComputePipelineDescriptor > descriptor, WGPUCreateComputePipelineAsyncCallbackInfo2 callbackInfo) {
		return wgpuDeviceCreateComputePipelineAsync2(Pointer.getPeer(device), Pointer.getPeer(descriptor), callbackInfo);
	}
	protected native static WGPUFuture wgpuDeviceCreateComputePipelineAsync2(@Ptr long device, @Ptr long descriptor, WGPUCreateComputePipelineAsyncCallbackInfo2 callbackInfo);
	/**
	 * Original signature : <code>WGPUFuture wgpuDeviceCreateComputePipelineAsyncF(WGPUDevice, const WGPUComputePipelineDescriptor*, WGPUCreateComputePipelineAsyncCallbackInfo)</code><br>
	 * <i>native declaration : webgpu.h:3990</i>
	 */
	public static WGPUFuture wgpuDeviceCreateComputePipelineAsyncF(WebgpuLibrary.WGPUDevice device, Pointer<WGPUComputePipelineDescriptor > descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo) {
		return wgpuDeviceCreateComputePipelineAsyncF(Pointer.getPeer(device), Pointer.getPeer(descriptor), callbackInfo);
	}
	protected native static WGPUFuture wgpuDeviceCreateComputePipelineAsyncF(@Ptr long device, @Ptr long descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo);
	/**
	 * Original signature : <code>WGPUBuffer wgpuDeviceCreateErrorBuffer(WGPUDevice, const WGPUBufferDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3991</i>
	 */
	public static WebgpuLibrary.WGPUBuffer wgpuDeviceCreateErrorBuffer(WebgpuLibrary.WGPUDevice device, Pointer<WGPUBufferDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUBuffer(wgpuDeviceCreateErrorBuffer(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateErrorBuffer(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUExternalTexture wgpuDeviceCreateErrorExternalTexture(WGPUDevice)</code><br>
	 * <i>native declaration : webgpu.h:3992</i>
	 */
	public static WebgpuLibrary.WGPUExternalTexture wgpuDeviceCreateErrorExternalTexture(WebgpuLibrary.WGPUDevice device) {
		return new WebgpuLibrary.WGPUExternalTexture(wgpuDeviceCreateErrorExternalTexture(Pointer.getPeer(device)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateErrorExternalTexture(@Ptr long device);
	/**
	 * Original signature : <code>WGPUShaderModule wgpuDeviceCreateErrorShaderModule(WGPUDevice, const WGPUShaderModuleDescriptor*, const char*)</code><br>
	 * <i>native declaration : webgpu.h:3993</i>
	 */
	public static WebgpuLibrary.WGPUShaderModule wgpuDeviceCreateErrorShaderModule(WebgpuLibrary.WGPUDevice device, Pointer<WGPUShaderModuleDescriptor > descriptor, Pointer<Byte > errorMessage) {
		return new WebgpuLibrary.WGPUShaderModule(wgpuDeviceCreateErrorShaderModule(Pointer.getPeer(device), Pointer.getPeer(descriptor), Pointer.getPeer(errorMessage)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateErrorShaderModule(@Ptr long device, @Ptr long descriptor, @Ptr long errorMessage);
	/**
	 * Original signature : <code>WGPUShaderModule wgpuDeviceCreateErrorShaderModule2(WGPUDevice, const WGPUShaderModuleDescriptor*, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:3994</i>
	 */
	public static WebgpuLibrary.WGPUShaderModule wgpuDeviceCreateErrorShaderModule2(WebgpuLibrary.WGPUDevice device, Pointer<WGPUShaderModuleDescriptor > descriptor, WGPUStringView errorMessage) {
		return new WebgpuLibrary.WGPUShaderModule(wgpuDeviceCreateErrorShaderModule2(Pointer.getPeer(device), Pointer.getPeer(descriptor), errorMessage));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateErrorShaderModule2(@Ptr long device, @Ptr long descriptor, WGPUStringView errorMessage);
	/**
	 * Original signature : <code>WGPUTexture wgpuDeviceCreateErrorTexture(WGPUDevice, const WGPUTextureDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3995</i>
	 */
	public static WebgpuLibrary.WGPUTexture wgpuDeviceCreateErrorTexture(WebgpuLibrary.WGPUDevice device, Pointer<WGPUTextureDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUTexture(wgpuDeviceCreateErrorTexture(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateErrorTexture(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUExternalTexture wgpuDeviceCreateExternalTexture(WGPUDevice, const WGPUExternalTextureDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3996</i>
	 */
	public static WebgpuLibrary.WGPUExternalTexture wgpuDeviceCreateExternalTexture(WebgpuLibrary.WGPUDevice device, Pointer<WGPUExternalTextureDescriptor > externalTextureDescriptor) {
		return new WebgpuLibrary.WGPUExternalTexture(wgpuDeviceCreateExternalTexture(Pointer.getPeer(device), Pointer.getPeer(externalTextureDescriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateExternalTexture(@Ptr long device, @Ptr long externalTextureDescriptor);
	/**
	 * Original signature : <code>WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice, const WGPUPipelineLayoutDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3997</i>
	 */
	public static WebgpuLibrary.WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WebgpuLibrary.WGPUDevice device, Pointer<WGPUPipelineLayoutDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUPipelineLayout(wgpuDeviceCreatePipelineLayout(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreatePipelineLayout(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice, const WGPUQuerySetDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3998</i>
	 */
	public static WebgpuLibrary.WGPUQuerySet wgpuDeviceCreateQuerySet(WebgpuLibrary.WGPUDevice device, Pointer<WGPUQuerySetDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUQuerySet(wgpuDeviceCreateQuerySet(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateQuerySet(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice, const WGPURenderBundleEncoderDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:3999</i>
	 */
	public static WebgpuLibrary.WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WebgpuLibrary.WGPUDevice device, Pointer<WGPURenderBundleEncoderDescriptor > descriptor) {
		return new WebgpuLibrary.WGPURenderBundleEncoder(wgpuDeviceCreateRenderBundleEncoder(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateRenderBundleEncoder(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice, const WGPURenderPipelineDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4000</i>
	 */
	public static WebgpuLibrary.WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WebgpuLibrary.WGPUDevice device, Pointer<WGPURenderPipelineDescriptor > descriptor) {
		return new WebgpuLibrary.WGPURenderPipeline(wgpuDeviceCreateRenderPipeline(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateRenderPipeline(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuDeviceCreateRenderPipelineAsync(WGPUDevice, const WGPURenderPipelineDescriptor*, WGPUCreateRenderPipelineAsyncCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:4001</i>
	 */
	public static void wgpuDeviceCreateRenderPipelineAsync(WebgpuLibrary.WGPUDevice device, Pointer<WGPURenderPipelineDescriptor > descriptor, Pointer<WebgpuLibrary.WGPUCreateRenderPipelineAsyncCallback > callback, Pointer<? > userdata) {
		wgpuDeviceCreateRenderPipelineAsync(Pointer.getPeer(device), Pointer.getPeer(descriptor), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuDeviceCreateRenderPipelineAsync(@Ptr long device, @Ptr long descriptor, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>WGPUFuture wgpuDeviceCreateRenderPipelineAsync2(WGPUDevice, const WGPURenderPipelineDescriptor*, WGPUCreateRenderPipelineAsyncCallbackInfo2)</code><br>
	 * <i>native declaration : webgpu.h:4002</i>
	 */
	public static WGPUFuture wgpuDeviceCreateRenderPipelineAsync2(WebgpuLibrary.WGPUDevice device, Pointer<WGPURenderPipelineDescriptor > descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo2 callbackInfo) {
		return wgpuDeviceCreateRenderPipelineAsync2(Pointer.getPeer(device), Pointer.getPeer(descriptor), callbackInfo);
	}
	protected native static WGPUFuture wgpuDeviceCreateRenderPipelineAsync2(@Ptr long device, @Ptr long descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo2 callbackInfo);
	/**
	 * Original signature : <code>WGPUFuture wgpuDeviceCreateRenderPipelineAsyncF(WGPUDevice, const WGPURenderPipelineDescriptor*, WGPUCreateRenderPipelineAsyncCallbackInfo)</code><br>
	 * <i>native declaration : webgpu.h:4003</i>
	 */
	public static WGPUFuture wgpuDeviceCreateRenderPipelineAsyncF(WebgpuLibrary.WGPUDevice device, Pointer<WGPURenderPipelineDescriptor > descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo) {
		return wgpuDeviceCreateRenderPipelineAsyncF(Pointer.getPeer(device), Pointer.getPeer(descriptor), callbackInfo);
	}
	protected native static WGPUFuture wgpuDeviceCreateRenderPipelineAsyncF(@Ptr long device, @Ptr long descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo);
	/**
	 * Original signature : <code>WGPUSampler wgpuDeviceCreateSampler(WGPUDevice, const WGPUSamplerDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4004</i>
	 */
	public static WebgpuLibrary.WGPUSampler wgpuDeviceCreateSampler(WebgpuLibrary.WGPUDevice device, Pointer<WGPUSamplerDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUSampler(wgpuDeviceCreateSampler(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateSampler(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice, const WGPUShaderModuleDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4005</i>
	 */
	public static WebgpuLibrary.WGPUShaderModule wgpuDeviceCreateShaderModule(WebgpuLibrary.WGPUDevice device, Pointer<WGPUShaderModuleDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUShaderModule(wgpuDeviceCreateShaderModule(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateShaderModule(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUSwapChain wgpuDeviceCreateSwapChain(WGPUDevice, WGPUSurface, const WGPUSwapChainDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4006</i>
	 */
	public static WebgpuLibrary.WGPUSwapChain wgpuDeviceCreateSwapChain(WebgpuLibrary.WGPUDevice device, WebgpuLibrary.WGPUSurface surface, Pointer<WGPUSwapChainDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUSwapChain(wgpuDeviceCreateSwapChain(Pointer.getPeer(device), Pointer.getPeer(surface), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateSwapChain(@Ptr long device, @Ptr long surface, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUTexture wgpuDeviceCreateTexture(WGPUDevice, const WGPUTextureDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4007</i>
	 */
	public static WebgpuLibrary.WGPUTexture wgpuDeviceCreateTexture(WebgpuLibrary.WGPUDevice device, Pointer<WGPUTextureDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUTexture(wgpuDeviceCreateTexture(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceCreateTexture(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuDeviceDestroy(WGPUDevice)</code><br>
	 * <i>native declaration : webgpu.h:4008</i>
	 */
	public static void wgpuDeviceDestroy(WebgpuLibrary.WGPUDevice device) {
		wgpuDeviceDestroy(Pointer.getPeer(device));
	}
	protected native static void wgpuDeviceDestroy(@Ptr long device);
	/**
	 * Original signature : <code>size_t wgpuDeviceEnumerateFeatures(WGPUDevice, WGPUFeatureName*)</code><br>
	 * <i>native declaration : webgpu.h:4009</i>
	 */
	@Ptr 
	public static long wgpuDeviceEnumerateFeatures(WebgpuLibrary.WGPUDevice device, Pointer<IntValuedEnum<WebgpuLibrary.WGPUFeatureName > > features) {
		return wgpuDeviceEnumerateFeatures(Pointer.getPeer(device), Pointer.getPeer(features));
	}
	@Ptr 
	protected native static long wgpuDeviceEnumerateFeatures(@Ptr long device, @Ptr long features);
	/**
	 * Original signature : <code>void wgpuDeviceForceLoss(WGPUDevice, WGPUDeviceLostReason, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4010</i>
	 */
	public static void wgpuDeviceForceLoss(WebgpuLibrary.WGPUDevice device, IntValuedEnum<WebgpuLibrary.WGPUDeviceLostReason > type, Pointer<Byte > message) {
		wgpuDeviceForceLoss(Pointer.getPeer(device), (int)type.value(), Pointer.getPeer(message));
	}
	protected native static void wgpuDeviceForceLoss(@Ptr long device, int type, @Ptr long message);
	/**
	 * Original signature : <code>void wgpuDeviceForceLoss2(WGPUDevice, WGPUDeviceLostReason, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4011</i>
	 */
	public static void wgpuDeviceForceLoss2(WebgpuLibrary.WGPUDevice device, IntValuedEnum<WebgpuLibrary.WGPUDeviceLostReason > type, WGPUStringView message) {
		wgpuDeviceForceLoss2(Pointer.getPeer(device), (int)type.value(), message);
	}
	protected native static void wgpuDeviceForceLoss2(@Ptr long device, int type, WGPUStringView message);
	/**
	 * Original signature : <code>WGPUStatus wgpuDeviceGetAHardwareBufferProperties(WGPUDevice, void*, WGPUAHardwareBufferProperties*)</code><br>
	 * <i>native declaration : webgpu.h:4012</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuDeviceGetAHardwareBufferProperties(WebgpuLibrary.WGPUDevice device, Pointer<? > handle, Pointer<WGPUAHardwareBufferProperties > properties) {
		return FlagSet.fromValue(wgpuDeviceGetAHardwareBufferProperties(Pointer.getPeer(device), Pointer.getPeer(handle), Pointer.getPeer(properties)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuDeviceGetAHardwareBufferProperties(@Ptr long device, @Ptr long handle, @Ptr long properties);
	/**
	 * Original signature : <code>WGPUAdapter wgpuDeviceGetAdapter(WGPUDevice)</code><br>
	 * <i>native declaration : webgpu.h:4013</i>
	 */
	public static WebgpuLibrary.WGPUAdapter wgpuDeviceGetAdapter(WebgpuLibrary.WGPUDevice device) {
		return new WebgpuLibrary.WGPUAdapter(wgpuDeviceGetAdapter(Pointer.getPeer(device)));
	}
	@Ptr 
	protected native static long wgpuDeviceGetAdapter(@Ptr long device);
	/**
	 * Original signature : <code>WGPUStatus wgpuDeviceGetLimits(WGPUDevice, WGPUSupportedLimits*)</code><br>
	 * <i>native declaration : webgpu.h:4014</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuDeviceGetLimits(WebgpuLibrary.WGPUDevice device, Pointer<WGPUSupportedLimits > limits) {
		return FlagSet.fromValue(wgpuDeviceGetLimits(Pointer.getPeer(device), Pointer.getPeer(limits)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuDeviceGetLimits(@Ptr long device, @Ptr long limits);
	/**
	 * Original signature : <code>WGPUQueue wgpuDeviceGetQueue(WGPUDevice)</code><br>
	 * <i>native declaration : webgpu.h:4015</i>
	 */
	public static WebgpuLibrary.WGPUQueue wgpuDeviceGetQueue(WebgpuLibrary.WGPUDevice device) {
		return new WebgpuLibrary.WGPUQueue(wgpuDeviceGetQueue(Pointer.getPeer(device)));
	}
	@Ptr 
	protected native static long wgpuDeviceGetQueue(@Ptr long device);
	/**
	 * Original signature : <code>WGPUTextureUsage wgpuDeviceGetSupportedSurfaceUsage(WGPUDevice, WGPUSurface)</code><br>
	 * <i>native declaration : webgpu.h:4016</i>
	 */
	public static long wgpuDeviceGetSupportedSurfaceUsage(WebgpuLibrary.WGPUDevice device, WebgpuLibrary.WGPUSurface surface) {
		return wgpuDeviceGetSupportedSurfaceUsage(Pointer.getPeer(device), Pointer.getPeer(surface));
	}
	protected native static long wgpuDeviceGetSupportedSurfaceUsage(@Ptr long device, @Ptr long surface);
	/**
	 * Original signature : <code>WGPUBool wgpuDeviceHasFeature(WGPUDevice, WGPUFeatureName)</code><br>
	 * <i>native declaration : webgpu.h:4017</i>
	 */
	public static int wgpuDeviceHasFeature(WebgpuLibrary.WGPUDevice device, IntValuedEnum<WebgpuLibrary.WGPUFeatureName > feature) {
		return wgpuDeviceHasFeature(Pointer.getPeer(device), (int)feature.value());
	}
	protected native static int wgpuDeviceHasFeature(@Ptr long device, int feature);
	/**
	 * Original signature : <code>WGPUSharedBufferMemory wgpuDeviceImportSharedBufferMemory(WGPUDevice, const WGPUSharedBufferMemoryDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4018</i>
	 */
	public static WebgpuLibrary.WGPUSharedBufferMemory wgpuDeviceImportSharedBufferMemory(WebgpuLibrary.WGPUDevice device, Pointer<WGPUSharedBufferMemoryDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUSharedBufferMemory(wgpuDeviceImportSharedBufferMemory(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceImportSharedBufferMemory(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUSharedFence wgpuDeviceImportSharedFence(WGPUDevice, const WGPUSharedFenceDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4019</i>
	 */
	public static WebgpuLibrary.WGPUSharedFence wgpuDeviceImportSharedFence(WebgpuLibrary.WGPUDevice device, Pointer<WGPUSharedFenceDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUSharedFence(wgpuDeviceImportSharedFence(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceImportSharedFence(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUSharedTextureMemory wgpuDeviceImportSharedTextureMemory(WGPUDevice, const WGPUSharedTextureMemoryDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4020</i>
	 */
	public static WebgpuLibrary.WGPUSharedTextureMemory wgpuDeviceImportSharedTextureMemory(WebgpuLibrary.WGPUDevice device, Pointer<WGPUSharedTextureMemoryDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUSharedTextureMemory(wgpuDeviceImportSharedTextureMemory(Pointer.getPeer(device), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuDeviceImportSharedTextureMemory(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuDeviceInjectError(WGPUDevice, WGPUErrorType, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4021</i>
	 */
	public static void wgpuDeviceInjectError(WebgpuLibrary.WGPUDevice device, IntValuedEnum<WebgpuLibrary.WGPUErrorType > type, Pointer<Byte > message) {
		wgpuDeviceInjectError(Pointer.getPeer(device), (int)type.value(), Pointer.getPeer(message));
	}
	protected native static void wgpuDeviceInjectError(@Ptr long device, int type, @Ptr long message);
	/**
	 * Original signature : <code>void wgpuDeviceInjectError2(WGPUDevice, WGPUErrorType, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4022</i>
	 */
	public static void wgpuDeviceInjectError2(WebgpuLibrary.WGPUDevice device, IntValuedEnum<WebgpuLibrary.WGPUErrorType > type, WGPUStringView message) {
		wgpuDeviceInjectError2(Pointer.getPeer(device), (int)type.value(), message);
	}
	protected native static void wgpuDeviceInjectError2(@Ptr long device, int type, WGPUStringView message);
	/**
	 * Original signature : <code>void wgpuDevicePopErrorScope(WGPUDevice, WGPUErrorCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:4023</i>
	 */
	public static void wgpuDevicePopErrorScope(WebgpuLibrary.WGPUDevice device, Pointer<WebgpuLibrary.WGPUErrorCallback > oldCallback, Pointer<? > userdata) {
		wgpuDevicePopErrorScope(Pointer.getPeer(device), Pointer.getPeer(oldCallback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuDevicePopErrorScope(@Ptr long device, @Ptr long oldCallback, @Ptr long userdata);
	/**
	 * Original signature : <code>WGPUFuture wgpuDevicePopErrorScope2(WGPUDevice, WGPUPopErrorScopeCallbackInfo2)</code><br>
	 * <i>native declaration : webgpu.h:4024</i>
	 */
	public static WGPUFuture wgpuDevicePopErrorScope2(WebgpuLibrary.WGPUDevice device, WGPUPopErrorScopeCallbackInfo2 callbackInfo) {
		return wgpuDevicePopErrorScope2(Pointer.getPeer(device), callbackInfo);
	}
	protected native static WGPUFuture wgpuDevicePopErrorScope2(@Ptr long device, WGPUPopErrorScopeCallbackInfo2 callbackInfo);
	/**
	 * Original signature : <code>WGPUFuture wgpuDevicePopErrorScopeF(WGPUDevice, WGPUPopErrorScopeCallbackInfo)</code><br>
	 * <i>native declaration : webgpu.h:4025</i>
	 */
	public static WGPUFuture wgpuDevicePopErrorScopeF(WebgpuLibrary.WGPUDevice device, WGPUPopErrorScopeCallbackInfo callbackInfo) {
		return wgpuDevicePopErrorScopeF(Pointer.getPeer(device), callbackInfo);
	}
	protected native static WGPUFuture wgpuDevicePopErrorScopeF(@Ptr long device, WGPUPopErrorScopeCallbackInfo callbackInfo);
	/**
	 * Original signature : <code>void wgpuDevicePushErrorScope(WGPUDevice, WGPUErrorFilter)</code><br>
	 * <i>native declaration : webgpu.h:4026</i>
	 */
	public static void wgpuDevicePushErrorScope(WebgpuLibrary.WGPUDevice device, IntValuedEnum<WebgpuLibrary.WGPUErrorFilter > filter) {
		wgpuDevicePushErrorScope(Pointer.getPeer(device), (int)filter.value());
	}
	protected native static void wgpuDevicePushErrorScope(@Ptr long device, int filter);
	/**
	 * Original signature : <code>void wgpuDeviceSetDeviceLostCallback(WGPUDevice, WGPUDeviceLostCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:4027</i>
	 */
	public static void wgpuDeviceSetDeviceLostCallback(WebgpuLibrary.WGPUDevice device, Pointer<WebgpuLibrary.WGPUDeviceLostCallback > callback, Pointer<? > userdata) {
		wgpuDeviceSetDeviceLostCallback(Pointer.getPeer(device), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuDeviceSetDeviceLostCallback(@Ptr long device, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>void wgpuDeviceSetLabel(WGPUDevice, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4028</i>
	 */
	public static void wgpuDeviceSetLabel(WebgpuLibrary.WGPUDevice device, Pointer<Byte > label) {
		wgpuDeviceSetLabel(Pointer.getPeer(device), Pointer.getPeer(label));
	}
	protected native static void wgpuDeviceSetLabel(@Ptr long device, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuDeviceSetLabel2(WGPUDevice, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4029</i>
	 */
	public static void wgpuDeviceSetLabel2(WebgpuLibrary.WGPUDevice device, WGPUStringView label) {
		wgpuDeviceSetLabel2(Pointer.getPeer(device), label);
	}
	protected native static void wgpuDeviceSetLabel2(@Ptr long device, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuDeviceSetLoggingCallback(WGPUDevice, WGPULoggingCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:4030</i>
	 */
	public static void wgpuDeviceSetLoggingCallback(WebgpuLibrary.WGPUDevice device, Pointer<WebgpuLibrary.WGPULoggingCallback > callback, Pointer<? > userdata) {
		wgpuDeviceSetLoggingCallback(Pointer.getPeer(device), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuDeviceSetLoggingCallback(@Ptr long device, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>void wgpuDeviceSetUncapturedErrorCallback(WGPUDevice, WGPUErrorCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:4031</i>
	 */
	public static void wgpuDeviceSetUncapturedErrorCallback(WebgpuLibrary.WGPUDevice device, Pointer<WebgpuLibrary.WGPUErrorCallback > callback, Pointer<? > userdata) {
		wgpuDeviceSetUncapturedErrorCallback(Pointer.getPeer(device), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuDeviceSetUncapturedErrorCallback(@Ptr long device, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>void wgpuDeviceTick(WGPUDevice)</code><br>
	 * <i>native declaration : webgpu.h:4032</i>
	 */
	public static void wgpuDeviceTick(WebgpuLibrary.WGPUDevice device) {
		wgpuDeviceTick(Pointer.getPeer(device));
	}
	protected native static void wgpuDeviceTick(@Ptr long device);
	/**
	 * Original signature : <code>void wgpuDeviceValidateTextureDescriptor(WGPUDevice, const WGPUTextureDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4033</i>
	 */
	public static void wgpuDeviceValidateTextureDescriptor(WebgpuLibrary.WGPUDevice device, Pointer<WGPUTextureDescriptor > descriptor) {
		wgpuDeviceValidateTextureDescriptor(Pointer.getPeer(device), Pointer.getPeer(descriptor));
	}
	protected native static void wgpuDeviceValidateTextureDescriptor(@Ptr long device, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuDeviceAddRef(WGPUDevice)</code><br>
	 * <i>native declaration : webgpu.h:4034</i>
	 */
	public static void wgpuDeviceAddRef(WebgpuLibrary.WGPUDevice device) {
		wgpuDeviceAddRef(Pointer.getPeer(device));
	}
	protected native static void wgpuDeviceAddRef(@Ptr long device);
	/**
	 * Original signature : <code>void wgpuDeviceRelease(WGPUDevice)</code><br>
	 * <i>native declaration : webgpu.h:4035</i>
	 */
	public static void wgpuDeviceRelease(WebgpuLibrary.WGPUDevice device) {
		wgpuDeviceRelease(Pointer.getPeer(device));
	}
	protected native static void wgpuDeviceRelease(@Ptr long device);
	/**
	 * Methods of ExternalTexture<br>
	 * Original signature : <code>void wgpuExternalTextureDestroy(WGPUExternalTexture)</code><br>
	 * <i>native declaration : webgpu.h:4038</i>
	 */
	public static void wgpuExternalTextureDestroy(WebgpuLibrary.WGPUExternalTexture externalTexture) {
		wgpuExternalTextureDestroy(Pointer.getPeer(externalTexture));
	}
	protected native static void wgpuExternalTextureDestroy(@Ptr long externalTexture);
	/**
	 * Original signature : <code>void wgpuExternalTextureExpire(WGPUExternalTexture)</code><br>
	 * <i>native declaration : webgpu.h:4039</i>
	 */
	public static void wgpuExternalTextureExpire(WebgpuLibrary.WGPUExternalTexture externalTexture) {
		wgpuExternalTextureExpire(Pointer.getPeer(externalTexture));
	}
	protected native static void wgpuExternalTextureExpire(@Ptr long externalTexture);
	/**
	 * Original signature : <code>void wgpuExternalTextureRefresh(WGPUExternalTexture)</code><br>
	 * <i>native declaration : webgpu.h:4040</i>
	 */
	public static void wgpuExternalTextureRefresh(WebgpuLibrary.WGPUExternalTexture externalTexture) {
		wgpuExternalTextureRefresh(Pointer.getPeer(externalTexture));
	}
	protected native static void wgpuExternalTextureRefresh(@Ptr long externalTexture);
	/**
	 * Original signature : <code>void wgpuExternalTextureSetLabel(WGPUExternalTexture, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4041</i>
	 */
	public static void wgpuExternalTextureSetLabel(WebgpuLibrary.WGPUExternalTexture externalTexture, Pointer<Byte > label) {
		wgpuExternalTextureSetLabel(Pointer.getPeer(externalTexture), Pointer.getPeer(label));
	}
	protected native static void wgpuExternalTextureSetLabel(@Ptr long externalTexture, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuExternalTextureSetLabel2(WGPUExternalTexture, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4042</i>
	 */
	public static void wgpuExternalTextureSetLabel2(WebgpuLibrary.WGPUExternalTexture externalTexture, WGPUStringView label) {
		wgpuExternalTextureSetLabel2(Pointer.getPeer(externalTexture), label);
	}
	protected native static void wgpuExternalTextureSetLabel2(@Ptr long externalTexture, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuExternalTextureAddRef(WGPUExternalTexture)</code><br>
	 * <i>native declaration : webgpu.h:4043</i>
	 */
	public static void wgpuExternalTextureAddRef(WebgpuLibrary.WGPUExternalTexture externalTexture) {
		wgpuExternalTextureAddRef(Pointer.getPeer(externalTexture));
	}
	protected native static void wgpuExternalTextureAddRef(@Ptr long externalTexture);
	/**
	 * Original signature : <code>void wgpuExternalTextureRelease(WGPUExternalTexture)</code><br>
	 * <i>native declaration : webgpu.h:4044</i>
	 */
	public static void wgpuExternalTextureRelease(WebgpuLibrary.WGPUExternalTexture externalTexture) {
		wgpuExternalTextureRelease(Pointer.getPeer(externalTexture));
	}
	protected native static void wgpuExternalTextureRelease(@Ptr long externalTexture);
	/**
	 * Methods of Instance<br>
	 * Original signature : <code>WGPUSurface wgpuInstanceCreateSurface(WGPUInstance, const WGPUSurfaceDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4047</i>
	 */
	public static WebgpuLibrary.WGPUSurface wgpuInstanceCreateSurface(WebgpuLibrary.WGPUInstance instance, Pointer<WGPUSurfaceDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUSurface(wgpuInstanceCreateSurface(Pointer.getPeer(instance), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuInstanceCreateSurface(@Ptr long instance, @Ptr long descriptor);
	/**
	 * Original signature : <code>size_t wgpuInstanceEnumerateWGSLLanguageFeatures(WGPUInstance, WGPUWGSLFeatureName*)</code><br>
	 * <i>native declaration : webgpu.h:4048</i>
	 */
	@Ptr 
	public static long wgpuInstanceEnumerateWGSLLanguageFeatures(WebgpuLibrary.WGPUInstance instance, Pointer<IntValuedEnum<WebgpuLibrary.WGPUWGSLFeatureName > > features) {
		return wgpuInstanceEnumerateWGSLLanguageFeatures(Pointer.getPeer(instance), Pointer.getPeer(features));
	}
	@Ptr 
	protected native static long wgpuInstanceEnumerateWGSLLanguageFeatures(@Ptr long instance, @Ptr long features);
	/**
	 * Original signature : <code>WGPUBool wgpuInstanceHasWGSLLanguageFeature(WGPUInstance, WGPUWGSLFeatureName)</code><br>
	 * <i>native declaration : webgpu.h:4049</i>
	 */
	public static int wgpuInstanceHasWGSLLanguageFeature(WebgpuLibrary.WGPUInstance instance, IntValuedEnum<WebgpuLibrary.WGPUWGSLFeatureName > feature) {
		return wgpuInstanceHasWGSLLanguageFeature(Pointer.getPeer(instance), (int)feature.value());
	}
	protected native static int wgpuInstanceHasWGSLLanguageFeature(@Ptr long instance, int feature);
	/**
	 * Original signature : <code>void wgpuInstanceProcessEvents(WGPUInstance)</code><br>
	 * <i>native declaration : webgpu.h:4050</i>
	 */
	public static void wgpuInstanceProcessEvents(WebgpuLibrary.WGPUInstance instance) {
		wgpuInstanceProcessEvents(Pointer.getPeer(instance));
	}
	protected native static void wgpuInstanceProcessEvents(@Ptr long instance);
	/**
	 * Original signature : <code>void wgpuInstanceRequestAdapter(WGPUInstance, const WGPURequestAdapterOptions*, WGPURequestAdapterCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:4051</i>
	 */
	public static void wgpuInstanceRequestAdapter(WebgpuLibrary.WGPUInstance instance, Pointer<WGPURequestAdapterOptions > options, Pointer<WebgpuLibrary.WGPURequestAdapterCallback > callback, Pointer<? > userdata) {
		wgpuInstanceRequestAdapter(Pointer.getPeer(instance), Pointer.getPeer(options), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuInstanceRequestAdapter(@Ptr long instance, @Ptr long options, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>WGPUFuture wgpuInstanceRequestAdapter2(WGPUInstance, const WGPURequestAdapterOptions*, WGPURequestAdapterCallbackInfo2)</code><br>
	 * <i>native declaration : webgpu.h:4052</i>
	 */
	public static WGPUFuture wgpuInstanceRequestAdapter2(WebgpuLibrary.WGPUInstance instance, Pointer<WGPURequestAdapterOptions > options, WGPURequestAdapterCallbackInfo2 callbackInfo) {
		return wgpuInstanceRequestAdapter2(Pointer.getPeer(instance), Pointer.getPeer(options), callbackInfo);
	}
	protected native static WGPUFuture wgpuInstanceRequestAdapter2(@Ptr long instance, @Ptr long options, WGPURequestAdapterCallbackInfo2 callbackInfo);
	/**
	 * Original signature : <code>WGPUFuture wgpuInstanceRequestAdapterF(WGPUInstance, const WGPURequestAdapterOptions*, WGPURequestAdapterCallbackInfo)</code><br>
	 * <i>native declaration : webgpu.h:4053</i>
	 */
	public static WGPUFuture wgpuInstanceRequestAdapterF(WebgpuLibrary.WGPUInstance instance, Pointer<WGPURequestAdapterOptions > options, WGPURequestAdapterCallbackInfo callbackInfo) {
		return wgpuInstanceRequestAdapterF(Pointer.getPeer(instance), Pointer.getPeer(options), callbackInfo);
	}
	protected native static WGPUFuture wgpuInstanceRequestAdapterF(@Ptr long instance, @Ptr long options, WGPURequestAdapterCallbackInfo callbackInfo);
	/**
	 * Original signature : <code>WGPUWaitStatus wgpuInstanceWaitAny(WGPUInstance, size_t, WGPUFutureWaitInfo*, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:4054</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUWaitStatus > wgpuInstanceWaitAny(WebgpuLibrary.WGPUInstance instance, @Ptr long futureCount, Pointer<WGPUFutureWaitInfo > futures, long timeoutNS) {
		return FlagSet.fromValue(wgpuInstanceWaitAny(Pointer.getPeer(instance), futureCount, Pointer.getPeer(futures), timeoutNS), WebgpuLibrary.WGPUWaitStatus.class);
	}
	protected native static int wgpuInstanceWaitAny(@Ptr long instance, @Ptr long futureCount, @Ptr long futures, long timeoutNS);
	/**
	 * Original signature : <code>void wgpuInstanceAddRef(WGPUInstance)</code><br>
	 * <i>native declaration : webgpu.h:4055</i>
	 */
	public static void wgpuInstanceAddRef(WebgpuLibrary.WGPUInstance instance) {
		wgpuInstanceAddRef(Pointer.getPeer(instance));
	}
	protected native static void wgpuInstanceAddRef(@Ptr long instance);
	/**
	 * Original signature : <code>void wgpuInstanceRelease(WGPUInstance)</code><br>
	 * <i>native declaration : webgpu.h:4056</i>
	 */
	public static void wgpuInstanceRelease(WebgpuLibrary.WGPUInstance instance) {
		wgpuInstanceRelease(Pointer.getPeer(instance));
	}
	protected native static void wgpuInstanceRelease(@Ptr long instance);
	/**
	 * Methods of PipelineLayout<br>
	 * Original signature : <code>void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4059</i>
	 */
	public static void wgpuPipelineLayoutSetLabel(WebgpuLibrary.WGPUPipelineLayout pipelineLayout, Pointer<Byte > label) {
		wgpuPipelineLayoutSetLabel(Pointer.getPeer(pipelineLayout), Pointer.getPeer(label));
	}
	protected native static void wgpuPipelineLayoutSetLabel(@Ptr long pipelineLayout, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuPipelineLayoutSetLabel2(WGPUPipelineLayout, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4060</i>
	 */
	public static void wgpuPipelineLayoutSetLabel2(WebgpuLibrary.WGPUPipelineLayout pipelineLayout, WGPUStringView label) {
		wgpuPipelineLayoutSetLabel2(Pointer.getPeer(pipelineLayout), label);
	}
	protected native static void wgpuPipelineLayoutSetLabel2(@Ptr long pipelineLayout, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuPipelineLayoutAddRef(WGPUPipelineLayout)</code><br>
	 * <i>native declaration : webgpu.h:4061</i>
	 */
	public static void wgpuPipelineLayoutAddRef(WebgpuLibrary.WGPUPipelineLayout pipelineLayout) {
		wgpuPipelineLayoutAddRef(Pointer.getPeer(pipelineLayout));
	}
	protected native static void wgpuPipelineLayoutAddRef(@Ptr long pipelineLayout);
	/**
	 * Original signature : <code>void wgpuPipelineLayoutRelease(WGPUPipelineLayout)</code><br>
	 * <i>native declaration : webgpu.h:4062</i>
	 */
	public static void wgpuPipelineLayoutRelease(WebgpuLibrary.WGPUPipelineLayout pipelineLayout) {
		wgpuPipelineLayoutRelease(Pointer.getPeer(pipelineLayout));
	}
	protected native static void wgpuPipelineLayoutRelease(@Ptr long pipelineLayout);
	/**
	 * Methods of QuerySet<br>
	 * Original signature : <code>void wgpuQuerySetDestroy(WGPUQuerySet)</code><br>
	 * <i>native declaration : webgpu.h:4065</i>
	 */
	public static void wgpuQuerySetDestroy(WebgpuLibrary.WGPUQuerySet querySet) {
		wgpuQuerySetDestroy(Pointer.getPeer(querySet));
	}
	protected native static void wgpuQuerySetDestroy(@Ptr long querySet);
	/**
	 * Original signature : <code>uint32_t wgpuQuerySetGetCount(WGPUQuerySet)</code><br>
	 * <i>native declaration : webgpu.h:4066</i>
	 */
	public static int wgpuQuerySetGetCount(WebgpuLibrary.WGPUQuerySet querySet) {
		return wgpuQuerySetGetCount(Pointer.getPeer(querySet));
	}
	protected native static int wgpuQuerySetGetCount(@Ptr long querySet);
	/**
	 * Original signature : <code>WGPUQueryType wgpuQuerySetGetType(WGPUQuerySet)</code><br>
	 * <i>native declaration : webgpu.h:4067</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUQueryType > wgpuQuerySetGetType(WebgpuLibrary.WGPUQuerySet querySet) {
		return FlagSet.fromValue(wgpuQuerySetGetType(Pointer.getPeer(querySet)), WebgpuLibrary.WGPUQueryType.class);
	}
	protected native static int wgpuQuerySetGetType(@Ptr long querySet);
	/**
	 * Original signature : <code>void wgpuQuerySetSetLabel(WGPUQuerySet, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4068</i>
	 */
	public static void wgpuQuerySetSetLabel(WebgpuLibrary.WGPUQuerySet querySet, Pointer<Byte > label) {
		wgpuQuerySetSetLabel(Pointer.getPeer(querySet), Pointer.getPeer(label));
	}
	protected native static void wgpuQuerySetSetLabel(@Ptr long querySet, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuQuerySetSetLabel2(WGPUQuerySet, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4069</i>
	 */
	public static void wgpuQuerySetSetLabel2(WebgpuLibrary.WGPUQuerySet querySet, WGPUStringView label) {
		wgpuQuerySetSetLabel2(Pointer.getPeer(querySet), label);
	}
	protected native static void wgpuQuerySetSetLabel2(@Ptr long querySet, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuQuerySetAddRef(WGPUQuerySet)</code><br>
	 * <i>native declaration : webgpu.h:4070</i>
	 */
	public static void wgpuQuerySetAddRef(WebgpuLibrary.WGPUQuerySet querySet) {
		wgpuQuerySetAddRef(Pointer.getPeer(querySet));
	}
	protected native static void wgpuQuerySetAddRef(@Ptr long querySet);
	/**
	 * Original signature : <code>void wgpuQuerySetRelease(WGPUQuerySet)</code><br>
	 * <i>native declaration : webgpu.h:4071</i>
	 */
	public static void wgpuQuerySetRelease(WebgpuLibrary.WGPUQuerySet querySet) {
		wgpuQuerySetRelease(Pointer.getPeer(querySet));
	}
	protected native static void wgpuQuerySetRelease(@Ptr long querySet);
	/**
	 * Methods of Queue<br>
	 * Original signature : <code>void wgpuQueueCopyExternalTextureForBrowser(WGPUQueue, const WGPUImageCopyExternalTexture*, const WGPUImageCopyTexture*, const WGPUExtent3D*, const WGPUCopyTextureForBrowserOptions*)</code><br>
	 * <i>native declaration : webgpu.h:4074</i>
	 */
	public static void wgpuQueueCopyExternalTextureForBrowser(WebgpuLibrary.WGPUQueue queue, Pointer<WGPUImageCopyExternalTexture > source, Pointer<WGPUImageCopyTexture > destination, Pointer<WGPUExtent3D > copySize, Pointer<WGPUCopyTextureForBrowserOptions > options) {
		wgpuQueueCopyExternalTextureForBrowser(Pointer.getPeer(queue), Pointer.getPeer(source), Pointer.getPeer(destination), Pointer.getPeer(copySize), Pointer.getPeer(options));
	}
	protected native static void wgpuQueueCopyExternalTextureForBrowser(@Ptr long queue, @Ptr long source, @Ptr long destination, @Ptr long copySize, @Ptr long options);
	/**
	 * Original signature : <code>void wgpuQueueCopyTextureForBrowser(WGPUQueue, const WGPUImageCopyTexture*, const WGPUImageCopyTexture*, const WGPUExtent3D*, const WGPUCopyTextureForBrowserOptions*)</code><br>
	 * <i>native declaration : webgpu.h:4075</i>
	 */
	public static void wgpuQueueCopyTextureForBrowser(WebgpuLibrary.WGPUQueue queue, Pointer<WGPUImageCopyTexture > source, Pointer<WGPUImageCopyTexture > destination, Pointer<WGPUExtent3D > copySize, Pointer<WGPUCopyTextureForBrowserOptions > options) {
		wgpuQueueCopyTextureForBrowser(Pointer.getPeer(queue), Pointer.getPeer(source), Pointer.getPeer(destination), Pointer.getPeer(copySize), Pointer.getPeer(options));
	}
	protected native static void wgpuQueueCopyTextureForBrowser(@Ptr long queue, @Ptr long source, @Ptr long destination, @Ptr long copySize, @Ptr long options);
	/**
	 * Original signature : <code>void wgpuQueueOnSubmittedWorkDone(WGPUQueue, WGPUQueueWorkDoneCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:4076</i>
	 */
	public static void wgpuQueueOnSubmittedWorkDone(WebgpuLibrary.WGPUQueue queue, Pointer<WebgpuLibrary.WGPUQueueWorkDoneCallback > callback, Pointer<? > userdata) {
		wgpuQueueOnSubmittedWorkDone(Pointer.getPeer(queue), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuQueueOnSubmittedWorkDone(@Ptr long queue, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>WGPUFuture wgpuQueueOnSubmittedWorkDone2(WGPUQueue, WGPUQueueWorkDoneCallbackInfo2)</code><br>
	 * <i>native declaration : webgpu.h:4077</i>
	 */
	public static WGPUFuture wgpuQueueOnSubmittedWorkDone2(WebgpuLibrary.WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo2 callbackInfo) {
		return wgpuQueueOnSubmittedWorkDone2(Pointer.getPeer(queue), callbackInfo);
	}
	protected native static WGPUFuture wgpuQueueOnSubmittedWorkDone2(@Ptr long queue, WGPUQueueWorkDoneCallbackInfo2 callbackInfo);
	/**
	 * Original signature : <code>WGPUFuture wgpuQueueOnSubmittedWorkDoneF(WGPUQueue, WGPUQueueWorkDoneCallbackInfo)</code><br>
	 * <i>native declaration : webgpu.h:4078</i>
	 */
	public static WGPUFuture wgpuQueueOnSubmittedWorkDoneF(WebgpuLibrary.WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo callbackInfo) {
		return wgpuQueueOnSubmittedWorkDoneF(Pointer.getPeer(queue), callbackInfo);
	}
	protected native static WGPUFuture wgpuQueueOnSubmittedWorkDoneF(@Ptr long queue, WGPUQueueWorkDoneCallbackInfo callbackInfo);
	/**
	 * Original signature : <code>void wgpuQueueSetLabel(WGPUQueue, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4079</i>
	 */
	public static void wgpuQueueSetLabel(WebgpuLibrary.WGPUQueue queue, Pointer<Byte > label) {
		wgpuQueueSetLabel(Pointer.getPeer(queue), Pointer.getPeer(label));
	}
	protected native static void wgpuQueueSetLabel(@Ptr long queue, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuQueueSetLabel2(WGPUQueue, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4080</i>
	 */
	public static void wgpuQueueSetLabel2(WebgpuLibrary.WGPUQueue queue, WGPUStringView label) {
		wgpuQueueSetLabel2(Pointer.getPeer(queue), label);
	}
	protected native static void wgpuQueueSetLabel2(@Ptr long queue, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuQueueSubmit(WGPUQueue, size_t, const WGPUCommandBuffer*)</code><br>
	 * <i>native declaration : webgpu.h:4081</i>
	 */
	public static void wgpuQueueSubmit(WebgpuLibrary.WGPUQueue queue, @Ptr long commandCount, Pointer<WebgpuLibrary.WGPUCommandBuffer > commands) {
		wgpuQueueSubmit(Pointer.getPeer(queue), commandCount, Pointer.getPeer(commands));
	}
	protected native static void wgpuQueueSubmit(@Ptr long queue, @Ptr long commandCount, @Ptr long commands);
	/**
	 * Original signature : <code>void wgpuQueueWriteBuffer(WGPUQueue, WGPUBuffer, uint64_t, const void*, size_t)</code><br>
	 * <i>native declaration : webgpu.h:4082</i>
	 */
	public static void wgpuQueueWriteBuffer(WebgpuLibrary.WGPUQueue queue, WebgpuLibrary.WGPUBuffer buffer, long bufferOffset, Pointer<? > data, @Ptr long size) {
		wgpuQueueWriteBuffer(Pointer.getPeer(queue), Pointer.getPeer(buffer), bufferOffset, Pointer.getPeer(data), size);
	}
	protected native static void wgpuQueueWriteBuffer(@Ptr long queue, @Ptr long buffer, long bufferOffset, @Ptr long data, @Ptr long size);
	/**
	 * Original signature : <code>void wgpuQueueWriteTexture(WGPUQueue, const WGPUImageCopyTexture*, const void*, size_t, const WGPUTextureDataLayout*, const WGPUExtent3D*)</code><br>
	 * <i>native declaration : webgpu.h:4083</i>
	 */
	public static void wgpuQueueWriteTexture(WebgpuLibrary.WGPUQueue queue, Pointer<WGPUImageCopyTexture > destination, Pointer<? > data, @Ptr long dataSize, Pointer<WGPUTextureDataLayout > dataLayout, Pointer<WGPUExtent3D > writeSize) {
		wgpuQueueWriteTexture(Pointer.getPeer(queue), Pointer.getPeer(destination), Pointer.getPeer(data), dataSize, Pointer.getPeer(dataLayout), Pointer.getPeer(writeSize));
	}
	protected native static void wgpuQueueWriteTexture(@Ptr long queue, @Ptr long destination, @Ptr long data, @Ptr long dataSize, @Ptr long dataLayout, @Ptr long writeSize);
	/**
	 * Original signature : <code>void wgpuQueueAddRef(WGPUQueue)</code><br>
	 * <i>native declaration : webgpu.h:4084</i>
	 */
	public static void wgpuQueueAddRef(WebgpuLibrary.WGPUQueue queue) {
		wgpuQueueAddRef(Pointer.getPeer(queue));
	}
	protected native static void wgpuQueueAddRef(@Ptr long queue);
	/**
	 * Original signature : <code>void wgpuQueueRelease(WGPUQueue)</code><br>
	 * <i>native declaration : webgpu.h:4085</i>
	 */
	public static void wgpuQueueRelease(WebgpuLibrary.WGPUQueue queue) {
		wgpuQueueRelease(Pointer.getPeer(queue));
	}
	protected native static void wgpuQueueRelease(@Ptr long queue);
	/**
	 * Methods of RenderBundle<br>
	 * Original signature : <code>void wgpuRenderBundleSetLabel(WGPURenderBundle, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4088</i>
	 */
	public static void wgpuRenderBundleSetLabel(WebgpuLibrary.WGPURenderBundle renderBundle, Pointer<Byte > label) {
		wgpuRenderBundleSetLabel(Pointer.getPeer(renderBundle), Pointer.getPeer(label));
	}
	protected native static void wgpuRenderBundleSetLabel(@Ptr long renderBundle, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuRenderBundleSetLabel2(WGPURenderBundle, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4089</i>
	 */
	public static void wgpuRenderBundleSetLabel2(WebgpuLibrary.WGPURenderBundle renderBundle, WGPUStringView label) {
		wgpuRenderBundleSetLabel2(Pointer.getPeer(renderBundle), label);
	}
	protected native static void wgpuRenderBundleSetLabel2(@Ptr long renderBundle, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuRenderBundleAddRef(WGPURenderBundle)</code><br>
	 * <i>native declaration : webgpu.h:4090</i>
	 */
	public static void wgpuRenderBundleAddRef(WebgpuLibrary.WGPURenderBundle renderBundle) {
		wgpuRenderBundleAddRef(Pointer.getPeer(renderBundle));
	}
	protected native static void wgpuRenderBundleAddRef(@Ptr long renderBundle);
	/**
	 * Original signature : <code>void wgpuRenderBundleRelease(WGPURenderBundle)</code><br>
	 * <i>native declaration : webgpu.h:4091</i>
	 */
	public static void wgpuRenderBundleRelease(WebgpuLibrary.WGPURenderBundle renderBundle) {
		wgpuRenderBundleRelease(Pointer.getPeer(renderBundle));
	}
	protected native static void wgpuRenderBundleRelease(@Ptr long renderBundle);
	/**
	 * Methods of RenderBundleEncoder<br>
	 * Original signature : <code>void wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder, uint32_t, uint32_t, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:4094</i>
	 */
	public static void wgpuRenderBundleEncoderDraw(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int vertexCount, int instanceCount, int firstVertex, int firstInstance) {
		wgpuRenderBundleEncoderDraw(Pointer.getPeer(renderBundleEncoder), vertexCount, instanceCount, firstVertex, firstInstance);
	}
	protected native static void wgpuRenderBundleEncoderDraw(@Ptr long renderBundleEncoder, int vertexCount, int instanceCount, int firstVertex, int firstInstance);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder, uint32_t, uint32_t, uint32_t, int32_t, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:4095</i>
	 */
	public static void wgpuRenderBundleEncoderDrawIndexed(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance) {
		wgpuRenderBundleEncoderDrawIndexed(Pointer.getPeer(renderBundleEncoder), indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
	}
	protected native static void wgpuRenderBundleEncoderDrawIndexed(@Ptr long renderBundleEncoder, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:4096</i>
	 */
	public static void wgpuRenderBundleEncoderDrawIndexedIndirect(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset) {
		wgpuRenderBundleEncoderDrawIndexedIndirect(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(indirectBuffer), indirectOffset);
	}
	protected native static void wgpuRenderBundleEncoderDrawIndexedIndirect(@Ptr long renderBundleEncoder, @Ptr long indirectBuffer, long indirectOffset);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:4097</i>
	 */
	public static void wgpuRenderBundleEncoderDrawIndirect(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset) {
		wgpuRenderBundleEncoderDrawIndirect(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(indirectBuffer), indirectOffset);
	}
	protected native static void wgpuRenderBundleEncoderDrawIndirect(@Ptr long renderBundleEncoder, @Ptr long indirectBuffer, long indirectOffset);
	/**
	 * Original signature : <code>WGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder, const WGPURenderBundleDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4098</i>
	 */
	public static WebgpuLibrary.WGPURenderBundle wgpuRenderBundleEncoderFinish(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<WGPURenderBundleDescriptor > descriptor) {
		return new WebgpuLibrary.WGPURenderBundle(wgpuRenderBundleEncoderFinish(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuRenderBundleEncoderFinish(@Ptr long renderBundleEncoder, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4099</i>
	 */
	public static void wgpuRenderBundleEncoderInsertDebugMarker(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<Byte > markerLabel) {
		wgpuRenderBundleEncoderInsertDebugMarker(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(markerLabel));
	}
	protected native static void wgpuRenderBundleEncoderInsertDebugMarker(@Ptr long renderBundleEncoder, @Ptr long markerLabel);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderInsertDebugMarker2(WGPURenderBundleEncoder, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4100</i>
	 */
	public static void wgpuRenderBundleEncoderInsertDebugMarker2(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel) {
		wgpuRenderBundleEncoderInsertDebugMarker2(Pointer.getPeer(renderBundleEncoder), markerLabel);
	}
	protected native static void wgpuRenderBundleEncoderInsertDebugMarker2(@Ptr long renderBundleEncoder, WGPUStringView markerLabel);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder)</code><br>
	 * <i>native declaration : webgpu.h:4101</i>
	 */
	public static void wgpuRenderBundleEncoderPopDebugGroup(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder) {
		wgpuRenderBundleEncoderPopDebugGroup(Pointer.getPeer(renderBundleEncoder));
	}
	protected native static void wgpuRenderBundleEncoderPopDebugGroup(@Ptr long renderBundleEncoder);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4102</i>
	 */
	public static void wgpuRenderBundleEncoderPushDebugGroup(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<Byte > groupLabel) {
		wgpuRenderBundleEncoderPushDebugGroup(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(groupLabel));
	}
	protected native static void wgpuRenderBundleEncoderPushDebugGroup(@Ptr long renderBundleEncoder, @Ptr long groupLabel);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderPushDebugGroup2(WGPURenderBundleEncoder, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4103</i>
	 */
	public static void wgpuRenderBundleEncoderPushDebugGroup2(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel) {
		wgpuRenderBundleEncoderPushDebugGroup2(Pointer.getPeer(renderBundleEncoder), groupLabel);
	}
	protected native static void wgpuRenderBundleEncoderPushDebugGroup2(@Ptr long renderBundleEncoder, WGPUStringView groupLabel);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder, uint32_t, WGPUBindGroup, size_t, const uint32_t*)</code><br>
	 * <i>native declaration : webgpu.h:4104</i>
	 */
	public static void wgpuRenderBundleEncoderSetBindGroup(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int groupIndex, WebgpuLibrary.WGPUBindGroup group, @Ptr long dynamicOffsetCount, Pointer<Integer > dynamicOffsets) {
		wgpuRenderBundleEncoderSetBindGroup(Pointer.getPeer(renderBundleEncoder), groupIndex, Pointer.getPeer(group), dynamicOffsetCount, Pointer.getPeer(dynamicOffsets));
	}
	protected native static void wgpuRenderBundleEncoderSetBindGroup(@Ptr long renderBundleEncoder, int groupIndex, @Ptr long group, @Ptr long dynamicOffsetCount, @Ptr long dynamicOffsets);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder, WGPUBuffer, WGPUIndexFormat, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:4105</i>
	 */
	public static void wgpuRenderBundleEncoderSetIndexBuffer(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WebgpuLibrary.WGPUBuffer buffer, IntValuedEnum<WebgpuLibrary.WGPUIndexFormat > format, long offset, long size) {
		wgpuRenderBundleEncoderSetIndexBuffer(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(buffer), (int)format.value(), offset, size);
	}
	protected native static void wgpuRenderBundleEncoderSetIndexBuffer(@Ptr long renderBundleEncoder, @Ptr long buffer, int format, long offset, long size);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4106</i>
	 */
	public static void wgpuRenderBundleEncoderSetLabel(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, Pointer<Byte > label) {
		wgpuRenderBundleEncoderSetLabel(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(label));
	}
	protected native static void wgpuRenderBundleEncoderSetLabel(@Ptr long renderBundleEncoder, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderSetLabel2(WGPURenderBundleEncoder, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4107</i>
	 */
	public static void wgpuRenderBundleEncoderSetLabel2(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView label) {
		wgpuRenderBundleEncoderSetLabel2(Pointer.getPeer(renderBundleEncoder), label);
	}
	protected native static void wgpuRenderBundleEncoderSetLabel2(@Ptr long renderBundleEncoder, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder, WGPURenderPipeline)</code><br>
	 * <i>native declaration : webgpu.h:4108</i>
	 */
	public static void wgpuRenderBundleEncoderSetPipeline(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, WebgpuLibrary.WGPURenderPipeline pipeline) {
		wgpuRenderBundleEncoderSetPipeline(Pointer.getPeer(renderBundleEncoder), Pointer.getPeer(pipeline));
	}
	protected native static void wgpuRenderBundleEncoderSetPipeline(@Ptr long renderBundleEncoder, @Ptr long pipeline);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder, uint32_t, WGPUBuffer, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:4109</i>
	 */
	public static void wgpuRenderBundleEncoderSetVertexBuffer(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder, int slot, WebgpuLibrary.WGPUBuffer buffer, long offset, long size) {
		wgpuRenderBundleEncoderSetVertexBuffer(Pointer.getPeer(renderBundleEncoder), slot, Pointer.getPeer(buffer), offset, size);
	}
	protected native static void wgpuRenderBundleEncoderSetVertexBuffer(@Ptr long renderBundleEncoder, int slot, @Ptr long buffer, long offset, long size);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderAddRef(WGPURenderBundleEncoder)</code><br>
	 * <i>native declaration : webgpu.h:4110</i>
	 */
	public static void wgpuRenderBundleEncoderAddRef(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder) {
		wgpuRenderBundleEncoderAddRef(Pointer.getPeer(renderBundleEncoder));
	}
	protected native static void wgpuRenderBundleEncoderAddRef(@Ptr long renderBundleEncoder);
	/**
	 * Original signature : <code>void wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder)</code><br>
	 * <i>native declaration : webgpu.h:4111</i>
	 */
	public static void wgpuRenderBundleEncoderRelease(WebgpuLibrary.WGPURenderBundleEncoder renderBundleEncoder) {
		wgpuRenderBundleEncoderRelease(Pointer.getPeer(renderBundleEncoder));
	}
	protected native static void wgpuRenderBundleEncoderRelease(@Ptr long renderBundleEncoder);
	/**
	 * Methods of RenderPassEncoder<br>
	 * Original signature : <code>void wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:4114</i>
	 */
	public static void wgpuRenderPassEncoderBeginOcclusionQuery(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int queryIndex) {
		wgpuRenderPassEncoderBeginOcclusionQuery(Pointer.getPeer(renderPassEncoder), queryIndex);
	}
	protected native static void wgpuRenderPassEncoderBeginOcclusionQuery(@Ptr long renderPassEncoder, int queryIndex);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderDraw(WGPURenderPassEncoder, uint32_t, uint32_t, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:4115</i>
	 */
	public static void wgpuRenderPassEncoderDraw(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int vertexCount, int instanceCount, int firstVertex, int firstInstance) {
		wgpuRenderPassEncoderDraw(Pointer.getPeer(renderPassEncoder), vertexCount, instanceCount, firstVertex, firstInstance);
	}
	protected native static void wgpuRenderPassEncoderDraw(@Ptr long renderPassEncoder, int vertexCount, int instanceCount, int firstVertex, int firstInstance);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder, uint32_t, uint32_t, uint32_t, int32_t, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:4116</i>
	 */
	public static void wgpuRenderPassEncoderDrawIndexed(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance) {
		wgpuRenderPassEncoderDrawIndexed(Pointer.getPeer(renderPassEncoder), indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
	}
	protected native static void wgpuRenderPassEncoderDrawIndexed(@Ptr long renderPassEncoder, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:4117</i>
	 */
	public static void wgpuRenderPassEncoderDrawIndexedIndirect(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset) {
		wgpuRenderPassEncoderDrawIndexedIndirect(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(indirectBuffer), indirectOffset);
	}
	protected native static void wgpuRenderPassEncoderDrawIndexedIndirect(@Ptr long renderPassEncoder, @Ptr long indirectBuffer, long indirectOffset);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:4118</i>
	 */
	public static void wgpuRenderPassEncoderDrawIndirect(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset) {
		wgpuRenderPassEncoderDrawIndirect(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(indirectBuffer), indirectOffset);
	}
	protected native static void wgpuRenderPassEncoderDrawIndirect(@Ptr long renderPassEncoder, @Ptr long indirectBuffer, long indirectOffset);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderEnd(WGPURenderPassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:4119</i>
	 */
	public static void wgpuRenderPassEncoderEnd(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder) {
		wgpuRenderPassEncoderEnd(Pointer.getPeer(renderPassEncoder));
	}
	protected native static void wgpuRenderPassEncoderEnd(@Ptr long renderPassEncoder);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:4120</i>
	 */
	public static void wgpuRenderPassEncoderEndOcclusionQuery(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder) {
		wgpuRenderPassEncoderEndOcclusionQuery(Pointer.getPeer(renderPassEncoder));
	}
	protected native static void wgpuRenderPassEncoderEndOcclusionQuery(@Ptr long renderPassEncoder);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder, size_t, const WGPURenderBundle*)</code><br>
	 * <i>native declaration : webgpu.h:4121</i>
	 */
	public static void wgpuRenderPassEncoderExecuteBundles(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, @Ptr long bundleCount, Pointer<WebgpuLibrary.WGPURenderBundle > bundles) {
		wgpuRenderPassEncoderExecuteBundles(Pointer.getPeer(renderPassEncoder), bundleCount, Pointer.getPeer(bundles));
	}
	protected native static void wgpuRenderPassEncoderExecuteBundles(@Ptr long renderPassEncoder, @Ptr long bundleCount, @Ptr long bundles);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4122</i>
	 */
	public static void wgpuRenderPassEncoderInsertDebugMarker(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<Byte > markerLabel) {
		wgpuRenderPassEncoderInsertDebugMarker(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(markerLabel));
	}
	protected native static void wgpuRenderPassEncoderInsertDebugMarker(@Ptr long renderPassEncoder, @Ptr long markerLabel);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderInsertDebugMarker2(WGPURenderPassEncoder, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4123</i>
	 */
	public static void wgpuRenderPassEncoderInsertDebugMarker2(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WGPUStringView markerLabel) {
		wgpuRenderPassEncoderInsertDebugMarker2(Pointer.getPeer(renderPassEncoder), markerLabel);
	}
	protected native static void wgpuRenderPassEncoderInsertDebugMarker2(@Ptr long renderPassEncoder, WGPUStringView markerLabel);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderMultiDrawIndexedIndirect(WGPURenderPassEncoder, WGPUBuffer, uint64_t, uint32_t, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:4124</i>
	 */
	public static void wgpuRenderPassEncoderMultiDrawIndexedIndirect(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset, int maxDrawCount, WebgpuLibrary.WGPUBuffer drawCountBuffer, long drawCountBufferOffset) {
		wgpuRenderPassEncoderMultiDrawIndexedIndirect(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(indirectBuffer), indirectOffset, maxDrawCount, Pointer.getPeer(drawCountBuffer), drawCountBufferOffset);
	}
	protected native static void wgpuRenderPassEncoderMultiDrawIndexedIndirect(@Ptr long renderPassEncoder, @Ptr long indirectBuffer, long indirectOffset, int maxDrawCount, @Ptr long drawCountBuffer, long drawCountBufferOffset);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderMultiDrawIndirect(WGPURenderPassEncoder, WGPUBuffer, uint64_t, uint32_t, WGPUBuffer, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:4125</i>
	 */
	public static void wgpuRenderPassEncoderMultiDrawIndirect(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPUBuffer indirectBuffer, long indirectOffset, int maxDrawCount, WebgpuLibrary.WGPUBuffer drawCountBuffer, long drawCountBufferOffset) {
		wgpuRenderPassEncoderMultiDrawIndirect(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(indirectBuffer), indirectOffset, maxDrawCount, Pointer.getPeer(drawCountBuffer), drawCountBufferOffset);
	}
	protected native static void wgpuRenderPassEncoderMultiDrawIndirect(@Ptr long renderPassEncoder, @Ptr long indirectBuffer, long indirectOffset, int maxDrawCount, @Ptr long drawCountBuffer, long drawCountBufferOffset);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderPixelLocalStorageBarrier(WGPURenderPassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:4126</i>
	 */
	public static void wgpuRenderPassEncoderPixelLocalStorageBarrier(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder) {
		wgpuRenderPassEncoderPixelLocalStorageBarrier(Pointer.getPeer(renderPassEncoder));
	}
	protected native static void wgpuRenderPassEncoderPixelLocalStorageBarrier(@Ptr long renderPassEncoder);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:4127</i>
	 */
	public static void wgpuRenderPassEncoderPopDebugGroup(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder) {
		wgpuRenderPassEncoderPopDebugGroup(Pointer.getPeer(renderPassEncoder));
	}
	protected native static void wgpuRenderPassEncoderPopDebugGroup(@Ptr long renderPassEncoder);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4128</i>
	 */
	public static void wgpuRenderPassEncoderPushDebugGroup(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<Byte > groupLabel) {
		wgpuRenderPassEncoderPushDebugGroup(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(groupLabel));
	}
	protected native static void wgpuRenderPassEncoderPushDebugGroup(@Ptr long renderPassEncoder, @Ptr long groupLabel);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderPushDebugGroup2(WGPURenderPassEncoder, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4129</i>
	 */
	public static void wgpuRenderPassEncoderPushDebugGroup2(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WGPUStringView groupLabel) {
		wgpuRenderPassEncoderPushDebugGroup2(Pointer.getPeer(renderPassEncoder), groupLabel);
	}
	protected native static void wgpuRenderPassEncoderPushDebugGroup2(@Ptr long renderPassEncoder, WGPUStringView groupLabel);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder, uint32_t, WGPUBindGroup, size_t, const uint32_t*)</code><br>
	 * <i>native declaration : webgpu.h:4130</i>
	 */
	public static void wgpuRenderPassEncoderSetBindGroup(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int groupIndex, WebgpuLibrary.WGPUBindGroup group, @Ptr long dynamicOffsetCount, Pointer<Integer > dynamicOffsets) {
		wgpuRenderPassEncoderSetBindGroup(Pointer.getPeer(renderPassEncoder), groupIndex, Pointer.getPeer(group), dynamicOffsetCount, Pointer.getPeer(dynamicOffsets));
	}
	protected native static void wgpuRenderPassEncoderSetBindGroup(@Ptr long renderPassEncoder, int groupIndex, @Ptr long group, @Ptr long dynamicOffsetCount, @Ptr long dynamicOffsets);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder, const WGPUColor*)</code><br>
	 * <i>native declaration : webgpu.h:4131</i>
	 */
	public static void wgpuRenderPassEncoderSetBlendConstant(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<WGPUColor > color) {
		wgpuRenderPassEncoderSetBlendConstant(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(color));
	}
	protected native static void wgpuRenderPassEncoderSetBlendConstant(@Ptr long renderPassEncoder, @Ptr long color);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder, WGPUBuffer, WGPUIndexFormat, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:4132</i>
	 */
	public static void wgpuRenderPassEncoderSetIndexBuffer(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPUBuffer buffer, IntValuedEnum<WebgpuLibrary.WGPUIndexFormat > format, long offset, long size) {
		wgpuRenderPassEncoderSetIndexBuffer(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(buffer), (int)format.value(), offset, size);
	}
	protected native static void wgpuRenderPassEncoderSetIndexBuffer(@Ptr long renderPassEncoder, @Ptr long buffer, int format, long offset, long size);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4133</i>
	 */
	public static void wgpuRenderPassEncoderSetLabel(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, Pointer<Byte > label) {
		wgpuRenderPassEncoderSetLabel(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(label));
	}
	protected native static void wgpuRenderPassEncoderSetLabel(@Ptr long renderPassEncoder, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetLabel2(WGPURenderPassEncoder, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4134</i>
	 */
	public static void wgpuRenderPassEncoderSetLabel2(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WGPUStringView label) {
		wgpuRenderPassEncoderSetLabel2(Pointer.getPeer(renderPassEncoder), label);
	}
	protected native static void wgpuRenderPassEncoderSetLabel2(@Ptr long renderPassEncoder, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder, WGPURenderPipeline)</code><br>
	 * <i>native declaration : webgpu.h:4135</i>
	 */
	public static void wgpuRenderPassEncoderSetPipeline(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPURenderPipeline pipeline) {
		wgpuRenderPassEncoderSetPipeline(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(pipeline));
	}
	protected native static void wgpuRenderPassEncoderSetPipeline(@Ptr long renderPassEncoder, @Ptr long pipeline);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder, uint32_t, uint32_t, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:4136</i>
	 */
	public static void wgpuRenderPassEncoderSetScissorRect(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int x, int y, int width, int height) {
		wgpuRenderPassEncoderSetScissorRect(Pointer.getPeer(renderPassEncoder), x, y, width, height);
	}
	protected native static void wgpuRenderPassEncoderSetScissorRect(@Ptr long renderPassEncoder, int x, int y, int width, int height);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:4137</i>
	 */
	public static void wgpuRenderPassEncoderSetStencilReference(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int reference) {
		wgpuRenderPassEncoderSetStencilReference(Pointer.getPeer(renderPassEncoder), reference);
	}
	protected native static void wgpuRenderPassEncoderSetStencilReference(@Ptr long renderPassEncoder, int reference);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder, uint32_t, WGPUBuffer, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : webgpu.h:4138</i>
	 */
	public static void wgpuRenderPassEncoderSetVertexBuffer(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, int slot, WebgpuLibrary.WGPUBuffer buffer, long offset, long size) {
		wgpuRenderPassEncoderSetVertexBuffer(Pointer.getPeer(renderPassEncoder), slot, Pointer.getPeer(buffer), offset, size);
	}
	protected native static void wgpuRenderPassEncoderSetVertexBuffer(@Ptr long renderPassEncoder, int slot, @Ptr long buffer, long offset, long size);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder, float, float, float, float, float, float)</code><br>
	 * <i>native declaration : webgpu.h:4139</i>
	 */
	public static void wgpuRenderPassEncoderSetViewport(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth) {
		wgpuRenderPassEncoderSetViewport(Pointer.getPeer(renderPassEncoder), x, y, width, height, minDepth, maxDepth);
	}
	protected native static void wgpuRenderPassEncoderSetViewport(@Ptr long renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderWriteTimestamp(WGPURenderPassEncoder, WGPUQuerySet, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:4140</i>
	 */
	public static void wgpuRenderPassEncoderWriteTimestamp(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder, WebgpuLibrary.WGPUQuerySet querySet, int queryIndex) {
		wgpuRenderPassEncoderWriteTimestamp(Pointer.getPeer(renderPassEncoder), Pointer.getPeer(querySet), queryIndex);
	}
	protected native static void wgpuRenderPassEncoderWriteTimestamp(@Ptr long renderPassEncoder, @Ptr long querySet, int queryIndex);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderAddRef(WGPURenderPassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:4141</i>
	 */
	public static void wgpuRenderPassEncoderAddRef(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder) {
		wgpuRenderPassEncoderAddRef(Pointer.getPeer(renderPassEncoder));
	}
	protected native static void wgpuRenderPassEncoderAddRef(@Ptr long renderPassEncoder);
	/**
	 * Original signature : <code>void wgpuRenderPassEncoderRelease(WGPURenderPassEncoder)</code><br>
	 * <i>native declaration : webgpu.h:4142</i>
	 */
	public static void wgpuRenderPassEncoderRelease(WebgpuLibrary.WGPURenderPassEncoder renderPassEncoder) {
		wgpuRenderPassEncoderRelease(Pointer.getPeer(renderPassEncoder));
	}
	protected native static void wgpuRenderPassEncoderRelease(@Ptr long renderPassEncoder);
	/**
	 * Methods of RenderPipeline<br>
	 * Original signature : <code>WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline, uint32_t)</code><br>
	 * <i>native declaration : webgpu.h:4145</i>
	 */
	public static WebgpuLibrary.WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WebgpuLibrary.WGPURenderPipeline renderPipeline, int groupIndex) {
		return new WebgpuLibrary.WGPUBindGroupLayout(wgpuRenderPipelineGetBindGroupLayout(Pointer.getPeer(renderPipeline), groupIndex));
	}
	@Ptr 
	protected native static long wgpuRenderPipelineGetBindGroupLayout(@Ptr long renderPipeline, int groupIndex);
	/**
	 * Original signature : <code>void wgpuRenderPipelineSetLabel(WGPURenderPipeline, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4146</i>
	 */
	public static void wgpuRenderPipelineSetLabel(WebgpuLibrary.WGPURenderPipeline renderPipeline, Pointer<Byte > label) {
		wgpuRenderPipelineSetLabel(Pointer.getPeer(renderPipeline), Pointer.getPeer(label));
	}
	protected native static void wgpuRenderPipelineSetLabel(@Ptr long renderPipeline, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuRenderPipelineSetLabel2(WGPURenderPipeline, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4147</i>
	 */
	public static void wgpuRenderPipelineSetLabel2(WebgpuLibrary.WGPURenderPipeline renderPipeline, WGPUStringView label) {
		wgpuRenderPipelineSetLabel2(Pointer.getPeer(renderPipeline), label);
	}
	protected native static void wgpuRenderPipelineSetLabel2(@Ptr long renderPipeline, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuRenderPipelineAddRef(WGPURenderPipeline)</code><br>
	 * <i>native declaration : webgpu.h:4148</i>
	 */
	public static void wgpuRenderPipelineAddRef(WebgpuLibrary.WGPURenderPipeline renderPipeline) {
		wgpuRenderPipelineAddRef(Pointer.getPeer(renderPipeline));
	}
	protected native static void wgpuRenderPipelineAddRef(@Ptr long renderPipeline);
	/**
	 * Original signature : <code>void wgpuRenderPipelineRelease(WGPURenderPipeline)</code><br>
	 * <i>native declaration : webgpu.h:4149</i>
	 */
	public static void wgpuRenderPipelineRelease(WebgpuLibrary.WGPURenderPipeline renderPipeline) {
		wgpuRenderPipelineRelease(Pointer.getPeer(renderPipeline));
	}
	protected native static void wgpuRenderPipelineRelease(@Ptr long renderPipeline);
	/**
	 * Methods of Sampler<br>
	 * Original signature : <code>void wgpuSamplerSetLabel(WGPUSampler, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4152</i>
	 */
	public static void wgpuSamplerSetLabel(WebgpuLibrary.WGPUSampler sampler, Pointer<Byte > label) {
		wgpuSamplerSetLabel(Pointer.getPeer(sampler), Pointer.getPeer(label));
	}
	protected native static void wgpuSamplerSetLabel(@Ptr long sampler, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuSamplerSetLabel2(WGPUSampler, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4153</i>
	 */
	public static void wgpuSamplerSetLabel2(WebgpuLibrary.WGPUSampler sampler, WGPUStringView label) {
		wgpuSamplerSetLabel2(Pointer.getPeer(sampler), label);
	}
	protected native static void wgpuSamplerSetLabel2(@Ptr long sampler, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuSamplerAddRef(WGPUSampler)</code><br>
	 * <i>native declaration : webgpu.h:4154</i>
	 */
	public static void wgpuSamplerAddRef(WebgpuLibrary.WGPUSampler sampler) {
		wgpuSamplerAddRef(Pointer.getPeer(sampler));
	}
	protected native static void wgpuSamplerAddRef(@Ptr long sampler);
	/**
	 * Original signature : <code>void wgpuSamplerRelease(WGPUSampler)</code><br>
	 * <i>native declaration : webgpu.h:4155</i>
	 */
	public static void wgpuSamplerRelease(WebgpuLibrary.WGPUSampler sampler) {
		wgpuSamplerRelease(Pointer.getPeer(sampler));
	}
	protected native static void wgpuSamplerRelease(@Ptr long sampler);
	/**
	 * Methods of ShaderModule<br>
	 * Original signature : <code>void wgpuShaderModuleGetCompilationInfo(WGPUShaderModule, WGPUCompilationInfoCallback, void*)</code><br>
	 * <i>native declaration : webgpu.h:4158</i>
	 */
	public static void wgpuShaderModuleGetCompilationInfo(WebgpuLibrary.WGPUShaderModule shaderModule, Pointer<WebgpuLibrary.WGPUCompilationInfoCallback > callback, Pointer<? > userdata) {
		wgpuShaderModuleGetCompilationInfo(Pointer.getPeer(shaderModule), Pointer.getPeer(callback), Pointer.getPeer(userdata));
	}
	protected native static void wgpuShaderModuleGetCompilationInfo(@Ptr long shaderModule, @Ptr long callback, @Ptr long userdata);
	/**
	 * Original signature : <code>WGPUFuture wgpuShaderModuleGetCompilationInfo2(WGPUShaderModule, WGPUCompilationInfoCallbackInfo2)</code><br>
	 * <i>native declaration : webgpu.h:4159</i>
	 */
	public static WGPUFuture wgpuShaderModuleGetCompilationInfo2(WebgpuLibrary.WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo2 callbackInfo) {
		return wgpuShaderModuleGetCompilationInfo2(Pointer.getPeer(shaderModule), callbackInfo);
	}
	protected native static WGPUFuture wgpuShaderModuleGetCompilationInfo2(@Ptr long shaderModule, WGPUCompilationInfoCallbackInfo2 callbackInfo);
	/**
	 * Original signature : <code>WGPUFuture wgpuShaderModuleGetCompilationInfoF(WGPUShaderModule, WGPUCompilationInfoCallbackInfo)</code><br>
	 * <i>native declaration : webgpu.h:4160</i>
	 */
	public static WGPUFuture wgpuShaderModuleGetCompilationInfoF(WebgpuLibrary.WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo) {
		return wgpuShaderModuleGetCompilationInfoF(Pointer.getPeer(shaderModule), callbackInfo);
	}
	protected native static WGPUFuture wgpuShaderModuleGetCompilationInfoF(@Ptr long shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo);
	/**
	 * Original signature : <code>void wgpuShaderModuleSetLabel(WGPUShaderModule, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4161</i>
	 */
	public static void wgpuShaderModuleSetLabel(WebgpuLibrary.WGPUShaderModule shaderModule, Pointer<Byte > label) {
		wgpuShaderModuleSetLabel(Pointer.getPeer(shaderModule), Pointer.getPeer(label));
	}
	protected native static void wgpuShaderModuleSetLabel(@Ptr long shaderModule, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuShaderModuleSetLabel2(WGPUShaderModule, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4162</i>
	 */
	public static void wgpuShaderModuleSetLabel2(WebgpuLibrary.WGPUShaderModule shaderModule, WGPUStringView label) {
		wgpuShaderModuleSetLabel2(Pointer.getPeer(shaderModule), label);
	}
	protected native static void wgpuShaderModuleSetLabel2(@Ptr long shaderModule, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuShaderModuleAddRef(WGPUShaderModule)</code><br>
	 * <i>native declaration : webgpu.h:4163</i>
	 */
	public static void wgpuShaderModuleAddRef(WebgpuLibrary.WGPUShaderModule shaderModule) {
		wgpuShaderModuleAddRef(Pointer.getPeer(shaderModule));
	}
	protected native static void wgpuShaderModuleAddRef(@Ptr long shaderModule);
	/**
	 * Original signature : <code>void wgpuShaderModuleRelease(WGPUShaderModule)</code><br>
	 * <i>native declaration : webgpu.h:4164</i>
	 */
	public static void wgpuShaderModuleRelease(WebgpuLibrary.WGPUShaderModule shaderModule) {
		wgpuShaderModuleRelease(Pointer.getPeer(shaderModule));
	}
	protected native static void wgpuShaderModuleRelease(@Ptr long shaderModule);
	/**
	 * Methods of SharedBufferMemory<br>
	 * Original signature : <code>WGPUStatus wgpuSharedBufferMemoryBeginAccess(WGPUSharedBufferMemory, WGPUBuffer, const WGPUSharedBufferMemoryBeginAccessDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4167</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuSharedBufferMemoryBeginAccess(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory, WebgpuLibrary.WGPUBuffer buffer, Pointer<WGPUSharedBufferMemoryBeginAccessDescriptor > descriptor) {
		return FlagSet.fromValue(wgpuSharedBufferMemoryBeginAccess(Pointer.getPeer(sharedBufferMemory), Pointer.getPeer(buffer), Pointer.getPeer(descriptor)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuSharedBufferMemoryBeginAccess(@Ptr long sharedBufferMemory, @Ptr long buffer, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUBuffer wgpuSharedBufferMemoryCreateBuffer(WGPUSharedBufferMemory, const WGPUBufferDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4168</i>
	 */
	public static WebgpuLibrary.WGPUBuffer wgpuSharedBufferMemoryCreateBuffer(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory, Pointer<WGPUBufferDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUBuffer(wgpuSharedBufferMemoryCreateBuffer(Pointer.getPeer(sharedBufferMemory), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuSharedBufferMemoryCreateBuffer(@Ptr long sharedBufferMemory, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUStatus wgpuSharedBufferMemoryEndAccess(WGPUSharedBufferMemory, WGPUBuffer, WGPUSharedBufferMemoryEndAccessState*)</code><br>
	 * <i>native declaration : webgpu.h:4169</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuSharedBufferMemoryEndAccess(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory, WebgpuLibrary.WGPUBuffer buffer, Pointer<WGPUSharedBufferMemoryEndAccessState > descriptor) {
		return FlagSet.fromValue(wgpuSharedBufferMemoryEndAccess(Pointer.getPeer(sharedBufferMemory), Pointer.getPeer(buffer), Pointer.getPeer(descriptor)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuSharedBufferMemoryEndAccess(@Ptr long sharedBufferMemory, @Ptr long buffer, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUStatus wgpuSharedBufferMemoryGetProperties(WGPUSharedBufferMemory, WGPUSharedBufferMemoryProperties*)</code><br>
	 * <i>native declaration : webgpu.h:4170</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuSharedBufferMemoryGetProperties(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory, Pointer<WGPUSharedBufferMemoryProperties > properties) {
		return FlagSet.fromValue(wgpuSharedBufferMemoryGetProperties(Pointer.getPeer(sharedBufferMemory), Pointer.getPeer(properties)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuSharedBufferMemoryGetProperties(@Ptr long sharedBufferMemory, @Ptr long properties);
	/**
	 * Original signature : <code>WGPUBool wgpuSharedBufferMemoryIsDeviceLost(WGPUSharedBufferMemory)</code><br>
	 * <i>native declaration : webgpu.h:4171</i>
	 */
	public static int wgpuSharedBufferMemoryIsDeviceLost(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory) {
		return wgpuSharedBufferMemoryIsDeviceLost(Pointer.getPeer(sharedBufferMemory));
	}
	protected native static int wgpuSharedBufferMemoryIsDeviceLost(@Ptr long sharedBufferMemory);
	/**
	 * Original signature : <code>void wgpuSharedBufferMemorySetLabel(WGPUSharedBufferMemory, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4172</i>
	 */
	public static void wgpuSharedBufferMemorySetLabel(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory, Pointer<Byte > label) {
		wgpuSharedBufferMemorySetLabel(Pointer.getPeer(sharedBufferMemory), Pointer.getPeer(label));
	}
	protected native static void wgpuSharedBufferMemorySetLabel(@Ptr long sharedBufferMemory, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuSharedBufferMemorySetLabel2(WGPUSharedBufferMemory, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4173</i>
	 */
	public static void wgpuSharedBufferMemorySetLabel2(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory, WGPUStringView label) {
		wgpuSharedBufferMemorySetLabel2(Pointer.getPeer(sharedBufferMemory), label);
	}
	protected native static void wgpuSharedBufferMemorySetLabel2(@Ptr long sharedBufferMemory, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuSharedBufferMemoryAddRef(WGPUSharedBufferMemory)</code><br>
	 * <i>native declaration : webgpu.h:4174</i>
	 */
	public static void wgpuSharedBufferMemoryAddRef(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory) {
		wgpuSharedBufferMemoryAddRef(Pointer.getPeer(sharedBufferMemory));
	}
	protected native static void wgpuSharedBufferMemoryAddRef(@Ptr long sharedBufferMemory);
	/**
	 * Original signature : <code>void wgpuSharedBufferMemoryRelease(WGPUSharedBufferMemory)</code><br>
	 * <i>native declaration : webgpu.h:4175</i>
	 */
	public static void wgpuSharedBufferMemoryRelease(WebgpuLibrary.WGPUSharedBufferMemory sharedBufferMemory) {
		wgpuSharedBufferMemoryRelease(Pointer.getPeer(sharedBufferMemory));
	}
	protected native static void wgpuSharedBufferMemoryRelease(@Ptr long sharedBufferMemory);
	/**
	 * Methods of SharedFence<br>
	 * Original signature : <code>void wgpuSharedFenceExportInfo(WGPUSharedFence, WGPUSharedFenceExportInfo*)</code><br>
	 * <i>native declaration : webgpu.h:4178</i>
	 */
	public static void wgpuSharedFenceExportInfo(WebgpuLibrary.WGPUSharedFence sharedFence, Pointer<WGPUSharedFenceExportInfo > info) {
		wgpuSharedFenceExportInfo(Pointer.getPeer(sharedFence), Pointer.getPeer(info));
	}
	protected native static void wgpuSharedFenceExportInfo(@Ptr long sharedFence, @Ptr long info);
	/**
	 * Original signature : <code>void wgpuSharedFenceAddRef(WGPUSharedFence)</code><br>
	 * <i>native declaration : webgpu.h:4179</i>
	 */
	public static void wgpuSharedFenceAddRef(WebgpuLibrary.WGPUSharedFence sharedFence) {
		wgpuSharedFenceAddRef(Pointer.getPeer(sharedFence));
	}
	protected native static void wgpuSharedFenceAddRef(@Ptr long sharedFence);
	/**
	 * Original signature : <code>void wgpuSharedFenceRelease(WGPUSharedFence)</code><br>
	 * <i>native declaration : webgpu.h:4180</i>
	 */
	public static void wgpuSharedFenceRelease(WebgpuLibrary.WGPUSharedFence sharedFence) {
		wgpuSharedFenceRelease(Pointer.getPeer(sharedFence));
	}
	protected native static void wgpuSharedFenceRelease(@Ptr long sharedFence);
	/**
	 * Methods of SharedTextureMemory<br>
	 * Original signature : <code>WGPUStatus wgpuSharedTextureMemoryBeginAccess(WGPUSharedTextureMemory, WGPUTexture, const WGPUSharedTextureMemoryBeginAccessDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4183</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuSharedTextureMemoryBeginAccess(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory, WebgpuLibrary.WGPUTexture texture, Pointer<WGPUSharedTextureMemoryBeginAccessDescriptor > descriptor) {
		return FlagSet.fromValue(wgpuSharedTextureMemoryBeginAccess(Pointer.getPeer(sharedTextureMemory), Pointer.getPeer(texture), Pointer.getPeer(descriptor)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuSharedTextureMemoryBeginAccess(@Ptr long sharedTextureMemory, @Ptr long texture, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUTexture wgpuSharedTextureMemoryCreateTexture(WGPUSharedTextureMemory, const WGPUTextureDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4184</i>
	 */
	public static WebgpuLibrary.WGPUTexture wgpuSharedTextureMemoryCreateTexture(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory, Pointer<WGPUTextureDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUTexture(wgpuSharedTextureMemoryCreateTexture(Pointer.getPeer(sharedTextureMemory), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuSharedTextureMemoryCreateTexture(@Ptr long sharedTextureMemory, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUStatus wgpuSharedTextureMemoryEndAccess(WGPUSharedTextureMemory, WGPUTexture, WGPUSharedTextureMemoryEndAccessState*)</code><br>
	 * <i>native declaration : webgpu.h:4185</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuSharedTextureMemoryEndAccess(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory, WebgpuLibrary.WGPUTexture texture, Pointer<WGPUSharedTextureMemoryEndAccessState > descriptor) {
		return FlagSet.fromValue(wgpuSharedTextureMemoryEndAccess(Pointer.getPeer(sharedTextureMemory), Pointer.getPeer(texture), Pointer.getPeer(descriptor)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuSharedTextureMemoryEndAccess(@Ptr long sharedTextureMemory, @Ptr long texture, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUStatus wgpuSharedTextureMemoryGetProperties(WGPUSharedTextureMemory, WGPUSharedTextureMemoryProperties*)</code><br>
	 * <i>native declaration : webgpu.h:4186</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuSharedTextureMemoryGetProperties(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory, Pointer<WGPUSharedTextureMemoryProperties > properties) {
		return FlagSet.fromValue(wgpuSharedTextureMemoryGetProperties(Pointer.getPeer(sharedTextureMemory), Pointer.getPeer(properties)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuSharedTextureMemoryGetProperties(@Ptr long sharedTextureMemory, @Ptr long properties);
	/**
	 * Original signature : <code>WGPUBool wgpuSharedTextureMemoryIsDeviceLost(WGPUSharedTextureMemory)</code><br>
	 * <i>native declaration : webgpu.h:4187</i>
	 */
	public static int wgpuSharedTextureMemoryIsDeviceLost(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory) {
		return wgpuSharedTextureMemoryIsDeviceLost(Pointer.getPeer(sharedTextureMemory));
	}
	protected native static int wgpuSharedTextureMemoryIsDeviceLost(@Ptr long sharedTextureMemory);
	/**
	 * Original signature : <code>void wgpuSharedTextureMemorySetLabel(WGPUSharedTextureMemory, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4188</i>
	 */
	public static void wgpuSharedTextureMemorySetLabel(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory, Pointer<Byte > label) {
		wgpuSharedTextureMemorySetLabel(Pointer.getPeer(sharedTextureMemory), Pointer.getPeer(label));
	}
	protected native static void wgpuSharedTextureMemorySetLabel(@Ptr long sharedTextureMemory, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuSharedTextureMemorySetLabel2(WGPUSharedTextureMemory, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4189</i>
	 */
	public static void wgpuSharedTextureMemorySetLabel2(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory, WGPUStringView label) {
		wgpuSharedTextureMemorySetLabel2(Pointer.getPeer(sharedTextureMemory), label);
	}
	protected native static void wgpuSharedTextureMemorySetLabel2(@Ptr long sharedTextureMemory, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuSharedTextureMemoryAddRef(WGPUSharedTextureMemory)</code><br>
	 * <i>native declaration : webgpu.h:4190</i>
	 */
	public static void wgpuSharedTextureMemoryAddRef(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory) {
		wgpuSharedTextureMemoryAddRef(Pointer.getPeer(sharedTextureMemory));
	}
	protected native static void wgpuSharedTextureMemoryAddRef(@Ptr long sharedTextureMemory);
	/**
	 * Original signature : <code>void wgpuSharedTextureMemoryRelease(WGPUSharedTextureMemory)</code><br>
	 * <i>native declaration : webgpu.h:4191</i>
	 */
	public static void wgpuSharedTextureMemoryRelease(WebgpuLibrary.WGPUSharedTextureMemory sharedTextureMemory) {
		wgpuSharedTextureMemoryRelease(Pointer.getPeer(sharedTextureMemory));
	}
	protected native static void wgpuSharedTextureMemoryRelease(@Ptr long sharedTextureMemory);
	/**
	 * Methods of Surface<br>
	 * Original signature : <code>void wgpuSurfaceConfigure(WGPUSurface, const WGPUSurfaceConfiguration*)</code><br>
	 * <i>native declaration : webgpu.h:4194</i>
	 */
	public static void wgpuSurfaceConfigure(WebgpuLibrary.WGPUSurface surface, Pointer<WGPUSurfaceConfiguration > config) {
		wgpuSurfaceConfigure(Pointer.getPeer(surface), Pointer.getPeer(config));
	}
	protected native static void wgpuSurfaceConfigure(@Ptr long surface, @Ptr long config);
	/**
	 * Original signature : <code>WGPUStatus wgpuSurfaceGetCapabilities(WGPUSurface, WGPUAdapter, WGPUSurfaceCapabilities*)</code><br>
	 * <i>native declaration : webgpu.h:4195</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUStatus > wgpuSurfaceGetCapabilities(WebgpuLibrary.WGPUSurface surface, WebgpuLibrary.WGPUAdapter adapter, Pointer<WGPUSurfaceCapabilities > capabilities) {
		return FlagSet.fromValue(wgpuSurfaceGetCapabilities(Pointer.getPeer(surface), Pointer.getPeer(adapter), Pointer.getPeer(capabilities)), WebgpuLibrary.WGPUStatus.class);
	}
	protected native static int wgpuSurfaceGetCapabilities(@Ptr long surface, @Ptr long adapter, @Ptr long capabilities);
	/**
	 * Original signature : <code>void wgpuSurfaceGetCurrentTexture(WGPUSurface, WGPUSurfaceTexture*)</code><br>
	 * <i>native declaration : webgpu.h:4196</i>
	 */
	public static void wgpuSurfaceGetCurrentTexture(WebgpuLibrary.WGPUSurface surface, Pointer<WGPUSurfaceTexture > surfaceTexture) {
		wgpuSurfaceGetCurrentTexture(Pointer.getPeer(surface), Pointer.getPeer(surfaceTexture));
	}
	protected native static void wgpuSurfaceGetCurrentTexture(@Ptr long surface, @Ptr long surfaceTexture);
	/**
	 * Original signature : <code>WGPUTextureFormat wgpuSurfaceGetPreferredFormat(WGPUSurface, WGPUAdapter)</code><br>
	 * <i>native declaration : webgpu.h:4197</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUTextureFormat > wgpuSurfaceGetPreferredFormat(WebgpuLibrary.WGPUSurface surface, WebgpuLibrary.WGPUAdapter adapter) {
		return FlagSet.fromValue(wgpuSurfaceGetPreferredFormat(Pointer.getPeer(surface), Pointer.getPeer(adapter)), WebgpuLibrary.WGPUTextureFormat.class);
	}
	protected native static int wgpuSurfaceGetPreferredFormat(@Ptr long surface, @Ptr long adapter);
	/**
	 * Original signature : <code>void wgpuSurfacePresent(WGPUSurface)</code><br>
	 * <i>native declaration : webgpu.h:4198</i>
	 */
	public static void wgpuSurfacePresent(WebgpuLibrary.WGPUSurface surface) {
		wgpuSurfacePresent(Pointer.getPeer(surface));
	}
	protected native static void wgpuSurfacePresent(@Ptr long surface);
	/**
	 * Original signature : <code>void wgpuSurfaceSetLabel(WGPUSurface, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4199</i>
	 */
	public static void wgpuSurfaceSetLabel(WebgpuLibrary.WGPUSurface surface, Pointer<Byte > label) {
		wgpuSurfaceSetLabel(Pointer.getPeer(surface), Pointer.getPeer(label));
	}
	protected native static void wgpuSurfaceSetLabel(@Ptr long surface, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuSurfaceSetLabel2(WGPUSurface, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4200</i>
	 */
	public static void wgpuSurfaceSetLabel2(WebgpuLibrary.WGPUSurface surface, WGPUStringView label) {
		wgpuSurfaceSetLabel2(Pointer.getPeer(surface), label);
	}
	protected native static void wgpuSurfaceSetLabel2(@Ptr long surface, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuSurfaceUnconfigure(WGPUSurface)</code><br>
	 * <i>native declaration : webgpu.h:4201</i>
	 */
	public static void wgpuSurfaceUnconfigure(WebgpuLibrary.WGPUSurface surface) {
		wgpuSurfaceUnconfigure(Pointer.getPeer(surface));
	}
	protected native static void wgpuSurfaceUnconfigure(@Ptr long surface);
	/**
	 * Original signature : <code>void wgpuSurfaceAddRef(WGPUSurface)</code><br>
	 * <i>native declaration : webgpu.h:4202</i>
	 */
	public static void wgpuSurfaceAddRef(WebgpuLibrary.WGPUSurface surface) {
		wgpuSurfaceAddRef(Pointer.getPeer(surface));
	}
	protected native static void wgpuSurfaceAddRef(@Ptr long surface);
	/**
	 * Original signature : <code>void wgpuSurfaceRelease(WGPUSurface)</code><br>
	 * <i>native declaration : webgpu.h:4203</i>
	 */
	public static void wgpuSurfaceRelease(WebgpuLibrary.WGPUSurface surface) {
		wgpuSurfaceRelease(Pointer.getPeer(surface));
	}
	protected native static void wgpuSurfaceRelease(@Ptr long surface);
	/**
	 * Methods of SwapChain<br>
	 * Original signature : <code>WGPUTexture wgpuSwapChainGetCurrentTexture(WGPUSwapChain)</code><br>
	 * <i>native declaration : webgpu.h:4206</i>
	 */
	public static WebgpuLibrary.WGPUTexture wgpuSwapChainGetCurrentTexture(WebgpuLibrary.WGPUSwapChain swapChain) {
		return new WebgpuLibrary.WGPUTexture(wgpuSwapChainGetCurrentTexture(Pointer.getPeer(swapChain)));
	}
	@Ptr 
	protected native static long wgpuSwapChainGetCurrentTexture(@Ptr long swapChain);
	/**
	 * Original signature : <code>WGPUTextureView wgpuSwapChainGetCurrentTextureView(WGPUSwapChain)</code><br>
	 * <i>native declaration : webgpu.h:4207</i>
	 */
	public static WebgpuLibrary.WGPUTextureView wgpuSwapChainGetCurrentTextureView(WebgpuLibrary.WGPUSwapChain swapChain) {
		return new WebgpuLibrary.WGPUTextureView(wgpuSwapChainGetCurrentTextureView(Pointer.getPeer(swapChain)));
	}
	@Ptr 
	protected native static long wgpuSwapChainGetCurrentTextureView(@Ptr long swapChain);
	/**
	 * Original signature : <code>void wgpuSwapChainPresent(WGPUSwapChain)</code><br>
	 * <i>native declaration : webgpu.h:4208</i>
	 */
	public static void wgpuSwapChainPresent(WebgpuLibrary.WGPUSwapChain swapChain) {
		wgpuSwapChainPresent(Pointer.getPeer(swapChain));
	}
	protected native static void wgpuSwapChainPresent(@Ptr long swapChain);
	/**
	 * Original signature : <code>void wgpuSwapChainAddRef(WGPUSwapChain)</code><br>
	 * <i>native declaration : webgpu.h:4209</i>
	 */
	public static void wgpuSwapChainAddRef(WebgpuLibrary.WGPUSwapChain swapChain) {
		wgpuSwapChainAddRef(Pointer.getPeer(swapChain));
	}
	protected native static void wgpuSwapChainAddRef(@Ptr long swapChain);
	/**
	 * Original signature : <code>void wgpuSwapChainRelease(WGPUSwapChain)</code><br>
	 * <i>native declaration : webgpu.h:4210</i>
	 */
	public static void wgpuSwapChainRelease(WebgpuLibrary.WGPUSwapChain swapChain) {
		wgpuSwapChainRelease(Pointer.getPeer(swapChain));
	}
	protected native static void wgpuSwapChainRelease(@Ptr long swapChain);
	/**
	 * Methods of Texture<br>
	 * Original signature : <code>WGPUTextureView wgpuTextureCreateErrorView(WGPUTexture, const WGPUTextureViewDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4213</i>
	 */
	public static WebgpuLibrary.WGPUTextureView wgpuTextureCreateErrorView(WebgpuLibrary.WGPUTexture texture, Pointer<WGPUTextureViewDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUTextureView(wgpuTextureCreateErrorView(Pointer.getPeer(texture), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuTextureCreateErrorView(@Ptr long texture, @Ptr long descriptor);
	/**
	 * Original signature : <code>WGPUTextureView wgpuTextureCreateView(WGPUTexture, const WGPUTextureViewDescriptor*)</code><br>
	 * <i>native declaration : webgpu.h:4214</i>
	 */
	public static WebgpuLibrary.WGPUTextureView wgpuTextureCreateView(WebgpuLibrary.WGPUTexture texture, Pointer<WGPUTextureViewDescriptor > descriptor) {
		return new WebgpuLibrary.WGPUTextureView(wgpuTextureCreateView(Pointer.getPeer(texture), Pointer.getPeer(descriptor)));
	}
	@Ptr 
	protected native static long wgpuTextureCreateView(@Ptr long texture, @Ptr long descriptor);
	/**
	 * Original signature : <code>void wgpuTextureDestroy(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:4215</i>
	 */
	public static void wgpuTextureDestroy(WebgpuLibrary.WGPUTexture texture) {
		wgpuTextureDestroy(Pointer.getPeer(texture));
	}
	protected native static void wgpuTextureDestroy(@Ptr long texture);
	/**
	 * Original signature : <code>uint32_t wgpuTextureGetDepthOrArrayLayers(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:4216</i>
	 */
	public static int wgpuTextureGetDepthOrArrayLayers(WebgpuLibrary.WGPUTexture texture) {
		return wgpuTextureGetDepthOrArrayLayers(Pointer.getPeer(texture));
	}
	protected native static int wgpuTextureGetDepthOrArrayLayers(@Ptr long texture);
	/**
	 * Original signature : <code>WGPUTextureDimension wgpuTextureGetDimension(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:4217</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUTextureDimension > wgpuTextureGetDimension(WebgpuLibrary.WGPUTexture texture) {
		return FlagSet.fromValue(wgpuTextureGetDimension(Pointer.getPeer(texture)), WebgpuLibrary.WGPUTextureDimension.class);
	}
	protected native static int wgpuTextureGetDimension(@Ptr long texture);
	/**
	 * Original signature : <code>WGPUTextureFormat wgpuTextureGetFormat(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:4218</i>
	 */
	public static IntValuedEnum<WebgpuLibrary.WGPUTextureFormat > wgpuTextureGetFormat(WebgpuLibrary.WGPUTexture texture) {
		return FlagSet.fromValue(wgpuTextureGetFormat(Pointer.getPeer(texture)), WebgpuLibrary.WGPUTextureFormat.class);
	}
	protected native static int wgpuTextureGetFormat(@Ptr long texture);
	/**
	 * Original signature : <code>uint32_t wgpuTextureGetHeight(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:4219</i>
	 */
	public static int wgpuTextureGetHeight(WebgpuLibrary.WGPUTexture texture) {
		return wgpuTextureGetHeight(Pointer.getPeer(texture));
	}
	protected native static int wgpuTextureGetHeight(@Ptr long texture);
	/**
	 * Original signature : <code>uint32_t wgpuTextureGetMipLevelCount(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:4220</i>
	 */
	public static int wgpuTextureGetMipLevelCount(WebgpuLibrary.WGPUTexture texture) {
		return wgpuTextureGetMipLevelCount(Pointer.getPeer(texture));
	}
	protected native static int wgpuTextureGetMipLevelCount(@Ptr long texture);
	/**
	 * Original signature : <code>uint32_t wgpuTextureGetSampleCount(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:4221</i>
	 */
	public static int wgpuTextureGetSampleCount(WebgpuLibrary.WGPUTexture texture) {
		return wgpuTextureGetSampleCount(Pointer.getPeer(texture));
	}
	protected native static int wgpuTextureGetSampleCount(@Ptr long texture);
	/**
	 * Original signature : <code>WGPUTextureUsage wgpuTextureGetUsage(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:4222</i>
	 */
	public static long wgpuTextureGetUsage(WebgpuLibrary.WGPUTexture texture) {
		return wgpuTextureGetUsage(Pointer.getPeer(texture));
	}
	protected native static long wgpuTextureGetUsage(@Ptr long texture);
	/**
	 * Original signature : <code>uint32_t wgpuTextureGetWidth(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:4223</i>
	 */
	public static int wgpuTextureGetWidth(WebgpuLibrary.WGPUTexture texture) {
		return wgpuTextureGetWidth(Pointer.getPeer(texture));
	}
	protected native static int wgpuTextureGetWidth(@Ptr long texture);
	/**
	 * Original signature : <code>void wgpuTextureSetLabel(WGPUTexture, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4224</i>
	 */
	public static void wgpuTextureSetLabel(WebgpuLibrary.WGPUTexture texture, Pointer<Byte > label) {
		wgpuTextureSetLabel(Pointer.getPeer(texture), Pointer.getPeer(label));
	}
	protected native static void wgpuTextureSetLabel(@Ptr long texture, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuTextureSetLabel2(WGPUTexture, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4225</i>
	 */
	public static void wgpuTextureSetLabel2(WebgpuLibrary.WGPUTexture texture, WGPUStringView label) {
		wgpuTextureSetLabel2(Pointer.getPeer(texture), label);
	}
	protected native static void wgpuTextureSetLabel2(@Ptr long texture, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuTextureAddRef(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:4226</i>
	 */
	public static void wgpuTextureAddRef(WebgpuLibrary.WGPUTexture texture) {
		wgpuTextureAddRef(Pointer.getPeer(texture));
	}
	protected native static void wgpuTextureAddRef(@Ptr long texture);
	/**
	 * Original signature : <code>void wgpuTextureRelease(WGPUTexture)</code><br>
	 * <i>native declaration : webgpu.h:4227</i>
	 */
	public static void wgpuTextureRelease(WebgpuLibrary.WGPUTexture texture) {
		wgpuTextureRelease(Pointer.getPeer(texture));
	}
	protected native static void wgpuTextureRelease(@Ptr long texture);
	/**
	 * Methods of TextureView<br>
	 * Original signature : <code>void wgpuTextureViewSetLabel(WGPUTextureView, const char*)</code><br>
	 * <i>native declaration : webgpu.h:4230</i>
	 */
	public static void wgpuTextureViewSetLabel(WebgpuLibrary.WGPUTextureView textureView, Pointer<Byte > label) {
		wgpuTextureViewSetLabel(Pointer.getPeer(textureView), Pointer.getPeer(label));
	}
	protected native static void wgpuTextureViewSetLabel(@Ptr long textureView, @Ptr long label);
	/**
	 * Original signature : <code>void wgpuTextureViewSetLabel2(WGPUTextureView, WGPUStringView)</code><br>
	 * <i>native declaration : webgpu.h:4231</i>
	 */
	public static void wgpuTextureViewSetLabel2(WebgpuLibrary.WGPUTextureView textureView, WGPUStringView label) {
		wgpuTextureViewSetLabel2(Pointer.getPeer(textureView), label);
	}
	protected native static void wgpuTextureViewSetLabel2(@Ptr long textureView, WGPUStringView label);
	/**
	 * Original signature : <code>void wgpuTextureViewAddRef(WGPUTextureView)</code><br>
	 * <i>native declaration : webgpu.h:4232</i>
	 */
	public static void wgpuTextureViewAddRef(WebgpuLibrary.WGPUTextureView textureView) {
		wgpuTextureViewAddRef(Pointer.getPeer(textureView));
	}
	protected native static void wgpuTextureViewAddRef(@Ptr long textureView);
	/**
	 * Original signature : <code>void wgpuTextureViewRelease(WGPUTextureView)</code><br>
	 * <i>native declaration : webgpu.h:4233</i>
	 */
	public static void wgpuTextureViewRelease(WebgpuLibrary.WGPUTextureView textureView) {
		wgpuTextureViewRelease(Pointer.getPeer(textureView));
	}
	protected native static void wgpuTextureViewRelease(@Ptr long textureView);
	public static class WGPUSharedBufferMemory extends TypedPointer {
		public WGPUSharedBufferMemory(long address) {
			super(address);
		}
		public WGPUSharedBufferMemory(Pointer address) {
			super(address);
		}
	};
	public static class WGPUExternalTexture extends TypedPointer {
		public WGPUExternalTexture(long address) {
			super(address);
		}
		public WGPUExternalTexture(Pointer address) {
			super(address);
		}
	};
	public static class WGPUSharedFence extends TypedPointer {
		public WGPUSharedFence(long address) {
			super(address);
		}
		public WGPUSharedFence(Pointer address) {
			super(address);
		}
	};
	public static class WGPUDevice extends TypedPointer {
		public WGPUDevice(long address) {
			super(address);
		}
		public WGPUDevice(Pointer address) {
			super(address);
		}
	};
	public static class WGPUComputePipeline extends TypedPointer {
		public WGPUComputePipeline(long address) {
			super(address);
		}
		public WGPUComputePipeline(Pointer address) {
			super(address);
		}
	};
	public static class WGPURenderPassEncoder extends TypedPointer {
		public WGPURenderPassEncoder(long address) {
			super(address);
		}
		public WGPURenderPassEncoder(Pointer address) {
			super(address);
		}
	};
	public static class WGPUTextureView extends TypedPointer {
		public WGPUTextureView(long address) {
			super(address);
		}
		public WGPUTextureView(Pointer address) {
			super(address);
		}
	};
	public static class WGPUAdapter extends TypedPointer {
		public WGPUAdapter(long address) {
			super(address);
		}
		public WGPUAdapter(Pointer address) {
			super(address);
		}
	};
	public static class WGPUSurface extends TypedPointer {
		public WGPUSurface(long address) {
			super(address);
		}
		public WGPUSurface(Pointer address) {
			super(address);
		}
	};
	public static class WGPUSharedTextureMemory extends TypedPointer {
		public WGPUSharedTextureMemory(long address) {
			super(address);
		}
		public WGPUSharedTextureMemory(Pointer address) {
			super(address);
		}
	};
	public static class WGPURenderBundleEncoder extends TypedPointer {
		public WGPURenderBundleEncoder(long address) {
			super(address);
		}
		public WGPURenderBundleEncoder(Pointer address) {
			super(address);
		}
	};
	public static class WGPUCommandEncoder extends TypedPointer {
		public WGPUCommandEncoder(long address) {
			super(address);
		}
		public WGPUCommandEncoder(Pointer address) {
			super(address);
		}
	};
	public static class WGPUPipelineLayout extends TypedPointer {
		public WGPUPipelineLayout(long address) {
			super(address);
		}
		public WGPUPipelineLayout(Pointer address) {
			super(address);
		}
	};
	public static class WGPUInstance extends TypedPointer {
		public WGPUInstance(long address) {
			super(address);
		}
		public WGPUInstance(Pointer address) {
			super(address);
		}
	};
	public static class WGPUQueue extends TypedPointer {
		public WGPUQueue(long address) {
			super(address);
		}
		public WGPUQueue(Pointer address) {
			super(address);
		}
	};
	public static class WGPURenderBundle extends TypedPointer {
		public WGPURenderBundle(long address) {
			super(address);
		}
		public WGPURenderBundle(Pointer address) {
			super(address);
		}
	};
	public static class WGPUQuerySet extends TypedPointer {
		public WGPUQuerySet(long address) {
			super(address);
		}
		public WGPUQuerySet(Pointer address) {
			super(address);
		}
	};
	public static class WGPUSwapChain extends TypedPointer {
		public WGPUSwapChain(long address) {
			super(address);
		}
		public WGPUSwapChain(Pointer address) {
			super(address);
		}
	};
	public static class WGPUComputePassEncoder extends TypedPointer {
		public WGPUComputePassEncoder(long address) {
			super(address);
		}
		public WGPUComputePassEncoder(Pointer address) {
			super(address);
		}
	};
	public static class WGPURenderPipeline extends TypedPointer {
		public WGPURenderPipeline(long address) {
			super(address);
		}
		public WGPURenderPipeline(Pointer address) {
			super(address);
		}
	};
	public static class WGPUSampler extends TypedPointer {
		public WGPUSampler(long address) {
			super(address);
		}
		public WGPUSampler(Pointer address) {
			super(address);
		}
	};
	public static class WGPUCommandBuffer extends TypedPointer {
		public WGPUCommandBuffer(long address) {
			super(address);
		}
		public WGPUCommandBuffer(Pointer address) {
			super(address);
		}
	};
	public static class WGPUTexture extends TypedPointer {
		public WGPUTexture(long address) {
			super(address);
		}
		public WGPUTexture(Pointer address) {
			super(address);
		}
	};
	public static class WGPUBuffer extends TypedPointer {
		public WGPUBuffer(long address) {
			super(address);
		}
		public WGPUBuffer(Pointer address) {
			super(address);
		}
	};
	public static class WGPUBindGroupLayout extends TypedPointer {
		public WGPUBindGroupLayout(long address) {
			super(address);
		}
		public WGPUBindGroupLayout(Pointer address) {
			super(address);
		}
	};
	public static class WGPUBindGroup extends TypedPointer {
		public WGPUBindGroup(long address) {
			super(address);
		}
		public WGPUBindGroup(Pointer address) {
			super(address);
		}
	};
	public static class WGPUShaderModule extends TypedPointer {
		public WGPUShaderModule(long address) {
			super(address);
		}
		public WGPUShaderModule(Pointer address) {
			super(address);
		}
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUExternalTextureImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUInstanceImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPURenderPassEncoderImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPURenderPipelineImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUSharedBufferMemoryImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUDeviceImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUCommandBufferImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUSharedTextureMemoryImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUSurfaceImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUTextureImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUPipelineLayoutImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUSharedFenceImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUComputePipelineImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUQueueImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUCommandEncoderImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPURenderBundleEncoderImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUBufferImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUSwapChainImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUComputePassEncoderImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUShaderModuleImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUTextureViewImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUBindGroupImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUAdapterImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUQuerySetImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUSamplerImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPURenderBundleImpl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface WGPUBindGroupLayoutImpl {
		
	};
}
